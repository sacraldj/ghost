#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã signals_parsed - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
"""

import asyncio
import logging
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def fix_signals_parsed_table():
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ signals_parsed"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ SIGNALS_PARSED")
    print("=" * 50)
    
    try:
        from supabase import create_client, Client
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase
        supabase_url = os.getenv("NEXT_PUBLIC_SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        
        if not supabase_url or not supabase_key:
            print("‚ùå Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        supabase: Client = create_client(supabase_url, supabase_key)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Supabase")
        
        # SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        sql_commands = [
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–¥–µ
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS message_type VARCHAR(50);",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS market_analysis TEXT;",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS detected_trader_style VARCHAR(50);",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS detection_confidence DECIMAL(5,2);",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS reason TEXT;",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS source_channel VARCHAR(100);",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS has_image BOOLEAN DEFAULT false;",
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            "CREATE INDEX IF NOT EXISTS idx_signals_parsed_message_type ON signals_parsed(message_type);",
            "CREATE INDEX IF NOT EXISTS idx_signals_parsed_trader_style ON signals_parsed(detected_trader_style);",
            "CREATE INDEX IF NOT EXISTS idx_signals_parsed_has_image ON signals_parsed(has_image);"
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
        for i, sql in enumerate(sql_commands, 1):
            try:
                result = supabase.rpc('execute_sql', {'sql': sql}).execute()
                print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {i}/{len(sql_commands)} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            except Exception as e:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ postgrest
                print(f"‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ {i} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ RPC, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±")
                print(f"   SQL: {sql}")
        
        print("\nüéâ –¢–ê–ë–õ–ò–¶–ê SIGNALS_PARSED –û–ë–ù–û–í–õ–ï–ù–ê!")
        print("üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
        print("   - message_type (—Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è)")
        print("   - market_analysis (—Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑)")
        print("   - detected_trader_style (—Å—Ç–∏–ª—å —Ç—Ä–µ–π–¥–µ—Ä–∞)")
        print("   - detection_confidence (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)")
        print("   - reason (–ø—Ä–∏—á–∏–Ω–∞ –≤—Ö–æ–¥–∞)")
        print("   - source_channel (–∫–∞–Ω–∞–ª –∏—Å—Ç–æ—á–Ω–∏–∫–∞)")
        print("   - has_image (–µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    success = await fix_signals_parsed_table()
    
    if success:
        print("\n‚úÖ –°–•–ï–ú–ê SIGNALS_PARSED –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–•–ï–ú–´")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é –≤ Supabase")
        print("\nüìã SQL –î–õ–Ø –†–£–ß–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        sql_commands = [
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS message_type VARCHAR(50);",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS market_analysis TEXT;",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS detected_trader_style VARCHAR(50);",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS detection_confidence DECIMAL(5,2);",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS reason TEXT;",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS source_channel VARCHAR(100);",
            "ALTER TABLE signals_parsed ADD COLUMN IF NOT EXISTS has_image BOOLEAN DEFAULT false;"
        ]
        for sql in sql_commands:
            print(f"   {sql}")

if __name__ == "__main__":
    asyncio.run(main())
