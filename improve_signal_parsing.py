#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —Å—ã—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import re
import os
from datetime import datetime
from dotenv import load_dotenv
from supabase import create_client

load_dotenv()

class ImprovedSignalParser:
    def __init__(self):
        self.supabase = create_client(
            os.getenv('NEXT_PUBLIC_SUPABASE_URL'),
            os.getenv('SUPABASE_SERVICE_ROLE_KEY')
        )
    
    def parse_trading_signal(self, text: str):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        
        # –ò—â–µ–º —Å–∏–º–≤–æ–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        symbol_patterns = [
            r'#(\w+USDT?)\b',
            r'#(\w+)\b',
            r'\$(\w+USDT?)\b',
            r'\$(\w+)\b',
            r'\b(\w+USDT?)\b',
            r'\b([A-Z]{3,5})\s*(?:USDT?|/USDT?)',
            r'(?:–∫—É–ø–∏—Ç—å|buy|long|short|sell)\s+([A-Z]{3,8})',
            r'([A-Z]{3,8})\s*(?:–ª–æ–Ω–≥|long|—à–æ—Ä—Ç|short)'
        ]
        
        symbol = None
        for pattern in symbol_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                symbol = matches[0].upper()
                # –î–æ–±–∞–≤–ª—è–µ–º USDT –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not symbol.endswith('USDT') and not symbol.endswith('USD'):
                    symbol += 'USDT'
                break
        
        # –ò—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        side = 'BUY'
        long_words = ['long', '–ª–æ–Ω–≥', 'buy', '–∫—É–ø–∏—Ç—å', '–ø–æ–∫—É–ø–∫–∞', 'üü¢', '‚¨ÜÔ∏è', 'bull']
        short_words = ['short', '—à–æ—Ä—Ç', 'sell', '–ø—Ä–æ–¥–∞—Ç—å', '–ø—Ä–æ–¥–∞–∂–∞', 'üî¥', '‚¨áÔ∏è', 'bear']
        
        text_lower = text.lower()
        if any(word in text_lower for word in short_words):
            side = 'SELL'
        elif any(word in text_lower for word in long_words):
            side = 'BUY'
        
        # –ò—â–µ–º —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
        entry_patterns = [
            r'entry[:\s]*(\d+(?:\.\d+)?)',
            r'–≤—Ö–æ–¥[:\s]*(\d+(?:\.\d+)?)',
            r'–≤—Ö–æ–¥–Ω–∞—è[:\s]*(\d+(?:\.\d+)?)',
            r'—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞[:\s]*(\d+(?:\.\d+)?)',
            r'–æ—Ç\s*(\d+(?:\.\d+)?)',
            r'(\d+(?:\.\d+)?)\s*(?:usdt?|–¥–æ–ª–ª|$)',
            r'–ø–æ\s*(\d+(?:\.\d+)?)',
            r'–æ–∫–æ–ª–æ\s*(\d+(?:\.\d+)?)'
        ]
        
        entry_price = None
        for pattern in entry_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                try:
                    entry_price = float(matches[0])
                    if entry_price > 0:
                        break
                except:
                    continue
        
        # –ò—â–µ–º —Ü–µ–ª–∏ (TP)
        target_patterns = [
            r'tp\s*[1-4]?[:\s]*(\d+(?:\.\d+)?)',
            r'target[:\s]*(\d+(?:\.\d+)?)',
            r'—Ü–µ–ª—å[:\s]*(\d+(?:\.\d+)?)',
            r'—Ç–µ–π–∫[:\s]*(\d+(?:\.\d+)?)',
            r'–¥–æ\s*(\d+(?:\.\d+)?)',
            r'(\d+(?:\.\d+)?)\s*(?:—Ü–µ–ª—å|target|tp)'
        ]
        
        targets = []
        for pattern in target_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            for match in matches:
                try:
                    price = float(match)
                    if price > 0 and price not in targets:
                        targets.append(price)
                except:
                    continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–ª–∏
        targets = sorted(set(targets))[:4]  # –ú–∞–∫—Å–∏–º—É–º 4 —Ü–µ–ª–∏
        
        # –ò—â–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        sl_patterns = [
            r'sl[:\s]*(\d+(?:\.\d+)?)',
            r'stop[:\s]*(\d+(?:\.\d+)?)',
            r'—Å—Ç–æ–ø[:\s]*(\d+(?:\.\d+)?)',
            r'–ª–æ—Å—Å[:\s]*(\d+(?:\.\d+)?)',
            r'—É–±—ã—Ç–æ–∫[:\s]*(\d+(?:\.\d+)?)'
        ]
        
        stop_loss = None
        for pattern in sl_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                try:
                    stop_loss = float(matches[0])
                    if stop_loss > 0:
                        break
                except:
                    continue
        
        # –ò—â–µ–º –ø–ª–µ—á–æ
        leverage_patterns = [
            r'leverage[:\s]*(\d+)[x]?',
            r'–ø–ª–µ—á–æ[:\s]*(\d+)[x]?',
            r'x(\d+)',
            r'(\d+)x'
        ]
        
        leverage = None
        for pattern in leverage_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                try:
                    leverage = int(matches[0])
                    if 1 <= leverage <= 125:
                        break
                except:
                    continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º
        is_trading_signal = bool(
            symbol and 
            (entry_price or targets) and
            any(word in text_lower for word in [
                'signal', '—Å–∏–≥–Ω–∞–ª', 'trade', '—Ç–æ—Ä–≥–æ–≤–ª—è', 'buy', 'sell', 
                'long', 'short', '–ª–æ–Ω–≥', '—à–æ—Ä—Ç', 'tp', 'sl', 'entry', '–≤—Ö–æ–¥'
            ])
        )
        
        confidence = 0.3
        if symbol and entry_price and targets:
            confidence = 0.9
        elif symbol and (entry_price or targets):
            confidence = 0.7
        elif symbol:
            confidence = 0.5
        
        return {
            'symbol': symbol,
            'side': side,
            'entry_price': entry_price,
            'targets': targets,
            'stop_loss': stop_loss,
            'leverage': leverage,
            'is_trading_signal': is_trading_signal,
            'confidence': confidence
        }
    
    def process_raw_signals(self, limit=100):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        print(f'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {limit} —Å—ã—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—ã—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        raw_signals = self.supabase.table('signals_raw').select('*').eq('processed', False).limit(limit).execute()
        
        processed_count = 0
        trading_signals_count = 0
        
        for raw_signal in raw_signals.data:
            try:
                # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
                parsed = self.parse_trading_signal(raw_signal['text'])
                
                if parsed['is_trading_signal']:
                    # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                    signal_data = {
                        # signal_id –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –æ–Ω auto-increment
                        'trader_id': raw_signal['trader_id'][:10],  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
                        'raw_id': raw_signal['raw_id'],
                        'posted_at': raw_signal['posted_at'],
                        'symbol': parsed['symbol'][:10] if parsed['symbol'] else None,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                        'side': parsed['side'][:10] if parsed['side'] else None,
                        'entry_type': 'market'[:10],
                        'entry': parsed['entry_price'],
                        'tp1': parsed['targets'][0] if len(parsed['targets']) > 0 else None,
                        'tp2': parsed['targets'][1] if len(parsed['targets']) > 1 else None,
                        'tp3': parsed['targets'][2] if len(parsed['targets']) > 2 else None,
                        'tp4': parsed['targets'][3] if len(parsed['targets']) > 3 else None,
                        'sl': parsed['stop_loss'],
                        'leverage_hint': parsed['leverage'],
                        'confidence': parsed['confidence'],
                        'parsed_at': datetime.now().isoformat(),
                        'parse_version': 'v1.1'[:10],  # –û–±—Ä–µ–∑–∞–µ–º
                        'is_valid': True
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                    self.supabase.table('signals_parsed').upsert(signal_data).execute()
                    trading_signals_count += 1
                    
                    print(f'üéØ –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {parsed["symbol"]} {parsed["side"]} ({parsed["confidence"]:.1f})')
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                self.supabase.table('signals_raw').update({'processed': True}).eq('raw_id', raw_signal['raw_id']).execute()
                processed_count += 1
                
            except Exception as e:
                print(f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {raw_signal["raw_id"]}: {e}')
        
        print(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} —Å–æ–æ–±—â–µ–Ω–∏–π')
        print(f'üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {trading_signals_count}')
        
        return processed_count, trading_signals_count

if __name__ == "__main__":
    parser = ImprovedSignalParser()
    parser.process_raw_signals(200)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 200 —Å—ã—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
