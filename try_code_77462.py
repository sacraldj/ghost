#!/usr/bin/env python3
import asyncio
import os
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError

load_dotenv()

async def try_code():
    api_id = int(os.getenv('TELEGRAM_API_ID'))
    api_hash = os.getenv('TELEGRAM_API_HASH')
    phone = os.getenv('TELEGRAM_PHONE')
    
    print(f"üî¢ –ü—Ä–æ–±—É–µ–º –∫–æ–¥ 77462 –¥–ª—è {phone}")
    
    client = TelegramClient('ghost_session', api_id, api_hash)
    
    try:
        await client.connect()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥
        print("üìû –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥...")
        sent = await client.send_code_request(phone)
        print(f"‚úÖ –ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω: {sent.phone_code_hash}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        code = "77462"
        print(f"üîê –ü—Ä–æ–±—É–µ–º –∫–æ–¥: {code}")
        
        try:
            await client.sign_in(phone, code)
            
            me = await client.get_me()
            print(f"‚úÖ –£–°–ü–ï–•! –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
            test_channels = ['@ghostsignaltest', '@whalesguide', '@cryptoattack24']
            print("\nüì∫ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã:")
            
            for channel in test_channels:
                try:
                    entity = await client.get_entity(channel)
                    print(f"‚úÖ {channel}: {entity.title}")
                except Exception as e:
                    print(f"‚ö†Ô∏è {channel}: {str(e)}")
            
            print(f"\nüéâ –°–µ—Å—Å–∏—è ghost_session.session —Å–æ–∑–¥–∞–Ω–∞!")
            return True
            
        except SessionPasswordNeededError:
            print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA")
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
            await client.sign_in(password=password)
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ–¥–æ–º: {e}")
            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            for alt_code in ["94879", "74660"]:
                print(f"üîÑ –ü—Ä–æ–±—É–µ–º –∫–æ–¥ {alt_code}...")
                try:
                    await client.sign_in(phone, alt_code)
                    me = await client.get_me()
                    print(f"‚úÖ –£—Å–ø–µ—Ö —Å –∫–æ–¥–æ–º {alt_code}! {me.first_name}")
                    return True
                except:
                    print(f"‚ùå –ö–æ–¥ {alt_code} –Ω–µ –ø–æ–¥–æ—à–µ–ª")
            return False
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
        
    finally:
        await client.disconnect()

if __name__ == "__main__":
    success = asyncio.run(try_code())
    if success:
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å–∫–∞–µ–º start_all.py...")
    else:
        print("\n‚ùå –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å email –≤ Telegram")
