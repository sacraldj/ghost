#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GHOST
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É
"""

import os
import asyncio
import sys
from datetime import datetime

# –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
os.environ['GHOST_NEWS_INTEGRATION_ENABLED'] = 'true'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_news_integration():
    print("üß™ –¢–ï–°–¢ –ù–û–í–û–°–¢–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò GHOST")
    print("=" * 60)
    print("‚ö†Ô∏è  –ë–ï–ó–û–ü–ê–°–ù–´–ô –¢–ï–°–¢ - –ù–ï –í–õ–ò–Ø–ï–¢ –ù–ê –¢–û–†–ì–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        sys.path.append('core')
        from safe_news_integrator import get_safe_news_integrator
        from news_noise_filter import NewsNoiseFilter
        from news_statistics_tracker import get_news_stats_tracker
        
        print("\nüì¶ –ú–û–î–£–õ–ò –ó–ê–ì–†–£–ñ–ï–ù–´:")
        print("   ‚úÖ Safe News Integrator")
        print("   ‚úÖ News Noise Filter") 
        print("   ‚úÖ News Statistics Tracker")
        
        # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
        print("\nüîß –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¢–û–†–ê:")
        integrator = get_safe_news_integrator()
        status = integrator.get_integration_status()
        print(f"   Enabled: {'‚úÖ' if status['enabled'] else '‚ùå'}")
        print(f"   Components: {list(status['components'].keys())}")
        
        # –¢–µ—Å—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        print("\nüìä –¢–ï–°–¢ –û–ë–û–ì–ê–©–ï–ù–ò–Ø –°–ò–ì–ù–ê–õ–ê:")
        test_signal = {
            'symbol': 'BTCUSDT',
            'side': 'LONG',
            'entry': 45000,
            'targets': [46000, 47000],
            'stop_loss': 44000,
            'confidence': 0.8
        }
        
        enhanced_signal = await integrator.enhance_signal_safely(test_signal, {})
        
        if 'news_enhancement' in enhanced_signal:
            print("   ‚úÖ –°–∏–≥–Ω–∞–ª –æ–±–æ–≥–∞—â—ë–Ω –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
            enhancement = enhanced_signal['news_enhancement']
            print(f"   Summary: {enhancement['summary']}")
            print(f"   Confidence modifier: {enhancement['confidence_suggestion']:.2f}")
        else:
            print("   ‚ö™ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ —à—É–º–∞
        print("\nüîç –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê –®–£–ú–ê:")
        filter_instance = NewsNoiseFilter()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –î–∞—Ä—ç–Ω–∞)
        test_news = [
            {
                'title': '–ú–∏–Ω–∏—Å—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –°–®–ê: –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—Å—è –ø–æ–∫—É–ø–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É',
                'content': '–í–æ–∑–º–æ–∂–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –§–†–° –Ω–∞ 25 –±.–ø.',
                'source': 'reuters',
                'published_at': datetime.now().isoformat()
            },
            {
                'title': '–®–æ–∫–∏—Ä—É—é—â–∞—è –ø—Ä–∞–≤–¥–∞ –æ –±–∏—Ç–∫–æ–∏–Ω–µ! –ö –ª—É–Ω–µ!',
                'content': '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞! Exclusive hype!',
                'source': 'cryptopotato',
                'published_at': datetime.now().isoformat()
            },
            {
                'title': '–ê—Ä—Ç—É—Ä –•–µ–π—Å –∑–∞—è–≤–∏–ª, —á—Ç–æ –∑–∞–∫—É–ø–∞–µ—Ç ETH',
                'content': '–ê—Ä—Ç—É—Ä –•–µ–π—Å –ø—Ä–∏–æ–±—Ä–µ–ª ETH –Ω–∞ 6,85 –º–ª–Ω $',
                'source': 'coindesk',
                'published_at': datetime.now().isoformat()
            }
        ]
        
        for i, news in enumerate(test_news, 1):
            result = filter_instance.filter_news(news)
            print(f"   {i}. {'‚úÖ –í–ê–ñ–ù–ê–Ø' if result.is_important else '‚ùå –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û'} - {news['title'][:40]}...")
            print(f"      Score: {result.importance_score:.2f}, Categories: {result.detected_categories}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìà –¢–ï–°–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
        stats_tracker = get_news_stats_tracker()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        for news in test_news:
            filter_result = filter_instance.filter_news(news)
            if filter_result.is_important:
                stats_tracker.record_news_event({
                    'sentiment': 0.5 if '–ø–æ–∫—É–ø–∞–µ—Ç' in news['title'] else -0.2 if '—à–æ–∫–∏—Ä—É—é—â–∞—è' in news['title'] else 0.0,
                    'market_impact': filter_result.importance_score,
                    'is_critical': filter_result.importance_score > 0.7
                })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = stats_tracker.generate_daily_report()
        print(f"   ‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f"      Total news: {report['summary']['total_news']}")
        print(f"      Critical news: {report['summary']['critical_news']}")
        print(f"      Sentiment breakdown: {report['sentiment_breakdown']}")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ù–æ–≤–æ—Å—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ù–ï –ó–ê–¢–†–û–ù–£–¢–ê")
        
        return True
        
    except ImportError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        return False
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_environment_setup():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîß –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    news_enabled = os.getenv('GHOST_NEWS_INTEGRATION_ENABLED', 'false')
    print(f"   GHOST_NEWS_INTEGRATION_ENABLED: {news_enabled}")
    
    supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL', '')
    print(f"   SUPABASE_URL: {'‚úÖ Set' if supabase_url else '‚ùå Missing'}")
    
    openai_key = os.getenv('OPENAI_API_KEY', '')
    print(f"   OPENAI_API_KEY: {'‚úÖ Set' if openai_key else '‚ö™ Optional'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    data_dir = 'data'
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
        print(f"   ‚úÖ Created {data_dir}/ directory")
    else:
        print(f"   ‚úÖ {data_dir}/ directory exists")

async def main():
    print("üöÄ GHOST NEWS INTEGRATION TEST")
    print("–í–µ—Ä—Å–∏—è: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è v1.0")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    test_environment_setup()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    success = await test_news_integration()
    
    if success:
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ: GHOST_NEWS_INTEGRATION_ENABLED=true")
        print("2. –î–æ–±–∞–≤—å—Ç–µ NewsAnalysisDashboard –≤ –¥–∞—à–±–æ—Ä–¥")
        print("3. API endpoint: /api/news-analysis")
        print("4. –í—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏")
        
        print("\nüìñ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
        print("# –í –∫–æ–¥–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
        print("from core.safe_news_integrator import safe_enhance_signal")
        print("enhanced = await safe_enhance_signal(signal_data)")
        print("# enhanced —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª + news_enhancement")
    else:
        print("\nüí° –£–°–¢–†–ê–ù–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ core/ –¥–æ—Å—Ç—É–ø–Ω—ã")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install openai google-generativeai")

if __name__ == "__main__":
    asyncio.run(main())
