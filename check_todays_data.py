#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta
import json

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def check_todays_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ"""
    
    from signals.signal_orchestrator_with_supabase import orchestrator_with_supabase
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ Supabase...")
    
    if not orchestrator_with_supabase.supabase:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")
        return
    
    # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
    today = datetime.now().strftime('%Y-%m-%d')
    print(f"üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞: {today}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        raw_result = orchestrator_with_supabase.supabase.table('signals_raw').select('*').gte('created_at', f'{today}T00:00:00').execute()
        print(f"üìä signals_raw –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(raw_result.data)} –∑–∞–ø–∏—Å–µ–π")
        
        if raw_result.data:
            print("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—ã—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–∞:")
            for i, signal in enumerate(raw_result.data[-3:]):
                time = signal.get('created_at', 'N/A')[:19]
                trader = signal.get('trader_id', 'N/A')
                text = signal.get('raw_text', '')[:50]
                print(f"  {i+1}. [{time}] {trader}: {text}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è  
        parsed_result = orchestrator_with_supabase.supabase.table('signals_parsed').select('*').gte('created_at', f'{today}T00:00:00').execute()
        print(f"üìä signals_parsed –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(parsed_result.data)} –∑–∞–ø–∏—Å–µ–π")
        
        if parsed_result.data:
            print("üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞:")
            for i, signal in enumerate(parsed_result.data[-3:]):
                time = signal.get('created_at', 'N/A')[:19] 
                trader = signal.get('trader_id', 'N/A')
                symbol = signal.get('symbol', 'N/A')
                side = signal.get('side', 'N/A')
                print(f"  {i+1}. [{time}] {trader}: {symbol} {side}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º v_trades –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        try:
            trades_result = orchestrator_with_supabase.supabase.table('v_trades').select('*').gte('created_at', f'{today}T00:00:00').execute()
            print(f"üìä v_trades –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(trades_result.data)} –∑–∞–ø–∏—Å–µ–π")
        except:
            print(f"üìä v_trades: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    print(f"\nüîß –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
    print(f"  ‚Ä¢ GHOST —Å–∏—Å—Ç–µ–º–∞: ‚ùå –ù–ï –ó–ê–ü–£–©–ï–ù–ê")
    print(f"  ‚Ä¢ Telegram —Å–ª—É—à–∞–Ω–∏–µ: ‚ùå –û–°–¢–ê–ù–û–í–õ–ï–ù–û") 
    print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"  1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: python3 start_all.py")
    print(f"  2. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å Telegram –∫–∞–Ω–∞–ª—ã")  
    print(f"  3. –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

if __name__ == "__main__":
    asyncio.run(check_todays_messages())
