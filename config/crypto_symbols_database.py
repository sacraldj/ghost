"""
–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∞–∑–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
"""

from typing import List, Dict, Optional, Set
import difflib
import re

class CryptoSymbolsDatabase:
    """–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫"""
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã
        self.base_currencies = {
            'BTC', 'ETH', 'BNB', 'ADA', 'XRP', 'SOL', 'DOT', 'AVAX', 'MATIC', 'LINK',
            'UNI', 'LTC', 'BCH', 'XLM', 'VET', 'TRX', 'EOS', 'ATOM', 'ALGO', 'DOGE',
            'SHIB', 'APT', 'ARB', 'OP', 'NEAR', 'FTM', 'SAND', 'MANA', 'AXS', 'ICP',
            'THETA', 'MKR', 'AAVE', 'CRV', 'SUSHI', 'COMP', 'YFI', 'SNX', 'BAL', 'ZRX',
            'ORDI', 'WIF', 'PEPE', 'FLOKI', 'BONK', 'MEME', 'BOME', 'JUP', 'WEN', 'MYRO',
            'ETHFI', 'ENA', 'W', 'TNSR', 'AEVO', 'REZ', 'BB', 'LISTA', 'ZK', 'ZRO',
            'HMSTR', 'CATI', 'NEIRO', 'EIGEN', 'GRASS', 'SCR', 'LUMIA', 'KAIA'
        }
        
        # –ö–æ—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        self.quote_currencies = {'USDT', 'USD', 'USDC', 'BUSD', 'BTC', 'ETH', 'BNB'}
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã –ø–æ –±–∏—Ä–∂–∞–º
        self.exchange_pairs = {
            'binance': self._generate_pairs(['USDT', 'BTC', 'ETH', 'BNB']),
            'bybit': self._generate_pairs(['USDT', 'USD']),
            'okx': self._generate_pairs(['USDT', 'USD']),
            'bitget': self._generate_pairs(['USDT']),
            'kucoin': self._generate_pairs(['USDT'])
        }
        
        # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã
        self.all_pairs = set()
        for pairs in self.exchange_pairs.values():
            self.all_pairs.update(pairs)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        self.alternative_names = {
            'BTC': ['BITCOIN', 'BITCOINS', 'BTCOIN', 'BITCION'],
            'ETH': ['ETHEREUM', 'ETHER', 'ETHERIUM', 'ETHH', 'ETHE'],
            'BNB': ['BINANCE', 'BINANCECOIN', 'BNB'],
            'ADA': ['CARDANO', 'ADAA'],
            'XRP': ['RIPPLE', 'XRPP'],
            'SOL': ['SOLANA', 'SOLL'],
            'DOT': ['POLKADOT', 'DOTT'],
            'AVAX': ['AVALANCHE', 'AVAXX'],
            'MATIC': ['POLYGON', 'MATICC'],
            'DOGE': ['DOGECOIN', 'DOGGE'],
            'SHIB': ['SHIBAINU', 'SHIBA'],
            'PEPE': ['PEPECOIN', 'PEPEE'],
            'WIF': ['DOGWIFHAT', 'WIFF'],
        }
        
        # –ß–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –æ–ø–µ—á–∞—Ç–∫–∏
        self.common_typos = {
            'BTTC': 'BTC',
            'ETTH': 'ETH', 
            'ETHH': 'ETH',
            'ETHE': 'ETH',
            'BTCC': 'BTC',
            'BTCCC': 'BTC',
            'SOLL': 'SOL',
            'ADAA': 'ADA',
            'XRPP': 'XRP'
        }
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.separators = ['/', '-', '_', ' ', '']
    
    def _generate_pairs(self, quote_currencies: List[str]) -> Set[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –≤–∞–ª—é—Ç"""
        pairs = set()
        for base in self.base_currencies:
            for quote in quote_currencies:
                pairs.add(f"{base}{quote}")
        return pairs
    
    def normalize_symbol(self, raw_symbol: str) -> Optional[str]:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ª—é–±—ã—Ö –æ–ø–µ—á–∞—Ç–æ–∫"""
        if not raw_symbol:
            return None
        
        # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleaned = raw_symbol.upper().strip()
        cleaned = ''.join(c for c in cleaned if c.isalnum() or c in self.separators)
        
        # –£–±–∏—Ä–∞–µ–º # $ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
        if cleaned.startswith(('#', '$')):
            cleaned = cleaned[1:]
        
        if not cleaned:
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ—â–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞
        match_result = self.find_best_match(cleaned)
        
        if match_result:
            symbol, confidence, match_type = match_result
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if match_type == "exact":
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
                pass
            elif confidence >= 0.8:
                print(f"üéØ Symbol auto-corrected: '{cleaned}' ‚Üí '{symbol}' (confidence: {confidence:.2f}, type: {match_type})")
            elif confidence >= 0.6:
                print(f"üîß Symbol suggestion: '{cleaned}' ‚Üí '{symbol}' (confidence: {confidence:.2f}, type: {match_type})")
            
            return symbol
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏ –¥–æ–±–∞–≤–∏—Ç—å USDT
        base_currency = self._extract_base_currency(cleaned)
        if base_currency:
            candidate = f"{base_currency}USDT"
            if candidate in self.all_pairs:
                print(f"üí° Base currency detected: '{cleaned}' ‚Üí '{candidate}'")
                return candidate
        
        return None
    
    def _extract_base_currency(self, symbol: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –∏–∑ —Å–∏–º–≤–æ–ª–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for base in self.base_currencies:
            if symbol.startswith(base):
                return base
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        for base, alternatives in self.alternative_names.items():
            for alt in alternatives:
                if alt in symbol.upper():
                    return base
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            for alt in alternatives:
                if symbol.startswith(alt):
                    return base
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ similarity –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        for base in self.base_currencies:
            if len(base) <= 4:  # –¢–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
                ratio = difflib.SequenceMatcher(None, symbol[:len(base)+1], base).ratio()
                if ratio >= 0.8:  # 80% –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
                    return base
        
        return None
    
    def _levenshtein_distance(self, s1: str, s2: str) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏"""
        if len(s1) < len(s2):
            return self._levenshtein_distance(s2, s1)
        
        if len(s2) == 0:
            return len(s1)
        
        previous_row = list(range(len(s2) + 1))
        for i, c1 in enumerate(s1):
            current_row = [i + 1]
            for j, c2 in enumerate(s2):
                insertions = previous_row[j + 1] + 1
                deletions = current_row[j] + 1
                substitutions = previous_row[j] + (c1 != c2)
                current_row.append(min(insertions, deletions, substitutions))
            previous_row = current_row
        
        return previous_row[-1]
    
    def _fuzzy_match_score(self, symbol: str, candidate: str) -> float:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫–æ—Ä —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—á–∞—Ç–æ–∫"""
        if not symbol or not candidate:
            return 0.0
        
        # –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
        lev_dist = self._levenshtein_distance(symbol.upper(), candidate.upper())
        max_len = max(len(symbol), len(candidate))
        lev_score = 1.0 - (lev_dist / max_len) if max_len > 0 else 0.0
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ (—á–∞—Å—Ç–æ –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –∫–æ–Ω—Ü–µ)
        start_match = 0
        for i in range(min(len(symbol), len(candidate))):
            if symbol[i].upper() == candidate[i].upper():
                start_match += 1
            else:
                break
        start_score = start_match / max(len(symbol), len(candidate))
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω—ã (—á–∞—Å—Ç–æ –æ–ø–µ—á–∞—Ç–∫–∏ –Ω–µ –º–µ–Ω—è—é—Ç –¥–ª–∏–Ω—É)
        length_score = 1.0 - abs(len(symbol) - len(candidate)) / max(len(symbol), len(candidate))
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –±—É–∫–≤ (BTC, ETH –∏ —Ç–¥)
        base_score = 0.0
        for base in self.base_currencies:
            if base in symbol.upper() and base in candidate.upper():
                base_score = 0.3
                break
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä
        total_score = (lev_score * 0.5 + start_score * 0.3 + length_score * 0.2 + base_score)
        
        return min(1.0, total_score)
    
    def _generate_typo_variants(self, symbol: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        if not symbol or len(symbol) < 2:
            return []
        
        variants = set()
        symbol = symbol.upper()
        
        # 1. –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for i in range(len(symbol)):
            variant = symbol[:i] + symbol[i+1:]
            if len(variant) >= 2:
                variants.add(variant)
        
        # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for i in range(len(symbol) + 1):
            for char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
                variant = symbol[:i] + char + symbol[i:]
                if len(variant) <= 15:  # –†–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç
                    variants.add(variant)
        
        # 3. –ó–∞–º–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for i in range(len(symbol)):
            for char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
                if char != symbol[i]:
                    variant = symbol[:i] + char + symbol[i+1:]
                    variants.add(variant)
        
        # 4. –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        for i in range(len(symbol) - 1):
            variant = symbol[:i] + symbol[i+1] + symbol[i] + symbol[i+2:]
            variants.add(variant)
        
        return list(variants)
    
    def _find_similar_symbol(self, symbol: str) -> Optional[str]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º USDT –ø–∞—Ä"""
        if not symbol:
            return None
        
        symbol = symbol.upper()
        best_match = None
        best_score = 0.0
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–∞–∑—ã + USDT
        for base in self.base_currencies:
            if base in symbol:
                usdt_candidate = f"{base}USDT"
                if usdt_candidate in self.all_pairs:
                    score = self._fuzzy_match_score(symbol, usdt_candidate)
                    if score >= 0.6:  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è USDT –ø–∞—Ä
                        return usdt_candidate
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ USDT –ø–∞—Ä—ã
        usdt_pairs = [pair for pair in self.all_pairs if pair.endswith('USDT')]
        for pair in usdt_pairs:
            score = self._fuzzy_match_score(symbol, pair)
            if score > best_score:
                best_score = score
                best_match = pair
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ò—â–µ–º –¥—Ä—É–≥–∏–µ USD –ø–∞—Ä—ã
        if best_score < 0.7:
            usd_pairs = [pair for pair in self.all_pairs if pair.endswith(('USD', 'USDC'))]
            for pair in usd_pairs:
                score = self._fuzzy_match_score(symbol, pair)
                if score > best_score:
                    best_score = score
                    best_match = pair
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 4: –¢–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - –¥—Ä—É–≥–∏–µ –ø–∞—Ä—ã
        if best_score < 0.8:
            for pair in self.all_pairs:
                if not pair.endswith(('USDT', 'USD', 'USDC')):
                    score = self._fuzzy_match_score(symbol, pair)
                    if score > best_score:
                        best_score = score
                        best_match = pair
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã
        return best_match if best_score >= 0.65 else None
    
    def get_suggestions(self, symbol: str, limit: int = 5) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–º–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø–µ—á–∞—Ç–æ–∫"""
        if not symbol:
            return []
            
        symbol = symbol.upper().strip()
        suggestions = []
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∏—Ö —Å–∫–æ—Ä–∞–º–∏
        candidates = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ä—ã —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º scoring
        for pair in self.all_pairs:
            score = self._fuzzy_match_score(symbol, pair)
            if score >= 0.3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                candidates.append((pair, score))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è –ø–∞—Ä —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –±–∞–∑–∞–º–∏
        for base in self.base_currencies:
            if base in symbol:
                for pair in self.all_pairs:
                    if pair.startswith(base):
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä –µ—Å–ª–∏ –±–∞–∑–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                        score = self._fuzzy_match_score(symbol, pair) + 0.2
                        candidates.append((pair, min(1.0, score)))
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É
        unique_candidates = {}
        for pair, score in candidates:
            if pair not in unique_candidates or unique_candidates[pair] < score:
                unique_candidates[pair] = score
        
        sorted_candidates = sorted(unique_candidates.items(), key=lambda x: x[1], reverse=True)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        suggestions = [pair for pair, score in sorted_candidates[:limit]]
        
        return suggestions
    
    def find_best_match(self, symbol: str) -> Optional[tuple]:
        """–ù–∞–π—Ç–∏ –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º USDT –ø–∞—Ä"""
        if not symbol:
            return None
        
        symbol = symbol.upper().strip()
        best_match = None
        best_score = 0.0
        match_type = "unknown"
        
        # 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if symbol in self.all_pairs:
            return (symbol, 1.0, "exact")
        
        # 2. –ò–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—á–∞—Ç–∫–∞ ‚Üí USDT
        if symbol in self.common_typos:
            base = self.common_typos[symbol]
            candidate = f"{base}USDT"
            if candidate in self.all_pairs:
                return (candidate, 0.95, "known_typo")
        
        # 3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Üí USDT
        for base, alternatives in self.alternative_names.items():
            if symbol in alternatives:
                candidate = f"{base}USDT"
                if candidate in self.all_pairs:
                    return (candidate, 0.90, "alternative_name")
        
        # 4. –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –ø–æ–∏—Å–∫ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã + USDT
        for base in self.base_currencies:
            if base in symbol or symbol.startswith(base):
                candidate = f"{base}USDT"
                if candidate in self.all_pairs:
                    score = self._fuzzy_match_score(symbol, candidate)
                    if score >= 0.6:  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è USDT
                        return (candidate, max(0.8, score), "base_currency_usdt")
        
        # 5. Fuzzy matching —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º USDT
        # –°–Ω–∞—á–∞–ª–∞ USDT –ø–∞—Ä—ã
        usdt_pairs = [pair for pair in self.all_pairs if pair.endswith('USDT')]
        for pair in usdt_pairs:
            score = self._fuzzy_match_score(symbol, pair)
            # –ë–æ–Ω—É—Å –¥–ª—è USDT –ø–∞—Ä
            adjusted_score = score + 0.1 if score > 0.5 else score
            if adjusted_score > best_score:
                best_score = adjusted_score
                best_match = pair
                if adjusted_score >= 0.9:
                    match_type = "high_similarity_usdt"
                elif adjusted_score >= 0.7:
                    match_type = "medium_similarity_usdt"
                else:
                    match_type = "low_similarity_usdt"
        
        # –ó–∞—Ç–µ–º USD/USDC –ø–∞—Ä—ã (–µ—Å–ª–∏ USDT –Ω–µ –ø–æ–¥–æ—à–ª–æ)
        if best_score < 0.8:
            usd_pairs = [pair for pair in self.all_pairs if pair.endswith(('USD', 'USDC'))]
            for pair in usd_pairs:
                score = self._fuzzy_match_score(symbol, pair)
                if score > best_score:
                    best_score = score
                    best_match = pair
                    if score >= 0.9:
                        match_type = "high_similarity_usd"
                    elif score >= 0.7:
                        match_type = "medium_similarity_usd"
                    else:
                        match_type = "low_similarity_usd"
        
        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - –¥—Ä—É–≥–∏–µ –ø–∞—Ä—ã
        if best_score < 0.8:
            other_pairs = [pair for pair in self.all_pairs if not pair.endswith(('USDT', 'USD', 'USDC'))]
            for pair in other_pairs:
                score = self._fuzzy_match_score(symbol, pair)
                if score > best_score:
                    best_score = score
                    best_match = pair
                    if score >= 0.9:
                        match_type = "high_similarity"
                    elif score >= 0.7:
                        match_type = "medium_similarity"
                    else:
                        match_type = "low_similarity"
        
        if best_match and best_score >= 0.6:
            return (best_match, best_score, match_type)
        
        return None
    
    def is_valid_symbol(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞"""
        return symbol.upper() in self.all_pairs

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_crypto_db = None

def get_crypto_symbols_db() -> CryptoSymbolsDatabase:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã —Å–∏–º–≤–æ–ª–æ–≤"""
    global _crypto_db
    if _crypto_db is None:
        _crypto_db = CryptoSymbolsDatabase()
    return _crypto_db
