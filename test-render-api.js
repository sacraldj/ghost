// –¢–µ—Å—Ç Render API
const RENDER_API_KEY = 'rnd_XKaMTwq7JfnZs5j71yh8g0h6CyjM'

async function testRenderAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Render API...')
    
    const response = await fetch('https://api.render.com/v1/services?limit=5', {
      headers: {
        'Authorization': `Bearer ${RENDER_API_KEY}`,
        'Content-Type': 'application/json',
      },
    })
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    const data = await response.json()
    console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!')
    console.log('üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:')
    console.log(JSON.stringify(data, null, 2))
    
    if (Array.isArray(data) && data.length > 0) {
      console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${data.length}`)
      data.forEach((service, index) => {
        console.log(`${index + 1}. ${service.name || service.service?.name || 'Unknown'} - ${service.status || service.service?.status || 'Unknown'}`)
      })
    } else if (data && data.length !== undefined) {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${data.length}`)
    } else {
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', Object.keys(data))
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API:', error.message)
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞')
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º API:
testRenderAPI()

console.log(`
üîë –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ Render Dashboard
2. –ó–∞–º–µ–Ω–∏—Ç–µ 'rnd_your_api_key_here' –Ω–∞ –≤–∞—à –∫–ª—é—á
3. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-render-api.js
`)
