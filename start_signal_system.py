#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–±–æ—Ä–∞ —Å–≤–µ—á–µ–π
–û—Å–Ω–æ–≤–Ω–æ–π entry point –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
"""

import asyncio
import logging
import signal
import sys
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from core.signal_candle_tracker import get_signal_tracker
from core.bybit_websocket import get_bybit_client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/signal_system.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class SignalSystemService:
    """–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.tracker = get_signal_tracker()
        self.bybit_client = get_bybit_client()
        self.is_running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ Starting Signal Tracking System...")
        logger.info(f"üìÖ Start time: {datetime.now().isoformat()}")
        
        try:
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –≤ —Ñ–æ–Ω–µ
            tracking_task = asyncio.create_task(self.tracker.start_tracking())
            
            logger.info("‚úÖ Signal Tracking System started successfully")
            logger.info("üìä Monitoring for new signals and collecting candles...")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            while self.is_running:
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                await self._print_statistics()
                
        except asyncio.CancelledError:
            logger.info("üìã Received shutdown signal")
        except Exception as e:
            logger.error(f"‚ùå Error in main loop: {e}")
            raise
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë Stopping Signal Tracking System...")
        
        try:
            self.is_running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
            await self.tracker.stop()
            
            logger.info("‚úÖ Signal Tracking System stopped successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Error stopping system: {e}")
    
    async def _print_statistics(self):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞
            tracker_stats = self.tracker.get_statistics()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WebSocket –∫–ª–∏–µ–Ω—Ç–∞
            ws_stats = self.bybit_client.get_statistics()
            
            logger.info("üìä === SYSTEM STATISTICS ===")
            logger.info(f"üîç Tracked signals: {tracker_stats['signals_tracked']}")
            logger.info(f"üìà Active symbols: {tracker_stats['symbols_active']}")
            logger.info(f"üíæ Candles saved: {tracker_stats['candles_saved']}")
            logger.info(f"üîå WS connections: {ws_stats['active_connections']}")
            logger.info(f"üìä Total WS candles: {ws_stats['total_candles']}")
            logger.info(f"‚ö° Candles/hour: {tracker_stats.get('candles_per_hour', 0)}")
            logger.info(f"‚è±Ô∏è Uptime: {tracker_stats['uptime_seconds']}s")
            
            if tracker_stats['tracked_signals']:
                logger.info(f"üìã Signals: {', '.join(tracker_stats['tracked_signals'])}")
            
            if tracker_stats['active_symbols']:
                logger.info(f"üí∞ Symbols: {', '.join(tracker_stats['active_symbols'])}")
                
        except Exception as e:
            logger.error(f"‚ùå Error getting statistics: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
service = None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"üìã Received signal {signum}")
    if service:
        asyncio.create_task(service.stop())

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global service
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = SignalSystemService()
    
    try:
        await service.start()
    except KeyboardInterrupt:
        logger.info("üìã Received keyboard interrupt")
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs('logs', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚úÖ System shutdown complete")
    except Exception as e:
        logger.error(f"‚ùå System crashed: {e}")
        sys.exit(1)
