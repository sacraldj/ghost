#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GHOST —Å–∏—Å—Ç–µ–º—ã:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import logging
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_full_system():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã GHOST"""
    
    logger.info("üîç === GHOST SYSTEM FULL TEST ===")
    logger.info(f"üìÖ Test started at: {datetime.now()}")
    
    try:
        # 1. –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logger.info("1Ô∏è‚É£ Testing SignalOrchestratorWithSupabase...")
        
        from signals.signal_orchestrator_with_supabase import orchestrator_with_supabase
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        supabase_ok = await orchestrator_with_supabase.test_supabase_connection()
        logger.info(f"   Supabase connection: {'‚úÖ OK' if supabase_ok else '‚ùå FAILED'}")
        
        # 2. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("2Ô∏è‚É£ Testing signal processing...")
        
        test_signals = [
            ("üöÄ #BTC Long –∑–æ–Ω–∞ –≤—Ö–æ–¥–∞: 65000-66000, —Ü–µ–ª–∏: 67000, 68500, —Å—Ç–æ–ø: 64000", "whales_guide_main"),
            ("üìà ALPINE/USDT\n–õ–æ–Ω–≥ –æ—Ç 2.30-2.35\n–¶–µ–ª–∏: 2.45, 2.60, 2.85\n–°—Ç–æ–ø: 2.20", "cryptoattack24"),
            ("üî• ETH –ø–æ–∫—É–ø–∞–µ–º –≤ –∑–æ–Ω–µ 2400-2450\n–¢–ü1: 2500\n–¢–ü2: 2600\n–¢–ü3: 2800", "2trade_premium"),
        ]
        
        processed_count = 0
        for signal_text, trader_id in test_signals:
            result = await orchestrator_with_supabase.process_raw_signal(signal_text, trader_id, trader_id)
            if result:
                logger.info(f"   ‚úÖ Signal processed: {result.symbol} ({trader_id})")
                processed_count += 1
            else:
                logger.warning(f"   ‚ö†Ô∏è Signal failed: {trader_id}")
        
        logger.info(f"   Signals processed: {processed_count}/{len(test_signals)}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info("3Ô∏è‚É£ Getting system statistics...")
        
        stats = await orchestrator_with_supabase.get_stats()
        logger.info(f"   üìä Total signals processed: {stats['signals_processed']}")
        logger.info(f"   üíæ Supabase saves: {stats['supabase_saves']}")
        logger.info(f"   ‚ùå Errors: {stats['supabase_errors']}")
        logger.info(f"   üìà Success rate: {stats['success_rate']:.1f}%")
        logger.info(f"   ‚è±Ô∏è Uptime: {stats['uptime_human']}")
        
        # 4. –¢–µ—Å—Ç Telegram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        logger.info("4Ô∏è‚É£ Testing Telegram connection...")
        
        try:
            telegram_ok = await orchestrator_with_supabase.start_telegram_listening()
            logger.info(f"   Telegram listening: {'‚úÖ Started' if telegram_ok else '‚ùå FAILED'}")
            
            if telegram_ok:
                logger.info("   üì± Telegram channels configured:")
                channels = ["@whalesguide", "@slivaeminfo", "@cryptohubvip", "@cryptoattack24"]
                for channel in channels:
                    logger.info(f"   - {channel}")
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è Telegram test failed: {e}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase —Ç–∞–±–ª–∏—Ü
        logger.info("5Ô∏è‚É£ Checking Supabase tables...")
        
        try:
            if orchestrator_with_supabase.supabase:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º signals_raw
                raw_result = orchestrator_with_supabase.supabase.table('signals_raw').select('*').limit(5).execute()
                logger.info(f"   üìä signals_raw table: {len(raw_result.data)} recent records")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º signals_parsed  
                parsed_result = orchestrator_with_supabase.supabase.table('signals_parsed').select('*').limit(5).execute()
                logger.info(f"   üìä signals_parsed table: {len(parsed_result.data)} recent records")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º v_trades (–µ—Å–ª–∏ –µ—Å—Ç—å)
                try:
                    trades_result = orchestrator_with_supabase.supabase.table('v_trades').select('*').limit(5).execute()
                    logger.info(f"   üìä v_trades table: {len(trades_result.data)} recent records")
                except:
                    logger.info(f"   üìä v_trades table: Not accessible or empty")
                    
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è Database tables check failed: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        logger.info("6Ô∏è‚É£ === FINAL REPORT ===")
        logger.info(f"   üéØ System Status: {'‚úÖ OPERATIONAL' if supabase_ok and processed_count > 0 else '‚ùå ISSUES FOUND'}")
        logger.info(f"   üìä Components tested: 6/6")
        logger.info(f"   ‚è±Ô∏è Total test time: ~30 seconds")
        
        return supabase_ok and processed_count > 0
        
    except Exception as e:
        logger.error(f"‚ùå Test failed with error: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    result = asyncio.run(test_full_system())
    sys.exit(0 if result else 1)
