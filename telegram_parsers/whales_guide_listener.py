"""
GHOST Whales Guide Telegram Listener
–°–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ @Whalesguide –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from typing import Optional
import sqlite3
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telethon import TelegramClient, events
from telethon.tl.types import Channel, Chat
from signals.whales_crypto_parser import WhalesCryptoParser
from database.supabase_client import SupabaseClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('whales_guide_listener.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class WhalesGuideListener:
    """–°–ª—É—à–∞—Ç–µ–ª—å –∫–∞–Ω–∞–ª–∞ Whales Crypto Guide"""
    
    def __init__(self):
        # Telegram API credentials (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç @BotFather)
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')  # –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
        self.channel_username = 'Whalesguide'  # –ë–µ–∑ @
        self.channel_id = None
        
        # –ü–∞—Ä—Å–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_parser = WhalesCryptoParser()
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.supabase = SupabaseClient()
        self.local_db_path = 'whales_signals.db'
        
        # Telegram –∫–ª–∏–µ–Ω—Ç
        self.client = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_received': 0,
            'signals_parsed': 0,
            'signals_saved': 0,
            'errors': 0,
            'started_at': datetime.now()
        }
        
        self.init_local_database()
    
    def init_local_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            conn = sqlite3.connect(self.local_db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS whales_messages (
                    id INTEGER PRIMARY KEY,
                    message_id INTEGER UNIQUE,
                    channel_id INTEGER,
                    text TEXT,
                    date TIMESTAMP,
                    is_signal BOOLEAN DEFAULT FALSE,
                    parsed_signal TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS stats (
                    id INTEGER PRIMARY KEY,
                    date DATE UNIQUE,
                    messages_count INTEGER DEFAULT 0,
                    signals_count INTEGER DEFAULT 0,
                    errors_count INTEGER DEFAULT 0
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ Local database initialized")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize local database: {e}")
    
    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not self.api_id or not self.api_hash:
                logger.error("‚ùå Telegram API credentials not found in environment variables")
                logger.info("Please set TELEGRAM_API_ID and TELEGRAM_API_HASH")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.client = TelegramClient('whales_session', self.api_id, self.api_hash)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await self.client.start(phone=self.phone)
            logger.info("‚úÖ Connected to Telegram")
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª
            channel = await self.find_channel()
            if not channel:
                logger.error("‚ùå Channel @Whalesguide not found")
                return
            
            self.channel_id = channel.id
            logger.info(f"‚úÖ Found channel: {channel.title} (ID: {channel.id})")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.client.on(events.NewMessage(chats=channel))
            async def handle_new_message(event):
                await self.process_message(event)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            logger.info("üöÄ Started listening for new messages...")
            self.print_stats()
            
            await self.client.run_until_disconnected()
            
        except Exception as e:
            logger.error(f"‚ùå Error starting listener: {e}")
            self.stats['errors'] += 1
    
    async def find_channel(self):
        """–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ø–æ username"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            channel_variants = [
                'Whalesguide',
                '@Whalesguide', 
                'whalesguide',
                '@whalesguide'
            ]
            
            for variant in channel_variants:
                try:
                    entity = await self.client.get_entity(variant)
                    if isinstance(entity, Channel):
                        return entity
                except Exception as e:
                    logger.debug(f"Failed to find channel with variant '{variant}': {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏
            async for dialog in self.client.iter_dialogs():
                if dialog.is_channel:
                    if 'whales' in dialog.name.lower() and 'guide' in dialog.name.lower():
                        logger.info(f"Found potential channel: {dialog.name}")
                        return dialog.entity
            
            return None
            
        except Exception as e:
            logger.error(f"Error finding channel: {e}")
            return None
    
    async def process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = event.message
            self.stats['messages_received'] += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info(f"üì® New message: ID={message.id}, Date={message.date}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
            await self.save_message_to_cache(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–º
            if message.text and self.signal_parser.can_parse(message.text):
                logger.info("üéØ Detected potential signal!")
                await self.process_signal(message)
            else:
                logger.debug("üìù Regular message (not a signal)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if self.stats['messages_received'] % 10 == 0:
                self.print_stats()
                
        except Exception as e:
            logger.error(f"‚ùå Error processing message: {e}")
            self.stats['errors'] += 1
    
    async def process_signal(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
            signal = self.signal_parser.parse_signal(
                message.text, 
                f"whales_guide_msg_{message.id}"
            )
            
            if not signal:
                logger.warning("‚ö†Ô∏è Failed to parse signal")
                return
            
            self.stats['signals_parsed'] += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Telegram
            signal.telegram_message_id = message.id
            signal.telegram_channel_id = self.channel_id
            signal.telegram_date = message.date
            signal.source_url = f"https://t.me/{self.channel_username}/{message.id}"
            
            logger.info(f"‚úÖ Parsed signal: {signal.symbol} {signal.direction.value} (confidence: {signal.confidence:.1f}%)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.save_signal(signal, message)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–∏–≥–Ω–∞–ª–∞
            self.log_signal_details(signal)
            
        except Exception as e:
            logger.error(f"‚ùå Error processing signal: {e}")
            self.stats['errors'] += 1
    
    async def save_message_to_cache(self, message):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à"""
        try:
            conn = sqlite3.connect(self.local_db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR IGNORE INTO whales_messages 
                (message_id, channel_id, text, date) 
                VALUES (?, ?, ?, ?)
            ''', (
                message.id,
                self.channel_id,
                message.text or '',
                message.date
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"Error saving message to cache: {e}")
    
    async def save_signal(self, signal, message):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
            signal_data = {
                'trader_id': 'whales_crypto_guide',
                'symbol': signal.symbol,
                'direction': signal.direction.value,
                'entry_single': float(signal.entry_single) if signal.entry_single else None,
                'entry_min': float(min(signal.entry_zone)) if signal.entry_zone else None,
                'entry_max': float(max(signal.entry_zone)) if signal.entry_zone else None,
                'tp1': float(signal.tp1) if signal.tp1 else None,
                'tp2': float(signal.tp2) if signal.tp2 else None,
                'tp3': float(signal.tp3) if signal.tp3 else None,
                'tp4': float(signal.tp4) if signal.tp4 else None,
                'stop_loss': float(signal.stop_loss) if signal.stop_loss else None,
                'leverage': signal.leverage,
                'confidence': float(signal.confidence),
                'original_text': signal.raw_text,
                'source': 'whales_crypto_guide',
                'source_url': f"https://t.me/{self.channel_username}/{message.id}",
                'timestamp': signal.timestamp.isoformat(),
                'telegram_message_id': message.id,
                'telegram_channel_id': self.channel_id,
                'analysis_notes': signal.reason,
                'targets': json.dumps(signal.targets) if signal.targets else None,
                'entry_zone': json.dumps(signal.entry_zone) if signal.entry_zone else None,
                'signal_quality': 'high' if signal.confidence > 80 else 'medium' if signal.confidence > 60 else 'low'
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
            result = self.supabase.insert_trade(signal_data)
            
            if result:
                self.stats['signals_saved'] += 1
                logger.info(f"üíæ Signal saved to database: {signal.symbol}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                conn = sqlite3.connect(self.local_db_path)
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE whales_messages 
                    SET is_signal = TRUE, parsed_signal = ?
                    WHERE message_id = ?
                ''', (json.dumps(signal_data), message.id))
                
                conn.commit()
                conn.close()
            else:
                logger.error("‚ùå Failed to save signal to database")
                
        except Exception as e:
            logger.error(f"‚ùå Error saving signal: {e}")
            self.stats['errors'] += 1
    
    def log_signal_details(self, signal):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        logger.info("=" * 50)
        logger.info(f"üéØ SIGNAL DETAILS:")
        logger.info(f"Symbol: {signal.symbol}")
        logger.info(f"Direction: {signal.direction.value}")
        logger.info(f"Entry Zone: {signal.entry_zone}")
        logger.info(f"Targets: {signal.targets}")
        logger.info(f"Stop Loss: {signal.stop_loss}")
        logger.info(f"Leverage: {signal.leverage}")
        logger.info(f"Confidence: {signal.confidence:.1f}%")
        if signal.reason:
            logger.info(f"Reason: {signal.reason}")
        logger.info("=" * 50)
    
    def print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        uptime = datetime.now() - self.stats['started_at']
        
        logger.info("üìä LISTENER STATISTICS:")
        logger.info(f"   Uptime: {uptime}")
        logger.info(f"   Messages received: {self.stats['messages_received']}")
        logger.info(f"   Signals parsed: {self.stats['signals_parsed']}")
        logger.info(f"   Signals saved: {self.stats['signals_saved']}")
        logger.info(f"   Errors: {self.stats['errors']}")
        
        if self.stats['messages_received'] > 0:
            signal_rate = (self.stats['signals_parsed'] / self.stats['messages_received']) * 100
            logger.info(f"   Signal detection rate: {signal_rate:.1f}%")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è"""
        if self.client:
            await self.client.disconnect()
        logger.info("üõë Listener stopped")
        self.print_stats()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    listener = WhalesGuideListener()
    
    try:
        await listener.start_listening()
    except KeyboardInterrupt:
        logger.info("üõë Stopping listener...")
        await listener.stop()
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")

if __name__ == "__main__":
    asyncio.run(main())
