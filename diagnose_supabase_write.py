#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Supabase
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def diagnose_supabase_write():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Supabase"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ü–ò–°–ò –°–ò–ì–ù–ê–õ–û–í –í SUPABASE")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        sys.path.append('.')
        from core.live_signal_processor import LiveSignalProcessor
        from core.telegram_listener import TelegramListener
        from signals.unified_signal_system import UnifiedSignalParser, SignalSource
        from core.channel_manager import ChannelManager
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        supabase_url = os.getenv("NEXT_PUBLIC_SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        
        if not supabase_url or not supabase_key:
            print("‚ùå Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print(f"SUPABASE_URL: {'‚úÖ' if supabase_url else '‚ùå'}")
            print(f"SUPABASE_KEY: {'‚úÖ' if supabase_key else '‚ùå'}")
            return False
        
        print("‚úÖ Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = LiveSignalProcessor()
        print("‚úÖ LiveSignalProcessor —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = processor.channel_manager.get_active_sources()
        whales_source = None
        for source in sources:
            if source.source_id == "whales_guide_main":
                whales_source = source
                break
        
        if not whales_source:
            print("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ whales_guide_main –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: {whales_source.name}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ RAW —Å–∏–≥–Ω–∞–ª–∞
        print("\nüìù –¢–ï–°–¢ –ó–ê–ü–ò–°–ò RAW –°–ò–ì–ù–ê–õ–ê...")
        test_raw_data = {
            "chat_id": "-1001288385100",
            "message_id": "test_raw_1",
            "text": "üöÄ #BTC LONG Entry: $45000-$45500 Targets: $46000, $47000 SL: $44000 Leverage: 10X",
            "timestamp": datetime.now(),
            "has_image": False,
            "channel_name": "Whales Crypto Guide",
            "trader_id": "whales_guide_main"
        }
        
        await processor._save_raw_signal(test_raw_data["text"], whales_source, test_raw_data)
        print("‚úÖ RAW —Å–∏–≥–Ω–∞–ª –∑–∞–ø–∏—Å–∞–Ω –≤ signals_raw")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏ –∑–∞–ø–∏—Å—å PARSED —Å–∏–≥–Ω–∞–ª–∞
        print("\nüß† –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –ò –ó–ê–ü–ò–°–ò PARSED –°–ò–ì–ù–ê–õ–ê...")
        parsed_signal = await processor.unified_parser.parse_signal(
            test_raw_data["text"],
            SignalSource.TELEGRAM_WHALESGUIDE,
            whales_source.parser_type
        )
        
        if parsed_signal:
            await processor._save_parsed_signal(parsed_signal, whales_source)
            print("‚úÖ PARSED —Å–∏–≥–Ω–∞–ª –∑–∞–ø–∏—Å–∞–Ω –≤ signals_parsed")
            print(f"   Symbol: {parsed_signal.symbol}")
            print(f"   Side: {parsed_signal.side}")
            print(f"   Entry: {parsed_signal.entry_zone}")
            print(f"   Targets: {parsed_signal.targets}")
        else:
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        print("\nüì± –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö TELEGRAM...")
        api_id = os.getenv('TELEGRAM_API_ID')
        api_hash = os.getenv('TELEGRAM_API_HASH')
        phone = os.getenv('TELEGRAM_PHONE')
        
        if not all([api_id, api_hash, phone]):
            print("‚ùå Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print(f"API_ID: {'‚úÖ' if api_id else '‚ùå'}")
            print(f"API_HASH: {'‚úÖ' if api_hash else '‚ùå'}")
            print(f"PHONE: {'‚úÖ' if phone else '‚ùå'}")
            return False
        
        listener = TelegramListener(api_id, api_hash, phone)
        if not await listener.initialize():
            print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if listener.client and await listener.client.is_user_authorized():
            print("‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
        else:
            print("‚ö†Ô∏è Telegram —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if listener.client:
            await listener.client.disconnect()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    success = await diagnose_supabase_write()
    
    if success:
        print("\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –£–°–ü–ï–®–ù–ê!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –≤ Supabase")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—ã signals_raw –∏ signals_parsed –≤ Supabase")
        print("üîÑ –ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –Ω–∞ Render —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –° –ó–ê–ü–ò–°–¨–Æ")
        print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç")

if __name__ == "__main__":
    asyncio.run(main())
