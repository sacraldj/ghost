#!/usr/bin/env python3
"""
–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –ü–ê–†–°–ò–ù–ì–û–ú GHOSTSIGNALTEST
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è - –±–µ–∑ –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤
"""

import asyncio
import sys
import os
import logging
import signal
import threading
import time
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ü–ï–†–í–´–ú –î–ï–õ–û–ú
from dotenv import load_dotenv
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/integrated_ghost_system.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class HealthCheckHandler(BaseHTTPRequestHandler):
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check"""
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'GHOST System Running with GhostSignalTest parsing')
    
    def log_message(self, format, *args):
        pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞

def run_health_server():
    """–ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        port = int(os.getenv('PORT', '8080'))
        server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
        logger.info(f"üåê Health server started on port {port}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå Health server error: {e}")

async def run_integrated_system():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å ghostsignaltest –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô GHOST –°–ò–°–¢–ï–ú–´")
    logger.info("üéØ –í–∫–ª—é—á–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ @ghostsignaltest")
    logger.info("üîÑ –†–µ–∂–∏–º: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        from signals.signal_orchestrator_with_supabase import SignalOrchestratorWithSupabase
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        logger.info("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SignalOrchestratorWithSupabase...")
        orchestrator = SignalOrchestratorWithSupabase()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ GhostTestParser –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω
        if 'ghostsignaltest' in orchestrator.parsers:
            parser_type = type(orchestrator.parsers['ghostsignaltest']).__name__
            logger.info(f"‚úÖ GhostTestParser –Ω–∞–π–¥–µ–Ω: {parser_type}")
        else:
            logger.error("‚ùå GhostTestParser –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if orchestrator.supabase:
            logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GhostTestParser...")
        test_signal = """**Shorting ****#APT**** here**

Short (5x-10x)

Entry: $4.5890 - $4.6500

Targets: $4.48, $4.40, $4.30, $4.20, $4.00

Stop-loss: $4.75"""
        
        test_result = await orchestrator.process_raw_signal(test_signal, "ghostsignaltest")
        
        if test_result:
            logger.info(f"‚úÖ –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —É—Å–ø–µ—à–µ–Ω: {test_result.symbol} {test_result.direction.value}")
            logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –Ω–µ –ø—Ä–æ—à–µ–ª, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
        logger.info("üéß –ó–∞–ø—É—Å–∫ Telegram –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...")
        logger.info("üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–Ω–∞–ª—ã –≤–∫–ª—é—á–∞—è @ghostsignaltest")
        logger.info("üíæ –°–∏–≥–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ v_trades —Ç–∞–±–ª–∏—Ü—É")
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã –≤ TelegramListener
        await setup_automatic_codes()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await orchestrator.start_telegram_listening()
        
    except KeyboardInterrupt:
        logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: {e}")
        import traceback
        traceback.print_exc()

async def setup_automatic_codes():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–¥–æ–≤ –¥–ª—è Telegram"""
    
    logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–¥–æ–≤...")
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é input –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    import builtins
    original_input = builtins.input
    
    def auto_input(prompt):
        prompt_lower = prompt.lower()
        
        if "code" in prompt_lower:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã
            auto_codes = ['12345', '54321', '11111', '22222', '00000']
            for code in auto_codes:
                logger.info(f"üîë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–≤–æ–¥–∏–º –∫–æ–¥: {code}")
                return code
            return '12345'  # Fallback
            
        elif "phone" in prompt_lower:
            phone = os.getenv('TELEGRAM_PHONE', '+375259556962')
            logger.info(f"üìû –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
            return phone
            
        elif "password" in prompt_lower:
            password = os.getenv('TELEGRAM_PASSWORD', '')
            if password:
                logger.info("üîí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–≤–æ–¥–∏–º 2FA –ø–∞—Ä–æ–ª—å")
                return password
            
        logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {prompt}")
        return ""
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–º–µ–Ω—è–µ–º input
    builtins.input = auto_input
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    def restore_input():
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç
        builtins.input = original_input
        logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π input")
    
    threading.Thread(target=restore_input, daemon=True).start()
    
    logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    logger.info("=" * 60)
    logger.info("üöÄ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø GHOST –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø")
    logger.info("üéØ –ü–∞—Ä—Å–∏–Ω–≥: t.me/ghostsignaltest ‚Üí v_trades")
    logger.info("ü§ñ –†–µ–∂–∏–º: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π")
    logger.info("=" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º health server –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        health_thread = threading.Thread(target=run_health_server, daemon=True)
        health_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        asyncio.run(run_integrated_system())
        
    except KeyboardInterrupt:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
