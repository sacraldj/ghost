#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Ghost —Å–∏—Å—Ç–µ–º—ã
"""

import os
import asyncio
import logging
import re
from dotenv import load_dotenv, set_key

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class TelegramAutoSetup:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram"""
    
    def __init__(self):
        self.api_id = None
        self.api_hash = None
        self.phone = None
        self.session_name = 'ghost_session'
        
    async def setup(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM")
        print("=" * 50)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
        if not await self.get_api_credentials():
            return False
            
        # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not self.get_phone_number():
            return False
            
        # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not await self.perform_authorization():
            return False
            
        # 4. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        await self.get_channels_list()
        
        print("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print("üí° –û–±–Ω–æ–≤–∏—Ç–µ channel_id –≤ config/sources.json")
        
        return True
    
    async def get_api_credentials(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π"""
        print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π...")
        
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        
        if self.api_id and self.api_hash:
            print(f"‚úÖ API ID: {self.api_id}")
            print(f"‚úÖ API Hash: {self.api_hash[:10]}...")
            return True
            
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("\nüìù –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org")
        print("2. –í–æ–π–¥–∏—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ 'API development tools'")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ api_id –∏ api_hash")
        
        while True:
            api_id = input("\nüì± –í–≤–µ–¥–∏—Ç–µ TELEGRAM_API_ID: ").strip()
            api_hash = input("üîê –í–≤–µ–¥–∏—Ç–µ TELEGRAM_API_HASH: ").strip()
            
            if api_id and api_hash:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env
                env_file = '.env'
                set_key(env_file, 'TELEGRAM_API_ID', api_id)
                set_key(env_file, 'TELEGRAM_API_HASH', api_hash)
                
                self.api_id = api_id
                self.api_hash = api_hash
                
                print(f"‚úÖ API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {env_file}")
                return True
            else:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –æ–±–∞ –∫–ª—é—á–∞!")
    
    def get_phone_number(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        print("\nüìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
        
        self.phone = os.getenv('TELEGRAM_PHONE')
        
        if self.phone:
            print(f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {self.phone}")
            return True
            
        print("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        while True:
            phone = input("\nüì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +1234567890): ").strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
            if re.match(r'^\+\d{10,15}$', phone):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env
                env_file = '.env'
                set_key(env_file, 'TELEGRAM_PHONE', phone)
                
                self.phone = phone
                print(f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {phone}")
                return True
            else:
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +1234567890")
    
    async def perform_authorization(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram...")
        
        try:
            from telethon import TelegramClient
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = TelegramClient(self.session_name, self.api_id, self.api_hash)
            
            print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await client.start()
            
            if not await client.is_user_authorized():
                print("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                await client.send_code_request(self.phone)
                
                print("‚è≥ –ñ–¥–∏—Ç–µ SMS —Å –∫–æ–¥–æ–º...")
                print("üí° –ö–æ–¥ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –≤ Telegram –æ—Ç @777000")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
                code = await self.get_auth_code(client)
                
                if not code:
                    # Fallback –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
                    code = input("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS/Telegram: ").strip()
                
                if code:
                    try:
                        await client.sign_in(self.phone, code)
                        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        
                    except Exception as e:
                        if "Two-step verification" in str(e) or "password" in str(e).lower():
                            password = input("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ").strip()
                            if password:
                                await client.sign_in(password=password)
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                                set_key('.env', 'TELEGRAM_PASSWORD', password)
                                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞!")
                        else:
                            raise e
            else:
                print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if await client.is_user_authorized():
                me = await client.get_me()
                print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
                await client.disconnect()
                return True
            else:
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                await client.disconnect()
                return False
                
        except ImportError:
            print("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_auth_code(self, client):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            print("üîç –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞...")
            
            # –ñ–¥–µ–º –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
            for attempt in range(60):
                try:
                    async for message in client.iter_messages(777000, limit=1):
                        if message.message:
                            # –ò—â–µ–º –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            code_patterns = [
                                r'Login code: (\d{5,6})',
                                r'code: (\d{5,6})',
                                r'(\d{5,6})',
                                r'–∫–æ–¥: (\d{5,6})',
                                r'–ö–æ–¥: (\d{5,6})'
                            ]
                            
                            for pattern in code_patterns:
                                match = re.search(pattern, message.message)
                                if match:
                                    code = match.group(1)
                                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {code}")
                                    return code
                except:
                    pass
                
                await asyncio.sleep(1)
                
                if attempt % 10 == 0:
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞... ({attempt}/60 —Å–µ–∫)")
            
            print("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            return None
    
    async def get_channels_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        print("\nüì∫ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        
        try:
            from telethon import TelegramClient
            
            client = TelegramClient(self.session_name, self.api_id, self.api_hash)
            await client.start()
            
            if await client.is_user_authorized():
                print("\nüìã –í–ê–®–ò –ö–ê–ù–ê–õ–´:")
                print("-" * 40)
                
                channel_count = 0
                async for dialog in client.iter_dialogs():
                    if dialog.is_channel:
                        channel_count += 1
                        print(f"üì∫ {dialog.name}")
                        print(f"   ID: {dialog.id}")
                        if hasattr(dialog.entity, 'username') and dialog.entity.username:
                            print(f"   @{dialog.entity.username}")
                        print()
                
                if channel_count == 0:
                    print("‚ö†Ô∏è  –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    print("üí° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏")
                else:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {channel_count}")
                    print("\nüí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ ID –∏ –æ–±–Ω–æ–≤–∏—Ç–µ config/sources.json")
            
            await client.disconnect()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        setup = TelegramAutoSetup()
        success = await setup.setup()
        
        if success:
            print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
            print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –û–±–Ω–æ–≤–∏—Ç–µ channel_id –≤ config/sources.json")
            print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: python scripts/start_live_system.py")
        else:
            print("\n‚ùå –ù–ê–°–¢–†–û–ô–ö–ê –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            
    except KeyboardInterrupt:
        print("\nüëã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
