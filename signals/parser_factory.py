"""
GHOST Parser Factory
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import logging
from typing import Dict, Type, Optional, Any, List
from abc import ABC, abstractmethod

from signals.whales_crypto_parser import WhalesCryptoParser
from signals.trader_detector import TraderDetector, TraderStyle

logger = logging.getLogger(__name__)

class SignalParserInterface(ABC):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    @abstractmethod
    def can_parse(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–∞—Ä—Å–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç"""
        pass
    
    @abstractmethod
    def parse_signal(self, text: str, trader_id: str) -> Optional[Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        pass

class UniversalWhalesParser(SignalParserInterface):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –≤ @Whalesguide"""
    
    def __init__(self):
        self.detector = TraderDetector()
        self.whales_parser = WhalesCryptoParser()
        logger.info("Universal Whales Parser initialized")
    
    def can_parse(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–µ—Ä–µ–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏ –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä
        style, confidence, _ = self.detector.detect_trader(text)
        
        if style != TraderStyle.UNKNOWN and confidence > 0.5:
            return True
        
        # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
        return self.whales_parser.can_parse(text)
    
    def parse_signal(self, text: str, trader_id: str = None) -> Optional[Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        style, confidence, details = self.detector.detect_trader(text)
        
        if not trader_id:
            trader_id = self.detector.get_trader_id(style, "whalesguide")
        
        # –ü–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        signal = self.whales_parser.parse_signal(text, trader_id)
        
        if signal:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç–µ–∫—Ü–∏–∏
            signal.detected_trader_style = style.value
            signal.detection_confidence = confidence
            signal.detection_details = details
            
            logger.info(f"Parsed signal from {style.value} (confidence: {confidence:.2f})")
        
        return signal

class Trade2Parser(SignalParserInterface):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ 2Trade"""
    
    def __init__(self):
        self.keywords = ["üéØ", "ENTRY", "TARGET", "STOP", "LONG", "SHORT"]
        logger.info("2Trade Parser initialized")
    
    def can_parse(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 2Trade"""
        text_upper = text.upper()
        keyword_count = sum(1 for keyword in self.keywords if keyword in text_upper)
        return keyword_count >= 3
    
    def parse_signal(self, text: str, trader_id: str) -> Optional[Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ 2Trade"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info(f"2Trade parsing for {trader_id} - not implemented yet")
        return None

class VIPSignalsParser(SignalParserInterface):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è VIP –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.vip_indicators = ["üî•", "üíé", "VIP", "PREMIUM", "‚≠ê"]
        logger.info("VIP Signals Parser initialized")
    
    def can_parse(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ VIP —Ñ–æ—Ä–º–∞—Ç–∞"""
        return any(indicator in text for indicator in self.vip_indicators)
    
    def parse_signal(self, text: str, trader_id: str) -> Optional[Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ VIP —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info(f"VIP parsing for {trader_id} - not implemented yet")
        return None

class DiscordParser(SignalParserInterface):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è Discord –∫–∞–Ω–∞–ª–æ–≤"""
    
    def can_parse(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Discord —Ñ–æ—Ä–º–∞—Ç–∞"""
        # Discord —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç embed-—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        discord_indicators = ["**", "__", "```", "> "]
        return any(indicator in text for indicator in discord_indicators)
    
    def parse_signal(self, text: str, trader_id: str) -> Optional[Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ Discord —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info(f"Discord parsing for {trader_id} - not implemented yet")
        return None

class ParserFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.parsers: Dict[str, Type[SignalParserInterface]] = {}
        self.instances: Dict[str, SignalParserInterface] = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
        self._register_default_parsers()
        
        logger.info("Parser Factory initialized")
    
    def _register_default_parsers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤"""
        self.register_parser("whales_universal", UniversalWhalesParser)
        self.register_parser("whales_crypto_parser", UniversalWhalesParser)  # –ê–ª–∏–∞—Å
        self.register_parser("2trade_parser", Trade2Parser)
        self.register_parser("vip_signals_parser", VIPSignalsParser)
        self.register_parser("discord_parser", DiscordParser)
    
    def register_parser(self, parser_type: str, parser_class: Type[SignalParserInterface]):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.parsers[parser_type] = parser_class
        logger.info(f"Registered parser type: {parser_type}")
    
    def get_parser(self, parser_type: str) -> Optional[SignalParserInterface]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ —Ç–∏–ø—É"""
        if parser_type not in self.parsers:
            logger.error(f"Unknown parser type: {parser_type}")
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º singleton pattern –¥–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤
        if parser_type not in self.instances:
            try:
                parser_class = self.parsers[parser_type]
                self.instances[parser_type] = parser_class()
                logger.debug(f"Created parser instance: {parser_type}")
            except Exception as e:
                logger.error(f"Error creating parser {parser_type}: {e}")
                return None
        
        return self.instances[parser_type]
    
    def auto_select_parser(self, text: str, 
                          preferred_parsers: List[str] = None) -> Optional[SignalParserInterface]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ø–µ—Ä–≤—ã–º–∏
        if preferred_parsers:
            for parser_type in preferred_parsers:
                parser = self.get_parser(parser_type)
                if parser and parser.can_parse(text):
                    logger.debug(f"Selected preferred parser: {parser_type}")
                    return parser
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
        for parser_type, parser_class in self.parsers.items():
            parser = self.get_parser(parser_type)
            if parser and parser.can_parse(text):
                logger.debug(f"Auto-selected parser: {parser_type}")
                return parser
        
        logger.warning("No suitable parser found for the text")
        return None
    
    def parse_with_fallback(self, text: str, 
                           preferred_parsers: List[str] = None,
                           trader_id: str = None) -> Optional[Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –∏ fallback"""
        
        # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
        parser = self.auto_select_parser(text, preferred_parsers)
        
        if parser:
            try:
                result = parser.parse_signal(text, trader_id)
                if result:
                    return result
            except Exception as e:
                logger.error(f"Error parsing with selected parser: {e}")
        
        # Fallback –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        fallback_parser = self.get_parser("whales_universal")
        if fallback_parser and fallback_parser.can_parse(text):
            try:
                logger.info("Using fallback universal parser")
                return fallback_parser.parse_signal(text, trader_id)
            except Exception as e:
                logger.error(f"Error with fallback parser: {e}")
        
        return None
    
    def get_available_parsers(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤"""
        return list(self.parsers.keys())
    
    def get_parser_info(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–∞—Ö"""
        info = {}
        
        for parser_type, parser_class in self.parsers.items():
            info[parser_type] = {
                "class_name": parser_class.__name__,
                "module": parser_class.__module__,
                "description": parser_class.__doc__ or "No description",
                "is_instantiated": parser_type in self.instances
            }
        
        return info

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞–±—Ä–∏–∫–∏
parser_factory = ParserFactory()

def get_parser_factory() -> ParserFactory:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ñ–∞–±—Ä–∏–∫–∏"""
    return parser_factory

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–±—Ä–∏–∫–∏
def test_parser_factory():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PARSER FACTORY")
    print("=" * 60)
    
    factory = get_parser_factory()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
    print("üìã –î–û–°–¢–£–ü–ù–´–ï –ü–ê–†–°–ï–†–´:")
    for parser_type in factory.get_available_parsers():
        print(f"   ‚Ä¢ {parser_type}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    test_signals = [
        {
            "name": "Whales Standard",
            "text": """Longing #BTCUSDT Here

Long (5x - 10x)

Entry: $45000 - $44500

Targets: $46000, $47000, $48000

Stoploss: $43000""",
            "expected_parser": "whales_universal"
        },
        {
            "name": "Spot Trader", 
            "text": """Buying #ETH Here in spot

You can long in 4x leverage, too.

Entry: 2800-2850$

Targets: 2900$, 3000$

Stoploss: 2750$""",
            "expected_parser": "whales_universal"
        },
        {
            "name": "VIP Signal",
            "text": """üî• VIP PREMIUM SIGNAL üíé

LONG #SOLUSDT
Entry: 180-185
Targets: 200, 220, 250
SL: 170""",
            "expected_parser": "vip_signals_parser"
        },
        {
            "name": "Discord Format",
            "text": """**LONG SIGNAL**
```
Symbol: ADAUSDT
Entry: 0.45
TP: 0.50
SL: 0.40
```""",
            "expected_parser": "discord_parser"
        }
    ]
    
    print(f"\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–í–´–ë–û–†–ê:")
    
    for i, signal in enumerate(test_signals, 1):
        print(f"\n{i}Ô∏è‚É£ {signal['name']}:")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–∞—Ä—Å–µ—Ä–∞
        parser = factory.auto_select_parser(signal['text'])
        
        if parser:
            parser_type = None
            for pt, pc in factory.parsers.items():
                if isinstance(parser, pc):
                    parser_type = pt
                    break
            
            print(f"   Selected: {parser_type}")
            print(f"   Expected: {signal['expected_parser']}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å
            result = factory.parse_with_fallback(signal['text'])
            if result:
                print(f"   Parsing: ‚úÖ Success")
                if hasattr(result, 'symbol'):
                    print(f"   Symbol: {result.symbol}")
            else:
                print(f"   Parsing: ‚ùå Failed")
        else:
            print(f"   Selected: None")
            print(f"   Status: ‚ùå No suitable parser")
    
    print(f"\nüéâ FACTORY –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")

if __name__ == "__main__":
    test_parser_factory()
