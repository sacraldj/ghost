"""
GHOST Signal Orchestrator —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Supabase
–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—Å–µ—Ä–∞–º–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
–ö–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª —Ç—Ä–µ–π–¥–µ—Ä–∞ –∏–º–µ–µ—Ç —Å–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
–í–°–ï –î–ê–ù–ù–´–ï –°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø –í SUPABASE
"""

import asyncio
import logging
import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import asdict
from dotenv import load_dotenv
from supabase import create_client, Client

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '.env'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
from signals.parsers.whales_crypto_parser import WhalesCryptoParser
from signals.parsers.parser_2trade import TwoTradeParser
from signals.parsers.crypto_hub_parser import CryptoHubParser
from signals.parsers.ghost_test_parser import GhostTestParser
from signals.parsers.signal_parser_base import ParsedSignal

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CryptoAttack24 –ø–∞—Ä—Å–µ—Ä
try:
    from signals.parsers.cryptoattack24_parser import CryptoAttack24Parser
    CRYPTOATTACK24_AVAILABLE = True
except ImportError:
    CRYPTOATTACK24_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥
try:
    from core.virtual_position_manager import virtual_position_manager
    VIRTUAL_TRADING_AVAILABLE = True
except ImportError:
    VIRTUAL_TRADING_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/signal_orchestrator_supabase.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SignalOrchestratorWithSupabase:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Supabase –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –ü–ï–†–í–´–ú –î–ï–õ–û–ú
        self.supabase = self._init_supabase()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Listener –¥–ª—è –†–ï–ê–õ–¨–ù–û–ì–û –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        self.telegram_listener = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞
        self.parsers = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤
            'whales_guide_main': WhalesCryptoParser(),
            'whales_crypto_guide': WhalesCryptoParser(),  # –ê–ª–∏–∞—Å
            '2trade_premium': TwoTradeParser(),
            'slivaeminfo': TwoTradeParser(),  # –ê–ª–∏–∞—Å –¥–ª—è 2Trade
            'crypto_hub_vip': CryptoHubParser(),
            'cryptohubvip': CryptoHubParser(),  # –ê–ª–∏–∞—Å
            # –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
            'ghostsignaltest': GhostTestParser(),
            'ghost_test': GhostTestParser(),  # –ê–ª–∏–∞—Å
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º CryptoAttack24 –ø–∞—Ä—Å–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if CRYPTOATTACK24_AVAILABLE:
            # –°–æ–∑–¥–∞–µ–º wrapper –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SignalParserBase
            class CryptoAttack24Wrapper:
                def __init__(self):
                    self.parser = CryptoAttack24Parser()
                    self.source_name = "cryptoattack24"
                
                def can_parse(self, text: str) -> bool:
                    return self.parser._is_noise(text) == False and len(text.strip()) > 20
                
                def parse_signal(self, text: str, trader_id: str) -> Optional[ParsedSignal]:
                    result = self.parser.parse_message(text)
                    if result and result.confidence >= 0.6:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ParsedSignal —Ñ–æ—Ä–º–∞—Ç
                        return self._convert_to_parsed_signal(result, trader_id, text)
                    return None
                
                def _convert_to_parsed_signal(self, ca24_signal, trader_id: str, raw_text: str) -> ParsedSignal:
                    from signals.parsers.signal_parser_base import SignalDirection
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è
                    direction = SignalDirection.BUY if ca24_signal.action in ["pump", "growth"] else SignalDirection.SELL
                    
                    signal = ParsedSignal(
                        signal_id=f"{trader_id}_{int(datetime.now().timestamp())}",
                        source="cryptoattack24",
                        trader_id=trader_id,
                        raw_text=raw_text,
                        timestamp=ca24_signal.timestamp or datetime.now(),
                        symbol=ca24_signal.symbol,
                        direction=direction
                    )
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    signal.confidence = ca24_signal.confidence
                    signal.reason = ca24_signal.context
                    signal.is_valid = True
                    
                    return signal
            
            self.parsers['cryptoattack24'] = CryptoAttack24Wrapper()
            logger.info("‚úÖ CryptoAttack24 parser integrated successfully")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'signals_processed': 0,
            'signals_saved': 0,
            'signals_failed': 0,
            'parsers_used': {name: 0 for name in self.parsers.keys()},
            'started_at': datetime.now(),
            'supabase_saves': 0,
            'supabase_errors': 0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
        if VIRTUAL_TRADING_AVAILABLE:
            virtual_position_manager.set_supabase(self.supabase)
            logger.info("‚úÖ Virtual trading integration enabled")
        else:
            logger.warning("‚ö†Ô∏è Virtual trading not available - install dependencies")
        
        logger.info(f"‚úÖ SignalOrchestrator with Supabase initialized with {len(self.parsers)} parsers")
    
    async def start_telegram_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            from core.telegram_listener import TelegramListener
            
            api_id = os.getenv('TELEGRAM_API_ID')
            api_hash = os.getenv('TELEGRAM_API_HASH')
            phone = os.getenv('TELEGRAM_PHONE')
            
            if not api_id or not api_hash:
                logger.error("‚ùå TELEGRAM_API_ID and TELEGRAM_API_HASH required")
                return False
                
            self.telegram_listener = TelegramListener(api_id, api_hash, phone)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–æ–≤—ã–º–∏ ID (–ù–ï username!)
            channels = [
                ("-1001288385100", "whales_guide_main", "@whalesguide"),
                ("-1001915101334", "2trade_premium", "@slivaeminfo"), 
                ("-1001263635145", "cryptoattack24", "@cryptoattack24"),
                ("-1002974041293", "ghostsignaltest", "@ghostsignaltest")  # –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è v_trades
            ]
            
            for channel_id, trader_id, username in channels:
                from core.telegram_listener import ChannelConfig
                config = ChannelConfig(
                    channel_id=channel_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID!
                    channel_name=trader_id,
                    trader_id=trader_id,
                    is_active=True
                )
                self.telegram_listener.add_channel(config)
                logger.info(f"Added channel: {trader_id} (Username: {username}, ID: {channel_id})")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.telegram_listener.set_message_handler(self._handle_telegram_message)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            await self.telegram_listener.initialize()
            asyncio.create_task(self.telegram_listener.start_listening())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if VIRTUAL_TRADING_AVAILABLE:
                await virtual_position_manager.start_monitoring()
                logger.info("üîÑ Virtual position monitoring started")
            
            logger.info("‚úÖ Telegram listening started")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start Telegram: {e}")
            return False
    
    async def _handle_telegram_message(self, message_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram"""
        try:
            text = message_data.get("text", "")
            trader_id = message_data.get("trader_id", "unknown")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à–∏ –ø–∞—Ä—Å–µ—Ä—ã
            result = await self.process_raw_signal(text, trader_id, trader_id)
            if result:
                logger.info(f"‚úÖ Processed live signal: {result.symbol}")
                
        except Exception as e:
            logger.error(f"‚ùå Error handling Telegram message: {e}")
    
    def _init_supabase(self) -> Optional[Client]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
            supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
            
            if not supabase_url or not supabase_key:
                logger.warning("‚ö†Ô∏è Supabase credentials not found")
                return None
            
            client = create_client(supabase_url, supabase_key)
            logger.info("‚úÖ Supabase client initialized")
            return client
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Supabase: {e}")
            return None
    
    async def process_raw_signal(self, raw_text: str, trader_id: str, source_hint: str = None) -> Optional[ParsedSignal]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä—Å–µ—Ä–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Supabase"""
        try:
            self.stats['signals_processed'] += 1
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç—Ä–µ–π–¥–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ trader_registry
            await self._ensure_trader_exists(trader_id, source_hint)
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π —Å–∏–≥–Ω–∞–ª –≤ Supabase
            await self._save_raw_signal_to_supabase(trader_id, raw_text)
            
            # –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
            best_parser = None
            best_parser_name = None
            
            # –ü–†–ò–û–†–ò–¢–ï–¢: –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
            if trader_id in self.parsers:
                parser = self.parsers[trader_id]
                logger.info(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è {trader_id}: {type(parser).__name__}")
                
                if parser.can_parse(raw_text):
                    best_parser = parser
                    best_parser_name = trader_id
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {trader_id}")
                else:
                    logger.info(f"‚ö†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä {trader_id} –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç")
            else:
                logger.warning(f"‚ö†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è {trader_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                logger.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã: {list(self.parsers.keys())}")
            
            # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if not best_parser and source_hint and source_hint in self.parsers:
                parser = self.parsers[source_hint]
                if parser.can_parse(raw_text):
                    best_parser = parser
                    best_parser_name = source_hint
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            if not best_parser:
                # –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤
                priority_order = ['whales_crypto_guide', 'cryptoattack24', 
                                '2trade_premium', 'crypto_hub_vip']
                
                for parser_name in priority_order:
                    if parser_name in self.parsers:
                        parser = self.parsers[parser_name]
                        if parser.can_parse(raw_text):
                            best_parser = parser
                            best_parser_name = parser_name
                            break
                
                # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                if not best_parser:
                    for parser_name, parser in self.parsers.items():
                        if parser_name not in priority_order and parser.can_parse(raw_text):
                            best_parser = parser
                            best_parser_name = parser_name
                            break
            
            if not best_parser:
                logger.warning(f"‚ö†Ô∏è No suitable parser found for signal from {trader_id}")
                self.stats['signals_failed'] += 1
                return None
            
            # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
            signal = best_parser.parse_signal(raw_text, trader_id)
            
            if not signal:
                logger.warning(f"‚ö†Ô∏è Failed to parse signal with {best_parser_name}")
                self.stats['signals_failed'] += 1
                return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞
            self.stats['parsers_used'][best_parser_name] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Å–∏–≥–Ω–∞–ª—ã –≤ Supabase (–≤–∫–ª—é—á–∞—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ)
            await self._save_parsed_signal_to_supabase(signal, best_parser_name, raw_text)
            
            # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ghostsignaltest —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ v_trades
            if trader_id in ['ghostsignaltest', 'ghost_test'] and isinstance(self.parsers.get(trader_id), GhostTestParser):
                await self._save_to_v_trades_table(signal, trader_id, raw_text)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            if signal.is_valid:
                self.stats['signals_saved'] += 1
                logger.info(f"‚úÖ VALID signal parsed and saved: {signal.symbol} {signal.direction}")
            else:
                logger.warning(f"‚ö†Ô∏è INVALID signal parsed and saved: {signal.symbol} {signal.direction} | Errors: {signal.parse_errors}")
                
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå Error processing signal: {e}")
            self.stats['signals_failed'] += 1
            return None
    
    async def _save_raw_signal_to_supabase(self, trader_id: str, raw_text: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ Supabase —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π"""
        try:
            if not self.supabase:
                logger.warning("‚ö†Ô∏è Supabase not available, skipping raw signal save")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ç—Ä–µ–π–¥–µ—Ä—É –∏ —Ç–µ–∫—Å—Ç—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
            from datetime import timedelta
            two_hours_ago = (datetime.now() - timedelta(hours=2)).isoformat()

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±–∏—Ä–∞–µ–º select('id') —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–æ–Ω–∫–∏ id –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
            existing = self.supabase.table('signals_raw').select('*').eq('trader_id', trader_id).eq('text', raw_text.strip()).gte('created_at', two_hours_ago).limit(1).execute()
            
            if existing.data:
                logger.info(f"üîÑ Duplicate signal ignored from {trader_id} (text: {raw_text[:30]}...)")
                self.stats['duplicates_skipped'] = self.stats.get('duplicates_skipped', 0) + 1
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—ã—Ä–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            raw_data = {
                'trader_id': trader_id,
                'text': raw_text,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'text' –≤ Prisma —Å—Ö–µ–º–µ
                'posted_at': datetime.now().isoformat(),
                'processed': False
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É signals_raw
            result = self.supabase.table('signals_raw').insert(raw_data).execute()
            
            if result.data:
                logger.info(f"‚úÖ Raw signal saved to Supabase from {trader_id}")
                self.stats['raw_signals_saved'] = self.stats.get('raw_signals_saved', 0) + 1
            else:
                logger.error(f"‚ùå Failed to save raw signal to Supabase")
                self.stats['supabase_errors'] += 1
                
        except Exception as e:
            logger.error(f"‚ùå Failed to save raw signal: {e}")
            self.stats['supabase_errors'] += 1
    
    async def _save_parsed_signal_to_supabase(self, signal: ParsedSignal, parser_name: str, raw_text: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ Supabase"""
        try:
            if not self.supabase:
                logger.warning("‚ö†Ô∏è Supabase not available, skipping parsed signal save")
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ö–µ–º–æ–π Prisma
            current_time = datetime.now().isoformat()
            
            signal_data = {
                'trader_id': signal.trader_id,
                'symbol': signal.symbol,
                'side': signal.direction.value if hasattr(signal, 'direction') else 'UNKNOWN',
                'entry_type': getattr(signal, 'entry_type', 'market'),
                'entry': float(signal.entry_price) if hasattr(signal, 'entry_price') and signal.entry_price else None,
                'range_low': float(min(signal.entry_zone)) if hasattr(signal, 'entry_zone') and signal.entry_zone else None,
                'range_high': float(max(signal.entry_zone)) if hasattr(signal, 'entry_zone') and signal.entry_zone else None,
                'tp1': float(signal.targets[0]) if hasattr(signal, 'targets') and signal.targets and len(signal.targets) > 0 else None,
                'tp2': float(signal.targets[1]) if hasattr(signal, 'targets') and signal.targets and len(signal.targets) > 1 else None,
                'tp3': float(signal.targets[2]) if hasattr(signal, 'targets') and signal.targets and len(signal.targets) > 2 else None,
                'tp4': float(signal.targets[3]) if hasattr(signal, 'targets') and signal.targets and len(signal.targets) > 3 else None,
                'sl': float(signal.stop_loss) if hasattr(signal, 'stop_loss') and signal.stop_loss else None,
                'leverage_hint': self._extract_leverage_number(getattr(signal, 'leverage', None)),
                'confidence': float(signal.confidence) if hasattr(signal, 'confidence') else 0.5,
                
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ö–µ–º–æ–π Prisma
                'parsed_at': current_time,
                'posted_at': signal.timestamp.isoformat() if hasattr(signal, 'timestamp') else current_time,
                'created_at': current_time,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                'parse_version': 'v1.0',
                'is_valid': getattr(signal, 'is_valid', True),
                'validation_errors': getattr(signal, 'parse_errors', None),
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π checksum –¥–ª—è Prisma —Å—Ö–µ–º—ã (–º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞)
                'checksum': f"{signal.trader_id[:10]}_{signal.symbol[:10]}_{int(datetime.now().timestamp())}_{abs(hash(raw_text)) % 100000}"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É signals_parsed
            result = self.supabase.table('signals_parsed').insert(signal_data).execute()
            
            if result.data:
                logger.info(f"‚úÖ Parsed signal saved to Supabase: {signal.symbol}")
                self.stats['supabase_saves'] += 1
            else:
                logger.error(f"‚ùå Failed to save parsed signal to Supabase")
                self.stats['supabase_errors'] += 1
                
        except Exception as e:
            logger.error(f"‚ùå Failed to save parsed signal: {e}")
            self.stats['supabase_errors'] += 1
    
    async def _save_to_v_trades_table(self, signal: ParsedSignal, trader_id: str, raw_text: str):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É v_trades"""
        try:
            if not self.supabase:
                logger.warning("‚ö†Ô∏è Supabase not available, skipping v_trades save")
                return
            
            import uuid
            from datetime import timezone
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø–∏—Å–∏
            trade_id = str(uuid.uuid4())
            current_timestamp = datetime.now(timezone.utc)
            posted_timestamp = int(current_timestamp.timestamp())  # unix —Å–µ–∫—É–Ω–¥—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
            
            # –î–ª—è ghostsignaltest –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            is_ghost_test = trader_id in ['ghostsignaltest', 'ghost_test']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
            entry_min = None
            entry_max = None
            
            if is_ghost_test and hasattr(self.parsers.get(trader_id), 'extract_entry_prices_exact'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è ghostsignaltest
                parser = self.parsers.get(trader_id)
                exact_entries = parser.extract_entry_prices_exact(raw_text)
                if exact_entries:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float –¥–ª—è –ë–î, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–ø—è—Ç—ã–º–∏
                    entry_values = [float(e.replace(',', '')) for e in exact_entries]
                    entry_min = min(entry_values)
                    entry_max = max(entry_values)
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
                if hasattr(signal, 'entry_zone') and signal.entry_zone:
                    entry_min = float(min(signal.entry_zone))
                    entry_max = float(max(signal.entry_zone))
                elif hasattr(signal, 'entry_single') and signal.entry_single:
                    entry_min = float(signal.entry_single)
                    entry_max = float(signal.entry_single)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—á–Ω–æ—Å—Ç–∏
            tp1, tp2, tp3 = None, None, None
            targets_json = '[]'
            
            if is_ghost_test and hasattr(self.parsers.get(trader_id), 'extract_targets_exact'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è ghostsignaltest
                parser = self.parsers.get(trader_id)
                exact_targets = parser.extract_targets_exact(raw_text)
                if exact_targets:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float –¥–ª—è –ø–æ–ª–µ–π tp1, tp2, tp3
                    target_values = [float(t.replace(',', '')) for t in exact_targets]
                    tp1 = target_values[0] if len(target_values) > 0 else None
                    tp2 = target_values[1] if len(target_values) > 1 else None
                    tp3 = target_values[2] if len(target_values) > 2 else None
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON
                    targets_json = str(exact_targets)
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
                tp1 = float(signal.targets[0]) if hasattr(signal, 'targets') and signal.targets and len(signal.targets) > 0 else None
                tp2 = float(signal.targets[1]) if hasattr(signal, 'targets') and signal.targets and len(signal.targets) > 1 else None
                tp3 = float(signal.targets[2]) if hasattr(signal, 'targets') and signal.targets and len(signal.targets) > 2 else None
                targets_json = str(signal.targets) if hasattr(signal, 'targets') and signal.targets else '[]'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—á–Ω–æ—Å—Ç–∏
            sl = None
            
            if is_ghost_test and hasattr(self.parsers.get(trader_id), 'extract_stop_loss_exact'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ghostsignaltest
                parser = self.parsers.get(trader_id)
                exact_sl = parser.extract_stop_loss_exact(raw_text)
                if exact_sl:
                    sl = float(exact_sl.replace(',', ''))
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
                sl = float(signal.stop_loss) if hasattr(signal, 'stop_loss') and signal.stop_loss else None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è v_trades —Ç–∞–±–ª–∏—Ü—ã
            v_trades_data = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                'id': trade_id,
                'signal_id': signal.signal_id if hasattr(signal, 'signal_id') else None,
                'source': f"tg_{trader_id}",
                'source_type': 'telegram',
                'source_name': 'Ghost Signal Test',
                'source_ref': f"tg://{trader_id}",
                'original_text': raw_text,
                'signal_reason': self._get_validation_info(signal),
                'posted_ts': posted_timestamp,
                
                # –¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                'symbol': signal.symbol,
                'side': 'LONG' if signal.direction.value in ['LONG', 'BUY'] else 'SHORT',
                'entry_type': 'zone' if (entry_min != entry_max and entry_max is not None) else 'exact',
                'entry_min': entry_min,
                'entry_max': entry_max,
                
                # –¶–µ–ª–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—á–Ω–æ—Å—Ç–∏
                'tp1': tp1,
                'tp2': tp2,
                'tp3': tp3,
                'targets_json': targets_json,
                
                # –°—Ç–æ–ø-–ª–æ—Å—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—á–Ω–æ—Å—Ç–∏
                'sl': sl,
                'sl_type': 'hard',
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
                'source_leverage': getattr(signal, 'leverage', '15x'),
                'strategy_id': 'S_A_TP1_BE_TP2',
                'strategy_version': '1',
                'fee_rate': 0.0005,
                'leverage': self._extract_leverage_number(getattr(signal, 'leverage', '15x')),
                'margin_usd': 100.0,
                'entry_timeout_sec': 172800,  # 48 —á–∞—Å–æ–≤
                
                # –°—Ç–∞—Ç—É—Å
                'was_fillable': getattr(signal, 'is_valid', True),  # –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã fillable
                'status': 'cancelled' if not getattr(signal, 'is_valid', True) else 'sim_open',  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ cancelled
                
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                'created_at': current_timestamp.isoformat(),
                'updated_at': current_timestamp.isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É v_trades
            result = self.supabase.table('v_trades').insert(v_trades_data).execute()
            
            if result.data:
                is_valid = getattr(signal, 'is_valid', True)
                status = 'cancelled' if not is_valid else 'sim_open'
                validation_info = ""
                
                if not is_valid:
                    validation_errors = getattr(signal, 'validation_errors', [])
                    validation_info = f" | INVALID: {'; '.join(validation_errors[:2])}"  # –ü–µ—Ä–≤—ã–µ 2 –æ—à–∏–±–∫–∏
                    
                logger.info(f"‚úÖ Ghost test signal saved to v_trades: {signal.symbol} {signal.direction.value} [{status}]{validation_info}")
                self.stats['v_trades_saves'] = self.stats.get('v_trades_saves', 0) + 1
                
                # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                if is_valid and VIRTUAL_TRADING_AVAILABLE:
                    try:
                        position_id = await virtual_position_manager.create_position_from_signal(
                            signal=signal,
                            v_trade_id=trade_id,
                            position_size_usd=100.0,  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            leverage=10  # –ü–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        )
                        
                        if position_id:
                            logger.info(f"üöÄ Virtual position created: {signal.symbol} (ID: {position_id})")
                        else:
                            logger.warning(f"‚ö†Ô∏è Failed to create virtual position for {signal.symbol}")
                            
                    except Exception as e:
                        logger.error(f"‚ùå Error creating virtual position: {e}")
            else:
                logger.error(f"‚ùå Failed to save to v_trades table")
                self.stats['supabase_errors'] += 1
                
        except Exception as e:
            logger.error(f"‚ùå Failed to save to v_trades table: {e}")
            self.stats['supabase_errors'] += 1
    
    def _get_validation_info(self, signal) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if not hasattr(signal, 'is_valid') or signal.is_valid:
            return 'Valid signal'  # –í–∞–ª–∏–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        
        # –î–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        validation_errors = getattr(signal, 'validation_errors', [])
        if validation_errors:
            return f"INVALID_SIGNAL: {'; '.join(validation_errors)}"
        else:
            return 'INVALID_SIGNAL: Unknown validation error'
    
    async def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        uptime = datetime.now() - self.stats['started_at']
        
        return {
            **self.stats,
            'uptime_seconds': int(uptime.total_seconds()),
            'uptime_human': str(uptime),
            'supabase_connected': self.supabase is not None,
            'parsers_available': list(self.parsers.keys()),
            'success_rate': (self.stats['signals_saved'] / max(self.stats['signals_processed'], 1)) * 100
        }
    
    async def _ensure_trader_exists(self, trader_id: str, source_hint: str = None):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç—Ä–µ–π–¥–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ trader_registry"""
        try:
            if not self.supabase:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–µ–π–¥–µ—Ä
            result = self.supabase.table('trader_registry').select('trader_id').eq('trader_id', trader_id).execute()
            
            if not result.data:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
                trader_info = self._get_trader_info(trader_id, source_hint)
                
                insert_result = self.supabase.table('trader_registry').insert(trader_info).execute()
                
                if insert_result.data:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥–µ—Ä: {trader_id}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞: {trader_id}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞: {e}")
    
    def _get_trader_info(self, trader_id: str, source_hint: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–π–¥–µ—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID"""
        trader_configs = {
            'whales_crypto_guide': {
                'name': 'Whales Crypto Guide',
                'source_handle': '@whalesguide',
                'source_id': '-1001288385100',
                'notes': 'English premium crypto signals with high accuracy',
                'parsing_profile': 'whales_crypto_parser'
            },
            'cryptoattack24': {
                'name': '–ö—Ä–∏–ø—Ç–æ–ê—Ç–∞–∫–∞ 24',
                'source_handle': '@cryptoattack24',
                'source_id': '-1001263635145',
                'notes': 'Russian crypto news and pump signals with market analysis',
                'parsing_profile': 'cryptoattack24_parser'
            },
            '2trade_premium': {
                'name': '2Trade Premium',
                'source_handle': '@slivaeminfo',
                'source_id': '-1001234567890',
                'notes': 'Russian structured trading signals with clear entry/exit levels',
                'parsing_profile': 'two_trade_parser'
            },
            'crypto_hub_vip': {
                'name': 'Crypto Hub VIP',
                'source_handle': '@cryptohubvip',
                'source_id': '-1001345678901',
                'notes': 'VIP crypto signals with emoji formatting and quick calls',
                'parsing_profile': 'crypto_hub_parser'
            },
            'ghostsignaltest': {
                'name': 'Ghost Signal Test',
                'source_handle': '@ghostsignaltest',
                'source_id': '-1002974041293',
                'notes': 'Test channel for signal parsing to v_trades table',
                'parsing_profile': 'ghost_test_parser'
            }
        }
        
        config = trader_configs.get(trader_id, {
            'name': trader_id.replace('_', ' ').title(),
            'source_handle': f'@{trader_id}',
            'source_id': None,
            'notes': 'Auto-created trader',
            'parsing_profile': source_hint or 'standard_v1'
        })
        
        return {
            'trader_id': trader_id,
            'name': config['name'],
            'source_type': 'telegram',
            'source_id': config['source_id'],
            'source_handle': config['source_handle'],
            'mode': 'observe',
            'risk_profile': {'size_usd': 100, 'leverage': 10, 'risk_percent': 2},
            'parsing_profile': config['parsing_profile'],
            'is_active': True,
            'notes': config['notes']
        }
    
    def _extract_leverage_number(self, leverage_str: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–ª–µ—á–∞"""
        if not leverage_str:
            return None
        
        try:
            # –ò—â–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∏–ø–∞ "10x", "5x - 10x", "10"
            import re
            numbers = re.findall(r'(\d+)', str(leverage_str))
            if numbers:
                # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                return max(int(num) for num in numbers)
        except:
            pass
        
        return None

    async def test_supabase_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
        try:
            if not self.supabase:
                return False
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            result = self.supabase.table('signals_raw').select('*').limit(1).execute()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Supabase connection test failed: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
orchestrator_with_supabase = SignalOrchestratorWithSupabase()

async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info("üöÄ Testing SignalOrchestrator with Supabase...")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
    if await orchestrator_with_supabase.test_supabase_connection():
        logger.info("‚úÖ Supabase connection OK")
    else:
        logger.error("‚ùå Supabase connection failed")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    test_signal = """
    üöÄüî• #ALPINE –∑–∞–ø–∞–º–ø–∏–ª–∏ –Ω–∞ +57% —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞
    –°–µ–π—á–∞—Å –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –º–æ–∂–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –ª–æ–Ω–≥
    –¶–µ–ª–∏: 2.45, 2.60, 2.85
    """
    
    result = await orchestrator_with_supabase.process_raw_signal(test_signal, "cryptoattack24", "cryptoattack24")
    
    if result:
        logger.info(f"‚úÖ Test signal processed: {result.symbol}")
    else:
        logger.error("‚ùå Test signal failed")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = await orchestrator_with_supabase.get_stats()
    logger.info(f"üìä Stats: {json.dumps(stats, indent=2, default=str)}")

if __name__ == "__main__":
    asyncio.run(main())
