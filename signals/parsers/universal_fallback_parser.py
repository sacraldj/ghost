#!/usr/bin/env python3
"""
–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô FALLBACK –ü–ê–†–°–ï–†
–ü–∞—Ä—Å–µ—Ä –¥–ª—è –ª—é–±—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤, –∫–æ–≥–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
"""

import logging
import re
from datetime import datetime
from typing import Optional

from signals.parsers.signal_parser_base import SignalParserBase, ParsedSignal, SignalDirection

logger = logging.getLogger(__name__)

class UniversalFallbackParser(SignalParserBase):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ª—é–±—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.source_name = "universal_fallback"
        logger.info("‚úÖ Universal Fallback Parser initialized")
    
    def can_parse(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ text –±—ã—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º"""
        if not text or len(text.strip()) < 10:
            return False
            
        text_upper = text.upper()
        
        # –ò—â–µ–º —Å–∏–º–≤–æ–ª—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        symbol_indicators = ['#', '$', 'USDT', 'USD', 'BTC', 'ETH', 'DOGE', 'ADA', 'SOL']
        has_symbol = any(indicator in text_upper for indicator in symbol_indicators)
        
        # –ò—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_indicators = ['LONG', 'SHORT', 'BUY', 'SELL', 'üöÄ', 'üî¥', '–õ–û–ù–ì', '–®–û–†–¢']
        has_direction = any(indicator in text_upper for indicator in direction_indicators)
        
        # –ò—â–µ–º —Ü–µ–Ω—ã (—á–∏—Å–ª–∞)
        has_numbers = bool(re.search(r'\d+\.?\d*', text))
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_keywords = ['ENTRY', 'TARGET', 'TP', 'STOP', 'SL', 'LEVERAGE', '–í–•–û–î', '–¶–ï–õ–¨', '–°–¢–û–ü']
        has_trading_words = any(keyword in text_upper for keyword in trading_keywords)
        
        result = has_symbol and (has_direction or has_trading_words) and has_numbers
        
        logger.info(f"üîç Can parse check: symbol={has_symbol}, direction={has_direction}, "
                   f"numbers={has_numbers}, trading_words={has_trading_words} -> {result}")
        
        return result
    
    def parse_signal(self, text: str, trader_id: str) -> Optional[ParsedSignal]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ regex –∏ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏"""
        try:
            logger.info(f"üîß –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {trader_id}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª
            symbol = self._extract_symbol(text)
            if not symbol:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–∏–º–≤–æ–ª")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            direction = self._extract_direction(text)
            if not direction:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
            prices = self._extract_prices(text)
            if len(prices) < 2:
                logger.warning("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return None
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—ã –Ω–∞ entry, targets, stop_loss
            entry_prices, targets, stop_loss = self._distribute_prices(prices, direction)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º leverage
            leverage = self._extract_leverage(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            is_valid, errors = self._validate_signal(direction, entry_prices, targets, stop_loss)
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            signal = ParsedSignal(
                signal_id=f"{trader_id}_{symbol}_{int(datetime.now().timestamp())}",
                source=self.source_name,
                trader_id=trader_id,
                raw_text=text,
                timestamp=datetime.now(),
                symbol=symbol,
                direction=direction,
                leverage=leverage,
                entry_zone=entry_prices if len(entry_prices) > 1 else None,
                entry_single=entry_prices[0] if len(entry_prices) == 1 else None,
                targets=targets,
                tp1=targets[0] if len(targets) > 0 else None,
                tp2=targets[1] if len(targets) > 1 else None,
                tp3=targets[2] if len(targets) > 2 else None,
                stop_loss=stop_loss,
                confidence=0.8 if is_valid else 0.3,
                is_valid=is_valid,
                parse_errors=errors
            )
            
            status = "‚úÖ VALID" if is_valid else "‚ùå INVALID"
            logger.info(f"{status} –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {symbol} {direction.value}")
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ: {e}")
            return None
    
    def _extract_symbol(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
        patterns = [
            r'#(\w+USDT?)',      # #BTCUSDT, #ETHUSDT
            r'#(\w+USD)',        # #BTCUSD, #ETHUSD  
            r'#(\w+)',           # #BTC, #ETH
            r'\$(\w+)',          # $BTC, $ETH
            r'(\w+USDT?)\b',     # BTCUSDT, ETHUSDT
            r'(\w+)/USDT?',      # BTC/USDT, ETH/USDT
            r'(\w+)-USDT?',      # BTC-USDT, ETH-USDT
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                symbol = match.group(1).upper()
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
                if not symbol.endswith(('USDT', 'USD', 'USDC', 'BUSD')):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã
                    if symbol in ['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'DOGE', 'MATIC', 'DOT', 'LINK', 'UNI']:
                        symbol += 'USDT'
                
                logger.info(f"‚úÖ –°–∏–º–≤–æ–ª –Ω–∞–π–¥–µ–Ω: {symbol}")
                return symbol
        
        logger.warning("‚ùå –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def _extract_direction(self, text: str) -> Optional[SignalDirection]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        text_upper = text.upper()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è LONG
        long_patterns = [
            r'\bLONG\b', r'\bBUY\b', r'\bLONGING\b', r'\b–õ–û–ù–ì\b', r'\b–ö–£–ü–ò–¢–¨\b',
            r'üöÄ', r'üìà', r'‚¨ÜÔ∏è', r'üíö', r'üü¢'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è SHORT  
        short_patterns = [
            r'\bSHORT\b', r'\bSELL\b', r'\bSHORTING\b', r'\b–®–û–†–¢\b', r'\b–ü–†–û–î–ê–¢–¨\b',
            r'üî¥', r'üìâ', r'‚¨áÔ∏è', r'‚ù§Ô∏è', r'üîª'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LONG
        for pattern in long_patterns:
            if re.search(pattern, text_upper):
                logger.info("‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: LONG")
                return SignalDirection.LONG
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHORT
        for pattern in short_patterns:
            if re.search(pattern, text_upper):
                logger.info("‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: SHORT")
                return SignalDirection.SHORT
        
        logger.warning("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        return None
    
    def _extract_prices(self, text: str) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ü–µ–Ω —Å –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç–æ—á–∫–∞–º–∏
        price_patterns = [
            r'\$?[\d,]+\.?\d*',     # $45,000.50, 45000, 45,000
            r'[\d,]+\.?\d*\$?',     # 45000$, 45,000.50
        ]
        
        prices = []
        for pattern in price_patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                # –û—á–∏—â–∞–µ–º –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                clean_price = re.sub(r'[,$]', '', match)
                try:
                    price = float(clean_price)
                    if 0.00001 < price < 1000000:  # —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã —Ü–µ–Ω
                        prices.append(price)
                except ValueError:
                    continue
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        prices = sorted(list(set(prices)))
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω: {len(prices)} - {prices}")
        return prices
    
    def _distribute_prices(self, prices: list, direction: SignalDirection) -> tuple:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ entry, targets, stop_loss"""
        if len(prices) < 2:
            return [], [], None
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        entry_prices = []
        targets = []
        stop_loss = None
        
        if len(prices) == 2:
            # 2 —Ü–µ–Ω—ã: entry + target –ò–õ–ò entry + stop
            entry_prices = [prices[0]]
            
            if direction == SignalDirection.LONG:
                if prices[1] > prices[0]:
                    targets = [prices[1]]  # –≤—ã—à–µ = target
                else:
                    stop_loss = prices[1]  # –Ω–∏–∂–µ = stop
            else:  # SHORT
                if prices[1] < prices[0]:
                    targets = [prices[1]]  # –Ω–∏–∂–µ = target
                else:
                    stop_loss = prices[1]  # –≤—ã—à–µ = stop
                    
        elif len(prices) == 3:
            # 3 —Ü–µ–Ω—ã: entry + target + stop
            entry_prices = [prices[0]]
            
            if direction == SignalDirection.LONG:
                # –î–ª—è LONG: entry < target, entry > stop
                higher = [p for p in prices[1:] if p > prices[0]]
                lower = [p for p in prices[1:] if p < prices[0]]
                targets = higher
                stop_loss = lower[0] if lower else None
            else:  # SHORT
                # –î–ª—è SHORT: entry > target, entry < stop
                lower = [p for p in prices[1:] if p < prices[0]]
                higher = [p for p in prices[1:] if p > prices[0]]
                targets = lower
                stop_loss = higher[0] if higher else None
                
        else:  # 4+ —Ü–µ–Ω—ã
            # –ú–Ω–æ–≥–æ —Ü–µ–Ω: –ø–µ—Ä–≤—ã–µ = entry zone, —Å—Ä–µ–¥–Ω–∏–µ = targets, –ø–æ—Å–ª–µ–¥–Ω—è—è = stop
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ entry zone (–±–ª–∏–∑–∫–∏–µ —Ü–µ–Ω—ã)
            if len(prices) >= 4 and abs(prices[1] - prices[0]) / prices[0] < 0.1:
                entry_prices = [prices[0], prices[1]]
                remaining = prices[2:]
            else:
                entry_prices = [prices[0]]
                remaining = prices[1:]
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —á–∞—Å—Ç–æ stop_loss
            potential_stop = remaining[-1]
            potential_targets = remaining[:-1]
            
            avg_entry = sum(entry_prices) / len(entry_prices)
            
            if direction == SignalDirection.LONG:
                targets = [p for p in potential_targets if p > avg_entry]
                if potential_stop < avg_entry:
                    stop_loss = potential_stop
            else:  # SHORT
                targets = [p for p in potential_targets if p < avg_entry]
                if potential_stop > avg_entry:
                    stop_loss = potential_stop
        
        return entry_prices, targets, stop_loss
    
    def _extract_leverage(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–ª–µ—á–∞"""
        leverage_match = re.search(r'(\d+)x', text, re.IGNORECASE)
        
        if leverage_match:
            leverage = f"{leverage_match.group(1)}x"
            logger.info(f"‚úÖ Leverage –Ω–∞–π–¥–µ–Ω: {leverage}")
            return leverage
        
        logger.info("‚ÑπÔ∏è Leverage –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 15x –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return "15x"
    
    def _validate_signal(self, direction: SignalDirection, entry_prices: list, 
                        targets: list, stop_loss: float) -> tuple:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        errors = []
        
        if not entry_prices:
            errors.append("–ù–µ—Ç entry —Ü–µ–Ω")
            
        if not targets:
            errors.append("–ù–µ—Ç targets")
        
        if entry_prices and targets:
            avg_entry = sum(entry_prices) / len(entry_prices)
            
            if direction == SignalDirection.LONG:
                # –î–ª—è LONG: targets –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ entry
                invalid_targets = [t for t in targets if t <= avg_entry]
                if invalid_targets:
                    errors.append(f"Targets {invalid_targets} –Ω–µ –≤—ã—à–µ entry {avg_entry:.2f} –¥–ª—è LONG")
                
                # Stop loss –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ entry
                if stop_loss and stop_loss >= avg_entry:
                    errors.append(f"Stop loss {stop_loss} –Ω–µ –Ω–∏–∂–µ entry {avg_entry:.2f} –¥–ª—è LONG")
                    
            else:  # SHORT
                # –î–ª—è SHORT: targets –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∏–∂–µ entry
                invalid_targets = [t for t in targets if t >= avg_entry]
                if invalid_targets:
                    errors.append(f"Targets {invalid_targets} –Ω–µ –Ω–∏–∂–µ entry {avg_entry:.2f} –¥–ª—è SHORT")
                
                # Stop loss –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ entry
                if stop_loss and stop_loss <= avg_entry:
                    errors.append(f"Stop loss {stop_loss} –Ω–µ –≤—ã—à–µ entry {avg_entry:.2f} –¥–ª—è SHORT")
        
        is_valid = len(errors) == 0
        
        if errors:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {'; '.join(errors)}")
        
        return is_valid, errors
