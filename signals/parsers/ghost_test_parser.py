"""
GHOST Test Signal Parser
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ @ghostsignaltest
–ü–∞—Ä—Å–∏—Ç —Å–∏–≥–Ω–∞–ª—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É v_trades
"""

import re
import logging
from datetime import datetime
from typing import Optional, List, Dict, Any
from .signal_parser_base import SignalParserBase, ParsedSignal, SignalDirection, calculate_confidence
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ config
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from config.crypto_symbols_database import get_crypto_symbols_db

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º image parser –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
try:
    from .image_parser import ImageSignalParser
    IMAGE_PARSER_AVAILABLE = True
except ImportError:
    IMAGE_PARSER_AVAILABLE = False

logger = logging.getLogger(__name__)

class GhostTestParser(SignalParserBase):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ Ghost Signal Test"""
    
    def __init__(self):
        super().__init__("ghost_signal_test")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É —Å–∏–º–≤–æ–ª–æ–≤
        self.crypto_db = get_crypto_symbols_db()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º image parser –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        self.image_parser = None
        if IMAGE_PARSER_AVAILABLE:
            try:
                self.image_parser = ImageSignalParser()
                logger.info("‚úÖ Image parser initialized for Ghost Test")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Image parser initialization failed: {e}")
        else:
            logger.info("‚ÑπÔ∏è Image parser not available for Ghost Test")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
        self.format_patterns = [
            r'(LONG|SHORT|BUY|SELL|Longing|Shorting)',  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            r'(Entry|ENTRY):\s*[\$]?([0-9,]+\.?[0-9]*)',  # Entry: $50000
            r'(Target|TARGET|TP|tp)s?:?\s*[\$]?([0-9,]+\.?[0-9]*)',  # Targets
            r'(Stop|STOP|SL|sl|Stop-loss):?\s*[\$]?([0-9,]+\.?[0-9]*)',  # Stop-loss
            r'([A-Z]{2,10})(USDT?|USD|USDC)?',  # BTCUSDT, APT –∏ —Ç.–¥.
            r'#([A-Z]{2,10})',  # #BTC, #APT –∏ —Ç.–¥.
            r'([0-9]+)x',  # Leverage: 10x, 15x –∏ —Ç.–¥.
            r'TEST.*SIGNAL',  # TEST - SIGNAL
            r'Forwarded from',  # Forwarded from –∫–∞–Ω–∞–ª
            r'(Short|Long)\s*\([0-9x\-\s]+\)',  # Short (5x-10x)
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.ghost_keywords = [
            'test', 'signal', 'forwarded from', 'shorting', 'longing',
            'entry', 'targets', 'stop-loss', 'short (', 'long (',
            'leverage', 'whales crypto guide', 'here', 'reason',
            'testing', 'now', 'crypto'
        ]
    
    def can_parse(self, text: str, has_image: bool = False) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ø—Ä–∏–Ω–∏–º–∞–µ–º –í–°–ï –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç
        if has_image:
            logger.info("üñºÔ∏è Ghost Test: Detected image with text, accepting for parsing")
            return True
            
        # –î–ª—è —Ç–µ–∫—Å—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        if not text or len(text.strip()) < 5:  # –ü–æ–Ω–∏–∑–∏–ª–∏ –º–∏–Ω–∏–º—É–º —Å 10 –¥–æ 5
            return False
            
        text_clean = self.clean_text(text).upper()
        
        # –†–ê–°–®–ò–†–ï–ù–ù–´–ï –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ)
        has_direction = bool(re.search(r'\b(LONG|SHORT|BUY|SELL|LONGING|SHORTING)\b', text_clean))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        detected_symbol = self.extract_symbol_ghost(text_clean)
        has_symbol = detected_symbol is not None
        
        has_price = bool(re.search(r'(ENTRY|TARGET|TP|STOP|SL).*\$?[0-9,]+\.?[0-9]*', text_clean, re.IGNORECASE))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        has_crypto_mention = bool(re.search(r'(–ó–ê–ü–ê–ú–ü–ò–õ–ò|–†–û–°–¢|–ü–ê–ú–ü|DUMP|MOON|BREAKOUT)', text_clean))
        has_percentage = bool(re.search(r'\+?\d+%', text_clean))
        
        # –ò–°–ö–õ–Æ–ß–ê–ï–ú –æ—á–µ–≤–∏–¥–Ω–æ –ù–ï —Å–∏–≥–Ω–∞–ª—ã
        exclude_phrases = [
            '–û–ö', '–•–û–†–û–®–û', '–ü–û–ù–Ø–¢–ù–û', '–°–ü–ê–°–ò–ë–û', '–î–ê', '–ù–ï–¢', 
            '–ü–†–ò–í–ï–¢', '–ü–û–ö–ê', '–ö–ê–ö –î–ï–õ–ê', '–ß–¢–û –¢–ê–ú'
        ]
        
        for phrase in exclude_phrases:
            if phrase in text_clean and len(text_clean) < 30:  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 50 –¥–æ 30
                return False
        
        # –ì–ò–ë–ö–ê–Ø –ª–æ–≥–∏–∫–∞: —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å –•–û–¢–Ø –ë–´ 2 –∏–∑ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        criteria_met = sum([
            has_direction,
            has_symbol, 
            has_price,
            has_crypto_mention,
            has_percentage
        ])
        
        is_signal = criteria_met >= 2 or (has_direction and has_symbol)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        if is_signal and len(text_clean) < 15:  # –ü–æ–Ω–∏–∑–∏–ª–∏ —Å 30 –¥–æ 15
            return False
            
        return is_signal
    
    def parse_signal(self, text: str, trader_id: str, image_data: Optional[bytes] = None, image_format: str = "PNG") -> Optional[ParsedSignal]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (—Ç–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"""
        try:
            timestamp = datetime.now()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            image_signal_data = None
            if image_data and self.image_parser:
                try:
                    logger.info("üñºÔ∏è Attempting to parse image signal...")
                    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞ –¥–µ–ª–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
                    image_signal_data = self._parse_image_signal_sync(image_data, image_format, text)
                    if image_signal_data:
                        logger.info("‚úÖ Image signal data extracted successfully")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Image parsing failed: {e}")
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
            text_clean = self.clean_text(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
            symbol = self.extract_symbol_ghost(text_clean)
            direction = self.extract_direction_ghost(text_clean)
            entry_prices = self.extract_entry_prices_ghost(text_clean)
            targets = self.extract_targets_ghost(text_clean)
            stop_loss = self.extract_stop_loss_ghost(text_clean)
            leverage = self.extract_leverage_ghost(text_clean)
            
            # –ï—Å–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–ª–µ–∫–ª–∏ - –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if image_signal_data:
                symbol = symbol or image_signal_data.get('symbol')
                if not direction and image_signal_data.get('direction'):
                    direction_str = image_signal_data.get('direction', '').upper()
                    if 'LONG' in direction_str or 'BUY' in direction_str:
                        direction = SignalDirection.LONG
                    elif 'SHORT' in direction_str or 'SELL' in direction_str:
                        direction = SignalDirection.SHORT
                
                entry_prices = entry_prices or image_signal_data.get('entry_prices', [])
                targets = targets or image_signal_data.get('targets', [])
                stop_loss = stop_loss or image_signal_data.get('stop_loss')
                leverage = leverage or image_signal_data.get('leverage', '10x')
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è - —Å–æ–∑–¥–∞–µ–º "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π" —Å–∏–≥–Ω–∞–ª
            if not symbol:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                crypto_mentions = re.findall(r'#?([A-Z]{2,10})', text_clean.upper())
                symbol = crypto_mentions[0] if crypto_mentions else "TEST"
                if symbol != "TEST":
                    symbol = self.crypto_db.normalize_symbol(symbol) or f"{symbol}USDT"
                    
            if not direction:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if re.search(r'(–ó–ê–ü–ê–ú–ü–ò–õ–ò|–†–û–°–¢|UP|\+\d+%|PUMP|MOON)', text_clean.upper()):
                    direction = SignalDirection.LONG
                elif re.search(r'(DUMP|DOWN|FALL|SHORT)', text_clean.upper()):
                    direction = SignalDirection.SHORT
                else:
                    direction = SignalDirection.LONG  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
            if not entry_prices and not targets and not stop_loss:
                logger.info("üìù Creating test signal with mock prices for Ghost Test")
                entry_prices = [100.0]  # –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
                targets = [110.0, 120.0]  # –¢–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–ª–∏
                stop_loss = 90.0  # –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è SHORT
                if direction == SignalDirection.SHORT:
                    targets = [90.0, 80.0]
                    stop_loss = 110.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å–∏–≥–Ω–∞–ª–∞
            is_valid, validation_errors = self._validate_signal_logic(direction, entry_prices, targets, stop_loss)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞
            signal = ParsedSignal(
                signal_id=self.generate_signal_id(trader_id, symbol, timestamp),
                source=self.source_name,
                trader_id=trader_id,
                raw_text=text,
                timestamp=timestamp,
                symbol=symbol,
                direction=direction,
                leverage=leverage,
                entry_zone=entry_prices if len(entry_prices) > 1 else None,
                entry_single=entry_prices[0] if len(entry_prices) == 1 else None,
                targets=targets,
                tp1=targets[0] if len(targets) > 0 else None,
                tp2=targets[1] if len(targets) > 1 else None,
                tp3=targets[2] if len(targets) > 2 else None,
                stop_loss=stop_loss,
                confidence=0.1 if not is_valid else self.calculate_confidence_ghost(text_clean, symbol, direction, entry_prices, targets, stop_loss)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤ —Å–∏–≥–Ω–∞–ª
            signal.is_valid = is_valid
            signal.validation_errors = validation_errors
            
            # –ü–æ–º–µ—á–∞–µ–º –µ—Å–ª–∏ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω image parser
            if image_signal_data:
                signal.parse_method = "text_image_hybrid"
            
            signal_type = "IMAGE+TEXT" if image_data else "TEXT"
            if not is_valid:
                logger.error(f"‚ùå INVALID_SIGNAL ({signal_type}) | {symbol} {direction.value} | {'; '.join(validation_errors)}")
            else:
                logger.info(f"‚úÖ VALID_SIGNAL ({signal_type}) | {symbol} {direction.value}")
            
            logger.info(f"‚úÖ Ghost test signal parsed: {symbol} {direction.value} ({signal_type})")
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå Error parsing Ghost test signal: {e}")
            return None
    
    def _parse_image_signal_sync(self, image_data: bytes, image_format: str, caption: str = "") -> Optional[Dict[str, Any]]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        if not self.image_parser:
            return None
            
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å OCR –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
            result = {
                'symbol': None,
                'direction': None,  
                'entry_prices': [],
                'targets': [],
                'stop_loss': None,
                'leverage': None,
                'confidence': 0.5,
                'parse_method': 'image_basic',
                'has_image': True
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å caption (–ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é) - –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ—ë –¥–∞–Ω–Ω—ã–µ
            if caption and len(caption) > 10:
                caption_upper = caption.upper()
                
                # –ò—â–µ–º —Å–∏–º–≤–æ–ª –≤ –ø–æ–¥–ø–∏—Å–∏
                crypto_mentions = re.findall(r'#?([A-Z]{2,10})', caption_upper)
                if crypto_mentions:
                    result['symbol'] = crypto_mentions[0]
                
                # –ò—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–¥–ø–∏—Å–∏
                if re.search(r'\b(LONG|BUY|LONGING)\b', caption_upper):
                    result['direction'] = 'LONG'
                elif re.search(r'\b(SHORT|SELL|SHORTING)\b', caption_upper):
                    result['direction'] = 'SHORT'
                
                logger.info(f"üìù Extracted from image caption: symbol={result.get('symbol')}, direction={result.get('direction')}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Error in sync image parsing: {e}")
            return None
    
    def extract_symbol_ghost(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø–µ—á–∞—Ç–æ–∫"""
        if not text:
            return None
            
        text_upper = text.upper()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
        symbol_patterns = [
            r'#([A-Z0-9]{2,15})',  # #BTC, #ETHH, #BITCOIN
            r'\$([A-Z0-9]{2,15})',  # $BTC, $ETHH
            r'([A-Z]{2,15})(USDT|USD|USDC|BTC|ETH)\b',  # BTCUSDT, ETHUSDT
            r'([A-Z]{2,15})[/\-\s](USDT|USD|USDC)\b',  # BTC/USDT, ETH-USDT
            r'\b([A-Z]{2,15})\s+(LONG|SHORT|BUY|SELL)',  # BTC LONG
            r'(LONG|SHORT|BUY|SELL)\s+([A-Z]{2,15})',  # LONG BTC
            r'\b([A-Z]{2,15})\s+signal',  # BTC signal
            r'signal\s+([A-Z]{2,15})',  # signal BTC
            r'([A-Z]{2,15})\s+now\b',  # BTC now
            r'Testing\s+#?([A-Z]{2,15})',  # Testing #BTC
        ]
        
        found_symbols = []
        
        # –ò—â–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        for pattern in symbol_patterns:
            matches = re.finditer(pattern, text_upper)
            for match in matches:
                # –ë–µ—Ä–µ–º –ª–∏–±–æ –ø–µ—Ä–≤—É—é, –ª–∏–±–æ –≤—Ç–æ—Ä—É—é –≥—Ä—É–ø–ø—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                if len(match.groups()) >= 2:
                    # –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å –¥–≤—É–º—è –≥—Ä—É–ø–ø–∞–º–∏ –±–µ—Ä–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
                    if match.group(1) in ['LONG', 'SHORT', 'BUY', 'SELL']:
                        candidate = match.group(2)
                    else:
                        candidate = match.group(1)
                else:
                    candidate = match.group(1)
                
                if candidate and len(candidate) >= 2:
                    found_symbols.append(candidate)
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ç–µ–∫—Å—Ç–µ
        words = text_upper.split()
        for word in words:
            # –û—á–∏—â–∞–µ–º –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            clean_word = ''.join(c for c in word if c.isalnum())
            if len(clean_word) >= 2:
                found_symbols.append(clean_word)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        for raw_symbol in found_symbols:
            # –ü—Ä–æ–±—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –±–∞–∑—É —Å–∏–º–≤–æ–ª–æ–≤
            normalized = self.crypto_db.normalize_symbol(raw_symbol)
            if normalized:
                logger.info(f"üí° Symbol normalized: '{raw_symbol}' ‚Üí '{normalized}'")
                return normalized
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º —Å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
        for raw_symbol in found_symbols:
            suggestions = self.crypto_db.get_suggestions(raw_symbol, limit=1)
            if suggestions:
                suggestion = suggestions[0]
                logger.info(f"üîß Symbol suggestion: '{raw_symbol}' ‚Üí '{suggestion}' (auto-corrected)")
                return suggestion
        
        return None
    
    def extract_direction_ghost(self, text: str) -> Optional[SignalDirection]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        text_upper = text.upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞
        if re.search(r'\b(LONGING|LONG|BUY)\b', text_upper):
            return SignalDirection.LONG
        elif re.search(r'\b(SHORTING|SHORT|SELL)\b', text_upper):
            return SignalDirection.SHORT
        
        return None
    
    def extract_entry_prices_ghost(self, text: str) -> List[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—á–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏"""
        prices = []
        entry_patterns = [
            r'(?:ENTRY|Entry|entry):\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:ENTRY|Entry|entry)\s*@\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:ENTRY|Entry|entry)\s*\$?([0-9,]+\.?[0-9]*)',
        ]
        
        for pattern in entry_patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                if isinstance(match, tuple):
                    for price_str in match:
                        if price_str:
                            try:
                                clean_price_str = price_str.replace(',', '')
                                price = float(clean_price_str)
                                if price > 0:
                                    prices.append(price)
                            except (ValueError, TypeError):
                                continue
                else:
                    try:
                        clean_price_str = match.replace(',', '')
                        price = float(clean_price_str)
                        if price > 0:
                            prices.append(price)
                    except (ValueError, TypeError):
                        continue
        
        return sorted(set(prices))
    
    def extract_targets_ghost(self, text: str) -> List[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—á–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏"""
        targets = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–µ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–ø—è—Ç—ã—Ö –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Ç—ã—Å—è—á
        target_patterns = [
            r'(?:TARGET|Target|target)\s*[12345]?:?\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:TP|tp)\s*[12345]?:?\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:Targets?|TARGETS?):\s*(.+?)(?=\n|Stop|$)',  # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–ª—è–º–∏ –¥–æ Stop –∏–ª–∏ –∫–æ–Ω—Ü–∞
        ]
        
        for pattern in target_patterns:
            matches = re.findall(pattern, text, re.MULTILINE | re.DOTALL)
            for match in matches:
                # –ò—â–µ–º –≤—Å–µ —Ü–µ–Ω—ã –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–ø—è—Ç—ã—Ö
                price_parts = re.findall(r'\$?([0-9,]+\.?[0-9]*)', match)
                for price_str in price_parts:
                    try:
                        # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ float
                        clean_price_str = price_str.strip().replace(',', '')
                        price = float(clean_price_str)
                        if price > 0:
                            targets.append(price)
                    except (ValueError, TypeError):
                        continue
        
        return sorted(set(targets))
    
    def extract_stop_loss_ghost(self, text: str) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—á–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏"""
        stop_patterns = [
            r'(?:STOP|Stop|stop|SL|sl):\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:STOP|Stop|stop|SL|sl)\s*@\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:STOP|Stop|stop|SL|sl)\s*LOSS:?\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:Stop-loss|STOP-LOSS|stop-loss):\s*\$?([0-9,]+\.?[0-9]*)',  # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "Stop-loss: $110,500"
        ]
        
        for pattern in stop_patterns:
            match = re.search(pattern, text)
            if match:
                try:
                    # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ float
                    clean_price_str = match.group(1).replace(',', '')
                    return float(clean_price_str)
                except (ValueError, TypeError):
                    continue
        
        return None
    
    def extract_entry_prices_exact(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤—Ö–æ–¥–∞"""
        prices = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–µ–Ω –≤—Ö–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        entry_patterns = [
            r'(?:ENTRY|Entry|entry):\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:ENTRY|Entry|entry)\s*@\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:ENTRY|Entry|entry)\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:ENTRY|Entry|entry):\s*\$?([0-9,]+\.?[0-9]*)\s*-\s*\$?([0-9,]+\.?[0-9]*)',
        ]
        
        for pattern in entry_patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                if isinstance(match, tuple):
                    for price_str in match:
                        if price_str and price_str.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                            prices.append(price_str.strip())
                else:
                    if match and match.strip():
                        prices.append(match.strip())
        
        return list(dict.fromkeys(prices))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    
    def extract_targets_exact(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω"""
        targets = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–µ–ª–µ–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        target_patterns = [
            r'(?:TARGET|Target|target)\s*[12345]?:?\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:TP|tp)\s*[12345]?:?\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:Targets?|TARGETS?):\s*(.+?)(?=\n|Stop|$)',  # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–ª—è–º–∏
        ]
        
        for pattern in target_patterns:
            matches = re.findall(pattern, text, re.MULTILINE | re.DOTALL)
            for match in matches:
                # –ò—â–µ–º –≤—Å–µ —Ü–µ–Ω—ã –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (—Ü–∏—Ñ—Ä—ã —Å —Ç–æ—á–∫–æ–π, –Ω–æ –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π)
                price_parts = re.findall(r'\$?([0-9]+\.?[0-9]*)', match)
                for price_str in price_parts:
                    clean_str = price_str.strip()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É
                    if clean_str and len(clean_str) > 0 and re.match(r'^[0-9]+\.?[0-9]*$', clean_str):
                        targets.append(clean_str)
        
        return list(dict.fromkeys(targets))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    
    def extract_stop_loss_exact(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ—á–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        stop_patterns = [
            r'(?:STOP|Stop|stop|SL|sl):\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:STOP|Stop|stop|SL|sl)\s*@\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:STOP|Stop|stop|SL|sl)\s*LOSS:?\s*\$?([0-9,]+\.?[0-9]*)',
            r'(?:Stop-loss|STOP-LOSS|stop-loss):\s*\$?([0-9,]+\.?[0-9]*)',
        ]
        
        for pattern in stop_patterns:
            match = re.search(pattern, text)
            if match:
                clean_str = match.group(1).strip()
                if clean_str:
                    return clean_str
        
        return None
    
    def extract_leverage_ghost(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–ª–µ—á–æ"""
        leverage_patterns = [
            r'([0-9]{1,2})x',
            r'(?:LEVERAGE|Leverage|leverage):\s*([0-9]{1,2})x?',
        ]
        
        for pattern in leverage_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return f"{match.group(1)}x"
        
        return "15x"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def calculate_confidence_ghost(self, text: str, symbol: str, direction: SignalDirection, 
                                 entry_prices: List[float], targets: List[float], 
                                 stop_loss: Optional[float]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ"""
        confidence = 0.0
        
        # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if symbol:
            confidence += 0.3
        if direction:
            confidence += 0.2
        if entry_prices:
            confidence += 0.2
        if targets:
            confidence += 0.2
        if stop_loss:
            confidence += 0.1
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        if len(targets) >= 2:
            confidence += 0.1
        if len(entry_prices) >= 1:
            confidence += 0.1
        
        return min(confidence, 1.0)
    
    def _validate_signal_logic(self, direction: SignalDirection, entry_prices: List[float], targets: List[float], stop_loss: Optional[float]) -> tuple[bool, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —á–µ–∫-–ª–∏—Å—Ç—É"""
        validation_errors = []
        
        # === 1. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ===
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not entry_prices:
            validation_errors.append("TECH_ERROR: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Entry")
            
        if not targets:
            validation_errors.append("TECH_ERROR: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Targets")
            
        if not stop_loss:
            validation_errors.append("TECH_ERROR: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Stop-loss")
            
        # –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏
        if not entry_prices or not targets:
            return False, validation_errors
            
        # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω—é—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é/–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
        avg_entry = sum(entry_prices) / len(entry_prices)
        min_entry = min(entry_prices)
        max_entry = max(entry_prices)
        
        # === 2. –õ–û–ì–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ===
        
        if direction == SignalDirection.LONG:
            # –î–ª—è LONG: –≤—Å–µ TP –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ Entry (–¥–ª—è Ghost Test - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            for i, target in enumerate(targets, 1):
                if target <= avg_entry:
                    logger.warning(f"‚ö†Ô∏è LOGIC_WARNING: Target {i} ({target}) –Ω–∏–∂–µ Entry ({avg_entry:.4f}) –≤ LONG - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    
            # –î–ª—è LONG: SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ Entry (–¥–ª—è Ghost Test - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            if stop_loss and stop_loss >= avg_entry:
                logger.warning(f"‚ö†Ô∏è LOGIC_WARNING: Stop-loss ({stop_loss}) –≤—ã—à–µ Entry ({avg_entry:.4f}) –≤ LONG - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Entry —Å–æ SL (–¥–ª—è Ghost Test - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            if stop_loss and stop_loss >= min_entry:
                logger.warning(f"‚ö†Ô∏è LOGIC_WARNING: Stop-loss ({stop_loss}) –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å Entry ({min_entry}-{max_entry}) - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
        elif direction == SignalDirection.SHORT:
            # –î–ª—è SHORT: –≤—Å–µ TP –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∏–∂–µ Entry (–¥–ª—è Ghost Test - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            for i, target in enumerate(targets, 1):
                if target >= avg_entry:
                    logger.warning(f"‚ö†Ô∏è LOGIC_WARNING: Target {i} ({target}) –≤—ã—à–µ Entry ({avg_entry:.4f}) –≤ SHORT - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –î–ª—è SHORT: SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ Entry (–¥–ª—è Ghost Test - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            if stop_loss and stop_loss <= avg_entry:
                logger.warning(f"‚ö†Ô∏è LOGIC_WARNING: Stop-loss ({stop_loss}) –Ω–∏–∂–µ Entry ({avg_entry:.4f}) –≤ SHORT - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Entry —Å–æ SL (–¥–ª—è Ghost Test - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            if stop_loss and stop_loss <= max_entry:
                logger.warning(f"‚ö†Ô∏è LOGIC_WARNING: Stop-loss ({stop_loss}) –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å Entry ({min_entry}-{max_entry}) - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ TP/SL —Ä–∞–≤–Ω—ã–µ Entry (–¥–ª—è Ghost Test - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
        for i, target in enumerate(targets, 1):
            if target == avg_entry:
                logger.warning(f"‚ö†Ô∏è LOGIC_WARNING: Target {i} ({target}) —Ä–∞–≤–µ–Ω Entry - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
        if stop_loss and stop_loss == avg_entry:
            logger.warning(f"‚ö†Ô∏è LOGIC_WARNING: Stop-loss ({stop_loss}) —Ä–∞–≤–µ–Ω Entry - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ TP
        unique_targets = set(targets)
        if len(unique_targets) < len(targets):
            validation_errors.append("LOGIC_ERROR: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è Targets")
        
        # === 3. –†–´–ù–û–ß–ù–´–ï –û–®–ò–ë–ö–ò ===
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º —É–∑–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–º–µ–Ω—å—à–µ 0.1% –¥–≤–∏–∂–µ–Ω–∏—è)
        min_movement_percent = 0.001  # 0.1%
        
        for i, target in enumerate(targets, 1):
            movement = abs(target - avg_entry) / avg_entry
            if movement < min_movement_percent:
                validation_errors.append(f"MARKET_ERROR: Target {i} —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ Entry (–¥–≤–∏–∂–µ–Ω–∏–µ {movement*100:.2f}% < 0.1%)")
                
        if stop_loss:
            sl_movement = abs(stop_loss - avg_entry) / avg_entry
            if sl_movement < min_movement_percent:
                validation_errors.append(f"MARKET_ERROR: Stop-loss —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ Entry (–¥–≤–∏–∂–µ–Ω–∏–µ {sl_movement*100:.2f}% < 0.1%)")
        
        # === 4. –ü–†–û–í–ï–†–ö–ê –ù–ê –†–ê–ó–£–ú–ù–û–°–¢–¨ –¶–ï–ù ===
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ü–µ–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ —Ä–∞–∑—É–º–Ω—ã–µ
        all_prices = entry_prices + targets + ([stop_loss] if stop_loss else [])
        for price in all_prices:
            if price <= 0:
                validation_errors.append(f"TECH_ERROR: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {price}")
            elif price > 1000000:  # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞
                validation_errors.append(f"MARKET_ERROR: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞: {price}")
            elif price < 0.000001:  # –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞
                validation_errors.append(f"MARKET_ERROR: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞: {price}")
        
        is_valid = len(validation_errors) == 0
        return is_valid, validation_errors

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
if __name__ == "__main__":
    sample_signals = [
        """
        üöÄ GHOST TEST SIGNAL
        
        Symbol: BTCUSDT
        Direction: LONG
        Entry: $50000 - $49500
        Target 1: $52000
        Target 2: $54000
        Stop Loss: $48000
        Leverage: 10x
        """,
        """
        #BTC LONG 15x
        Entry: 49800
        TP1: 51500
        TP2: 53000
        SL: 48200
        """,
        """
        ETH/USDT
        BUY @ $3200
        Targets: 3350, 3500
        Stop: 3100
        """
    ]
    
    parser = GhostTestParser()
    
    print("üß™ Testing Ghost Test Parser")
    for i, signal in enumerate(sample_signals, 1):
        print(f"\n--- Test Signal {i} ---")
        print(f"Can parse: {parser.can_parse(signal)}")
        
        if parser.can_parse(signal):
            result = parser.parse_signal(signal, "ghost_test_channel")
            if result:
                print(f"‚úÖ Parsed: {result.symbol} {result.direction.value}")
                print(f"Entry: {result.entry_zone or result.entry_single}")
                print(f"Targets: {result.targets}")
                print(f"Stop Loss: {result.stop_loss}")
                print(f"Confidence: {result.confidence:.2f}")
            else:
                print("‚ùå Failed to parse")