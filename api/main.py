"""
GHOST API –¥–ª—è Render.com
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ –∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Dict, List, Optional, Any
import logging
import json
import os
import sys
from datetime import datetime
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ core –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ò–º–ø–æ—Ä—Ç—ã
try:
    from core.safe_news_integrator import get_safe_news_integrator
    from core.news_statistics_tracker import get_news_stats_tracker
except ImportError:
    print("‚ö†Ô∏è Core modules not available, using mock implementations")
    get_safe_news_integrator = None
    get_news_stats_tracker = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI app
app = FastAPI(
    title="GHOST API",
    description="API for Telegram ‚Üí Render ‚Üí Supabase ‚Üí Vercel pipeline",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class TelegramSignal(BaseModel):
    type: str
    timestamp: str
    data: Dict[str, Any]

class HealthCheck(BaseModel):
    status: str
    timestamp: str
    version: str
    services: Dict[str, str]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
app_stats = {
    'start_time': datetime.now(),
    'requests_count': 0,
    'signals_processed': 0,
    'errors_count': 0
}

# Middleware –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def count_requests(request: Request, call_next):
    app_stats['requests_count'] += 1
    response = await call_next(request)
    return response

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
async def root():
    return {
        "message": "GHOST API is running!",
        "docs": "/docs",
        "health": "/health",
        "stats": "/stats"
    }

# Health check –¥–ª—è Render
@app.get("/health", response_model=HealthCheck)
async def health_check():
    """Health check endpoint –¥–ª—è Render.com"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    services = {
        "api": "healthy",
        "supabase": "unknown",
        "news_integration": "unknown"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase
    try:
        supabase_url = os.getenv('SUPABASE_URL')
        if supabase_url:
            services["supabase"] = "configured"
        else:
            services["supabase"] = "not_configured"
    except Exception:
        services["supabase"] = "error"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    try:
        if get_safe_news_integrator:
            integrator = get_safe_news_integrator()
            services["news_integration"] = "available"
        else:
            services["news_integration"] = "not_available"
    except Exception:
        services["news_integration"] = "error"
    
    return HealthCheck(
        status="healthy",
        timestamp=datetime.now().isoformat(),
        version="1.0.0",
        services=services
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API
@app.get("/stats")
async def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã API"""
    uptime = datetime.now() - app_stats['start_time']
    
    return {
        "uptime_seconds": int(uptime.total_seconds()),
        "requests_total": app_stats['requests_count'],
        "signals_processed": app_stats['signals_processed'],
        "errors_count": app_stats['errors_count'],
        "start_time": app_stats['start_time'].isoformat(),
        "current_time": datetime.now().isoformat()
    }

# Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç Telegram Bridge
@app.post("/webhooks/telegram")
async def telegram_webhook(signal: TelegramSignal, background_tasks: BackgroundTasks):
    """
    Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç Telegram Bridge
    """
    try:
        logger.info(f"üì® Received telegram signal: {signal.type}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(process_telegram_signal, signal)
        
        app_stats['signals_processed'] += 1
        
        return {"status": "received", "message": "Signal queued for processing"}
        
    except Exception as e:
        app_stats['errors_count'] += 1
        logger.error(f"Error processing telegram webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def process_telegram_signal(signal: TelegramSignal):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ telegram —Å–∏–≥–Ω–∞–ª–∞"""
    try:
        logger.info(f"üîÑ Processing signal from {signal.data.get('trader_id', 'unknown')}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É:
        # - –û–±–æ–≥–∞—â–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏
        # - –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        # - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        # - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        # –ü—Ä–∏–º–µ—Ä –æ–±–æ–≥–∞—â–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏
        if get_safe_news_integrator and signal.data.get('symbol'):
            try:
                integrator = get_safe_news_integrator()
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–æ–≥–∞—â–µ–Ω–∏—è
                logger.debug(f"News integration available for {signal.data['symbol']}")
            except Exception as e:
                logger.warning(f"News integration error: {e}")
        
        logger.info(f"‚úÖ Signal processed successfully")
        
    except Exception as e:
        logger.error(f"Error in background signal processing: {e}")

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@app.get("/api/news-analysis")
async def news_analysis(action: str = "overview"):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    """
    try:
        if not get_safe_news_integrator:
            return {
                "status": "news_integration_disabled",
                "message": "News integration is not available",
                "data": {}
            }
        
        integrator = get_safe_news_integrator()
        stats_tracker = get_news_stats_tracker() if get_news_stats_tracker else None
        
        if action == "overview":
            return {
                "status": "success",
                "data": {
                    "total_signals_analyzed": 0,
                    "news_enhanced_signals": 0,
                    "accuracy_improvement": 0,
                    "last_update": datetime.now().isoformat()
                }
            }
        
        elif action == "statistics":
            if stats_tracker:
                stats = stats_tracker.get_current_stats()
                return {"status": "success", "data": stats}
            else:
                return {"status": "error", "message": "Statistics tracker not available"}
        
        elif action == "recent":
            return {
                "status": "success", 
                "data": {
                    "recent_news": [],
                    "count": 0
                }
            }
        
        else:
            raise HTTPException(status_code=400, detail="Invalid action parameter")
            
    except Exception as e:
        logger.error(f"Error in news analysis: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
@app.post("/api/test-parser")
async def test_parser(data: Dict[str, Any]):
    """
    API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
    """
    try:
        parser_type = data.get('parser_type', 'cryptoattack24')
        test_message = data.get('message', '')
        
        if not test_message:
            raise HTTPException(status_code=400, detail="Message is required")
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–∞
        if parser_type == 'cryptoattack24':
            try:
                sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'telegram_parsers'))
                from cryptoattack24_parser import CryptoAttack24Parser
                
                parser = CryptoAttack24Parser()
                result = parser.parse_message(test_message)
                
                if result:
                    return {
                        "status": "success",
                        "parsed": True,
                        "result": {
                            "symbol": result.symbol,
                            "action": result.action,
                            "confidence": result.confidence,
                            "price_movement": result.price_movement,
                            "exchange": result.exchange,
                            "sector": result.sector
                        }
                    }
                else:
                    return {
                        "status": "success",
                        "parsed": False,
                        "message": "Message not recognized or filtered as noise"
                    }
                    
            except ImportError as e:
                return {
                    "status": "error",
                    "message": f"Parser not available: {e}"
                }
        
        else:
            raise HTTPException(status_code=400, detail="Unsupported parser type")
            
    except Exception as e:
        logger.error(f"Error testing parser: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Endpoint –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@app.get("/api/config")
async def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return {
        "telegram_integration": bool(os.getenv('TELEGRAM_API_ID')),
        "supabase_integration": bool(os.getenv('SUPABASE_URL')),
        "news_integration": bool(get_safe_news_integrator),
        "render_deployment": True,
        "version": "1.0.0"
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    app_stats['errors_count'] += 1
    logger.error(f"Global error: {exc}")
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "message": str(exc),
            "timestamp": datetime.now().isoformat()
        }
    )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
