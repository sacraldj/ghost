#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Supabase Python –∫–ª–∏–µ–Ω—Ç
"""

import os
import asyncio
from dotenv import load_dotenv
from supabase import create_client, Client

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def create_missing_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞–ø—Ä—è–º—É—é"""
    
    # Supabase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
    
    if not supabase_url or not supabase_key:
        print("‚ùå Supabase credentials not found")
        return False
    
    print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        supabase: Client = create_client(supabase_url, supabase_key)
        
        print("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –µ—Å—Ç—å
        existing_tables = []
        
        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        required_tables = [
            'signals', 'candles_cache', 'trades', 'trade_events', 'trade_audits',
            'strategies', 'strategy_results', 'traders', 'trader_stats'
        ]
        
        for table in required_tables:
            try:
                result = supabase.table(table).select('*').limit(1).execute()
                existing_tables.append(table)
                print(f"  ‚úÖ {table} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except:
                print(f"  ‚ùå {table} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(existing_tables)}/{len(required_tables)}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ INSERT/UPDATE –æ–ø–µ—Ä–∞—Ü–∏–∏
        print("\nüîß –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        try:
            strategies_data = [
                {
                    'strategy_id': 'tp2_sl_be',
                    'name': 'TP2 & SL ‚Üí BE',
                    'description': 'Take TP2 with Stop Loss moved to Break Even after TP1',
                    'params_json': '{"tp1_share": 0.5, "tp2_share": 0.5, "move_sl_to_be": true}',
                    'version': 'v1.0',
                    'enabled': True
                },
                {
                    'strategy_id': 'scalping',
                    'name': 'Scalping',
                    'description': 'Quick trades with small profits',
                    'params_json': '{"tp1_share": 0.8, "tp2_share": 0.2, "move_sl_to_be": false}',
                    'version': 'v1.0',
                    'enabled': True
                },
                {
                    'strategy_id': 'swing',
                    'name': 'Swing Trading',
                    'description': 'Longer-term trades with bigger targets',
                    'params_json': '{"tp1_share": 0.3, "tp2_share": 0.7, "move_sl_to_be": true}',
                    'version': 'v1.0',
                    'enabled': True
                }
            ]
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if 'strategies' in existing_tables:
                print("  üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
                for strategy in strategies_data:
                    try:
                        supabase.table('strategies').upsert(strategy).execute()
                        print(f"    ‚úÖ {strategy['name']}")
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è {strategy['name']}: {e}")
            else:
                print("  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ strategies –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
        try:
            if 'trader_registry' in existing_tables:
                result = supabase.table('trader_registry').select('trader_id, name').execute()
                traders = result.data
                print(f"\nüë• –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {len(traders)}")
                for trader in traders:
                    print(f"  - {trader['trader_id']}: {trader['name']}")
            else:
                print("  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ trader_registry –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {e}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        try:
            if 'signals_parsed' in existing_tables:
                result = supabase.table('signals_parsed').select('trader_id').limit(10).execute()
                signals = result.data
                print(f"\nüì° –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º
                trader_counts = {}
                for signal in signals:
                    trader_id = signal.get('trader_id', 'unknown')
                    trader_counts[trader_id] = trader_counts.get(trader_id, 0) + 1
                
                for trader_id, count in trader_counts.items():
                    print(f"  - {trader_id}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
            else:
                print("  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ signals_parsed –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
        print(f"\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = create_missing_tables()
    if success:
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!")
