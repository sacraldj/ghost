#!/usr/bin/env python3
"""
GHOST Unified Live System Launcher
–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é unified —Å–∏—Å—Ç–µ–º—É —Å live –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import logging
import os
import sys
import signal
import threading
import time
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/ghost_unified_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class UnifiedSystemManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ unified —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.running = True
        self.live_system_task = None
        self.orchestrator_task = None
        self.http_server = None
        
    async def start_live_system(self):
        """–ó–∞–ø—É—Å–∫ live —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤—ã–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º Supabase"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ GHOST Unified Live System —Å Supabase...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å Supabase
            try:
                from signals.signal_orchestrator_with_supabase import orchestrator_with_supabase
                logger.info("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º SignalOrchestratorWithSupabase...")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
                if await orchestrator_with_supabase.test_supabase_connection():
                    logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    test_signal = "üöÄüî• #ALPINE –∑–∞–ø–∞–º–ø–∏–ª–∏ –Ω–∞ +57% —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞"
                    result = await orchestrator_with_supabase.process_raw_signal(test_signal, "cryptoattack24", "cryptoattack24")
                    
                    if result:
                        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result.symbol}")
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    stats = await orchestrator_with_supabase.get_stats()
                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {stats['signals_processed']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {stats['supabase_saves']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ Telegram
                    telegram_started = await orchestrator_with_supabase.start_telegram_listening()
                    if telegram_started:
                        logger.info("‚úÖ Telegram –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                    else:
                        logger.warning("‚ö†Ô∏è Telegram –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                    await self.run_supabase_orchestrator_loop(orchestrator_with_supabase)
                else:
                    logger.warning("‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ...")
                    raise Exception("Supabase connection failed")
                    
            except Exception as se:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å SignalOrchestratorWithSupabase: {se}")
                logger.error("üõë –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ SignalOrchestratorWithSupabase")
                raise se
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Live System: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    async def run_supabase_orchestrator_loop(self, orchestrator):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å Supabase"""
        try:
            logger.info("‚úÖ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ SignalOrchestratorWithSupabase...")
            
            # –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            while self.running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                    stats = await orchestrator.get_stats()
                    
                    if stats['signals_processed'] % 10 == 0 and stats['signals_processed'] > 0:
                        logger.info(
                            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['signals_processed']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, "
                            f"{stats['supabase_saves']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, "
                            f"{stats['success_rate']:.1f}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å"
                        )
                    
                    # –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ Telegram –∫–∞–Ω–∞–ª–∞–º–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä—ã
                    # –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Supabase
                    
                    # –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    await asyncio.sleep(60)
                    
                except asyncio.CancelledError:
                    logger.info("üõë –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω...")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                    await asyncio.sleep(10)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    async def start_orchestrator(self):
        """–ó–∞–ø—É—Å–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ GHOST Orchestrator...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            try:
                from core.ghost_orchestrator import GhostOrchestrator
                orchestrator = GhostOrchestrator()
                await orchestrator.initialize()
                await orchestrator.start()
            except ImportError as ie:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å GhostOrchestrator: {ie}")
                logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                await self.start_basic_monitoring()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Orchestrator: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    def start_health_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks (–¥–ª—è Render)"""
        try:
            class HealthHandler(BaseHTTPRequestHandler):
                def do_GET(self):
                    if self.path == '/health':
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        
                        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                        response = {
                            "status": "healthy",
                            "system": "GHOST Unified Live System",
                            "components": [
                                "SignalOrchestratorWithSupabase",
                                "UnifiedSignalParser",
                                "LiveSignalProcessor", 
                                "ChannelManager",
                                "AIFallbackParser"
                            ],
                            "timestamp": datetime.now().isoformat(),
                            "uptime_check": "OK"
                        }
                        
                        import json
                        self.wfile.write(json.dumps(response).encode())
                        
                    elif self.path == '/':
                        self.send_response(200)
                        self.send_header('Content-type', 'text/html')
                        self.end_headers()
                        
                        html = """
                        <!DOCTYPE html>
                        <html>
                        <head><title>GHOST Unified System</title></head>
                        <body>
                            <h1>üéØ GHOST Unified Live Signal System</h1>
                            <p><strong>Status:</strong> Running</p>
                            <p><strong>Components:</strong></p>
                            <ul>
                                <li>‚ö° SignalOrchestratorWithSupabase - –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Supabase</li>
                                <li>üìä UnifiedSignalParser - Multi-format signal parsing</li>
                                <li>üîÑ LiveSignalProcessor - Real-time processing</li>
                                <li>üì° ChannelManager - Source management</li>
                                <li>ü§ñ AIFallbackParser - OpenAI + Gemini</li>
                            </ul>
                            <p><strong>Health Check:</strong> <a href="/health">/health</a></p>
                            <p><strong>Timestamp:</strong> {timestamp}</p>
                        </body>
                        </html>
                        """.format(timestamp=datetime.now().isoformat())
                        
                        self.wfile.write(html.encode())
                        
                    else:
                        self.send_response(404)
                        self.send_header('Content-type', 'text/plain')
                        self.end_headers()
                        self.wfile.write(b'Not Found')
                
                def log_message(self, format, *args):
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                    if self.path != '/health':
                        logger.info(f"HTTP {self.command} {self.path}")
            
            port = int(os.environ.get('PORT', 8000))
            self.http_server = HTTPServer(('0.0.0.0', port), HealthHandler)
            logger.info(f"üåê Health check server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            server_thread = threading.Thread(target=self.http_server.serve_forever)
            server_thread.daemon = True
            server_thread.start()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Health Server: {e}")
    
    async def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üéØ GHOST UNIFIED LIVE SYSTEM MANAGER")
        logger.info("=" * 60)
        logger.info("üöÄ Unified Signal Processing with AI Fallback")
        logger.info("üì± Telegram + Discord + RSS Integration") 
        logger.info("ü§ñ OpenAI + Gemini AI Parsing")
        logger.info("üìä Real-time Statistics & Monitoring")
        logger.info("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = [
            'NEXT_PUBLIC_SUPABASE_URL', 
            'SUPABASE_SERVICE_ROLE_KEY'
        ]
        
        optional_vars = [
            'OPENAI_API_KEY',
            'GEMINI_API_KEY',
            'TELEGRAM_API_ID',
            'TELEGRAM_API_HASH'
        ]
        
        missing_required = [var for var in required_vars if not os.getenv(var)]
        missing_optional = [var for var in optional_vars if not os.getenv(var)]
        
        if missing_required:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_required}")
            logger.warning("‚ö†Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å mock –¥–∞–Ω–Ω—ã–º–∏")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            for var in missing_required:
                if not os.getenv(var):
                    os.environ[var] = f"mock-{var.lower()}"
        
        if missing_optional:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_optional}")
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
        
        try:
            # 1. –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
            self.start_health_server()
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏ live —Å–∏—Å—Ç–µ–º—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ unified —Å–∏—Å—Ç–µ–º—É
            self.live_system_task = asyncio.create_task(self.start_live_system())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–µ
            logger.info("‚è≥ –°–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render
            while self.running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á
                    if self.live_system_task.done():
                        logger.warning("‚ö†Ô∏è Live system task –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                        self.live_system_task = asyncio.create_task(self.start_live_system())
                    
                    # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(30)
                    
                except asyncio.CancelledError:
                    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã...")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    await asyncio.sleep(10)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            await self.stop_all()
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False
    
    async def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Unified System...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        if self.orchestrator_task and not self.orchestrator_task.done():
            self.orchestrator_task.cancel()
            logger.info("‚úÖ Orchestrator task –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if self.live_system_task and not self.live_system_task.done():
            self.live_system_task.cancel()
            logger.info("‚úÖ Live system task –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        if self.http_server:
            self.http_server.shutdown()
            logger.info("‚úÖ HTTP server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def start_alternative_data_collection(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            while self.running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
                    supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
                    supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
                    
                    if supabase_url and supabase_key and 'mock' not in supabase_url:
                        logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    
                    logger.info("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
                    await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: {e}")
                    await asyncio.sleep(30)
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: {e}")
    
    async def start_basic_monitoring(self):
        """–ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            logger.info("üìä –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            
            # –ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
            while self.running:
                try:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                    logger.info("üíì –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç - –±–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                    try:
                        import psutil
                        memory = psutil.virtual_memory()
                        logger.info(f"üìà –ü–∞–º—è—Ç—å: {memory.percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
                    except ImportError:
                        pass
                    
                    await asyncio.sleep(120)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                    await asyncio.sleep(60)
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    # asyncio.create_task –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–¥–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    global manager
    if manager:
        asyncio.create_task(manager.stop_all())
    sys.exit(0)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è async —Ñ—É–Ω–∫—Ü–∏—è"""
    global manager
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = UnifiedSystemManager()
    await manager.start_all()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
