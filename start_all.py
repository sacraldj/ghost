#!/usr/bin/env python3
"""
GHOST All-in-One Engine Launcher
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç—Ä–∏ –¥–≤–∏–∂–∫–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
"""

import asyncio
import logging
import os
import sys
import signal
from datetime import datetime
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ghost_all_engines.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class GhostEngineManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –¥–≤–∏–∂–∫–æ–≤"""
    
    def __init__(self):
        self.running = True
        self.threads = []
        
    def telegram_parser_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è Telegram Parser"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Parser...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'telegram_parsers'))
            
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø–∞—Ä—Å–µ—Ä
            while self.running:
                logger.info("üì± Telegram Parser: —Å–ª—É—à–∞—é –∫–∞–Ω–∞–ª @Whalesguide...")
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Telegram Parser: {e}")
    
    def signal_orchestrator_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è Signal Orchestrator"""
        try:
            logger.info("‚öôÔ∏è –ó–∞–ø—É—Å–∫ Signal Orchestrator...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'signals'))
            
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            while self.running:
                logger.info("üéØ Signal Orchestrator: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∏–≥–Ω–∞–ª—ã...")
                time.sleep(45)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Signal Orchestrator: {e}")
    
    def news_engine_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è News Engine"""
        try:
            logger.info("üì∞ –ó–∞–ø—É—Å–∫ News Engine...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'news_engine'))
            
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –¥–≤–∏–∂–æ–∫
            while self.running:
                logger.info("üìä News Engine: —Å–æ–±–∏—Ä–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ News Engine: {e}")
    
    def health_check_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è health check (–¥–ª—è Render Web Service)"""
        try:
            from http.server import HTTPServer, BaseHTTPRequestHandler
            
            class HealthHandler(BaseHTTPRequestHandler):
                def do_GET(self):
                    if self.path == '/health':
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        response = {
                            "status": "healthy",
                            "engines": ["telegram_parser", "signal_orchestrator", "news_engine"],
                            "timestamp": datetime.now().isoformat()
                        }
                        self.wfile.write(str(response).encode())
                    else:
                        self.send_response(404)
                        self.end_headers()
                        self.wfile.write(b'Not Found')
                
                def log_message(self, format, *args):
                    pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
            
            port = int(os.environ.get('PORT', 8000))
            server = HTTPServer(('0.0.0.0', port), HealthHandler)
            logger.info(f"üåê Health check server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            server.serve_forever()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Health Check: {e}")
    
    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–≤–∏–∂–∫–æ–≤"""
        logger.info("üöÄ GHOST All-in-One Engine Manager –∑–∞–ø—É—â–µ–Ω!")
        logger.info("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = ['SUPABASE_URL', 'SUPABASE_ANON_KEY']
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        else:
            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        workers = [
            threading.Thread(target=self.telegram_parser_worker, name="TelegramParser"),
            threading.Thread(target=self.signal_orchestrator_worker, name="SignalOrchestrator"), 
            threading.Thread(target=self.news_engine_worker, name="NewsEngine"),
            threading.Thread(target=self.health_check_worker, name="HealthCheck")
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        for worker in workers:
            worker.daemon = True
            worker.start()
            self.threads.append(worker)
        
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
        
        # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        try:
            while self.running:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ç–æ–∫–æ–≤
                alive_threads = [t for t in self.threads if t.is_alive()]
                logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {len(alive_threads)}/{len(self.threads)}")
                time.sleep(120)  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            self.stop_all()
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–≤–∏–∂–∫–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–≤–∏–∂–∫–æ–≤...")
        self.running = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.threads:
            if thread.is_alive():
                thread.join(timeout=5)
        
        logger.info("‚úÖ –í—Å–µ –¥–≤–∏–∂–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    global manager
    if manager:
        manager.stop_all()
    sys.exit(0)

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = GhostEngineManager()
    manager.start_all()
