#!/usr/bin/env python3
"""
GHOST Unified Live System Launcher
–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é unified —Å–∏—Å—Ç–µ–º—É —Å live –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import logging
import os
import sys
import signal
import threading
import time
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/ghost_unified_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class UnifiedSystemManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ unified —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.running = True
        self.live_system_task = None
        self.orchestrator_task = None
        self.http_server = None
        
    async def start_live_system(self):
        """–ó–∞–ø—É—Å–∫ live —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ GHOST Unified Live System...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º live —Å–∏—Å—Ç–µ–º—É
            from scripts.start_live_system import LiveSystemOrchestrator
            
            orchestrator = LiveSystemOrchestrator()
            await orchestrator.start_system()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Live System: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    async def start_orchestrator(self):
        """–ó–∞–ø—É—Å–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ GHOST Orchestrator...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            from core.ghost_orchestrator import GhostOrchestrator
            
            orchestrator = GhostOrchestrator()
            await orchestrator.initialize()
            await orchestrator.start()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Orchestrator: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    def start_health_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks (–¥–ª—è Render)"""
        try:
            class HealthHandler(BaseHTTPRequestHandler):
                def do_GET(self):
                    if self.path == '/health':
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        
                        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                        response = {
                            "status": "healthy",
                            "system": "GHOST Unified Live System",
                            "components": [
                                "UnifiedSignalParser",
                                "LiveSignalProcessor", 
                                "ChannelManager",
                                "AIFallbackParser"
                            ],
                            "timestamp": datetime.now().isoformat(),
                            "uptime_check": "OK"
                        }
                        
                        import json
                        self.wfile.write(json.dumps(response).encode())
                        
                    elif self.path == '/':
                        self.send_response(200)
                        self.send_header('Content-type', 'text/html')
                        self.end_headers()
                        
                        html = """
                        <!DOCTYPE html>
                        <html>
                        <head><title>GHOST Unified System</title></head>
                        <body>
                            <h1>üéØ GHOST Unified Live Signal System</h1>
                            <p><strong>Status:</strong> Running</p>
                            <p><strong>Components:</strong></p>
                            <ul>
                                <li>üìä UnifiedSignalParser - Multi-format signal parsing</li>
                                <li>üîÑ LiveSignalProcessor - Real-time processing</li>
                                <li>üì° ChannelManager - Source management</li>
                                <li>ü§ñ AIFallbackParser - OpenAI + Gemini</li>
                            </ul>
                            <p><strong>Health Check:</strong> <a href="/health">/health</a></p>
                            <p><strong>Timestamp:</strong> {timestamp}</p>
                        </body>
                        </html>
                        """.format(timestamp=datetime.now().isoformat())
                        
                        self.wfile.write(html.encode())
                        
                    else:
                        self.send_response(404)
                        self.send_header('Content-type', 'text/plain')
                        self.end_headers()
                        self.wfile.write(b'Not Found')
                
                def log_message(self, format, *args):
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                    if self.path != '/health':
                        logger.info(f"HTTP {self.command} {self.path}")
            
            port = int(os.environ.get('PORT', 8000))
            self.http_server = HTTPServer(('0.0.0.0', port), HealthHandler)
            logger.info(f"üåê Health check server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            server_thread = threading.Thread(target=self.http_server.serve_forever)
            server_thread.daemon = True
            server_thread.start()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Health Server: {e}")
    
    async def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üéØ GHOST UNIFIED LIVE SYSTEM MANAGER")
        logger.info("=" * 60)
        logger.info("üöÄ Unified Signal Processing with AI Fallback")
        logger.info("üì± Telegram + Discord + RSS Integration") 
        logger.info("ü§ñ OpenAI + Gemini AI Parsing")
        logger.info("üìä Real-time Statistics & Monitoring")
        logger.info("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = [
            'NEXT_PUBLIC_SUPABASE_URL', 
            'SUPABASE_SERVICE_ROLE_KEY'
        ]
        
        optional_vars = [
            'OPENAI_API_KEY',
            'GEMINI_API_KEY',
            'TELEGRAM_API_ID',
            'TELEGRAM_API_HASH'
        ]
        
        missing_required = [var for var in required_vars if not os.getenv(var)]
        missing_optional = [var for var in optional_vars if not os.getenv(var)]
        
        if missing_required:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_required}")
            logger.warning("‚ö†Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å mock –¥–∞–Ω–Ω—ã–º–∏")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            for var in missing_required:
                if not os.getenv(var):
                    os.environ[var] = f"mock-{var.lower()}"
        
        if missing_optional:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_optional}")
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
        
        try:
            # 1. –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
            self.start_health_server()
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏ live —Å–∏—Å—Ç–µ–º—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            self.orchestrator_task = asyncio.create_task(self.start_orchestrator())
            self.live_system_task = asyncio.create_task(self.start_live_system())
            
            # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
            await asyncio.gather(
                self.orchestrator_task,
                self.live_system_task,
                return_exceptions=True
            )
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            await self.stop_all()
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False
    
    async def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Unified System...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        if self.orchestrator_task and not self.orchestrator_task.done():
            self.orchestrator_task.cancel()
            logger.info("‚úÖ Orchestrator task –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if self.live_system_task and not self.live_system_task.done():
            self.live_system_task.cancel()
            logger.info("‚úÖ Live system task –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        if self.http_server:
            self.http_server.shutdown()
            logger.info("‚úÖ HTTP server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    # asyncio.create_task –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–¥–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    global manager
    if manager:
        asyncio.create_task(manager.stop_all())
    sys.exit(0)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è async —Ñ—É–Ω–∫—Ü–∏—è"""
    global manager
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = UnifiedSystemManager()
    await manager.start_all()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
