#!/usr/bin/env python3
"""
–ë–ï–ó–û–ü–ê–°–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –î–∞—Ä—ç–Ω–∞
–¢–æ–ª—å–∫–æ —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import paramiko
import sqlite3
import json
import os
from datetime import datetime
import tempfile

def safe_download_db():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–∫–∞—á–∞—Ç—å –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    
    print("üîê –ë–ï–ó–û–ü–ê–°–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –î–∞—Ä—ç–Ω–∞...")
    print("üìã –î–µ–π—Å—Ç–≤–∏—è:")
    print("  ‚úÖ –°–∫–∞—á–∞—Ç—å –ö–û–ü–ò–Æ ghost.db")
    print("  ‚ùå –ù–ï –∏–∑–º–µ–Ω—è—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    print("  ‚ùå –ù–ï –≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã")
    
    # SSH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    hostname = "138.199.226.247"
    username = "root"
    remote_db_path = "/root/ghost_system_final/ghost_system_final_146/ghost.db"
    
    try:
        # –°–æ–∑–¥–∞–µ–º SSH –∫–ª–∏–µ–Ω—Ç
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {hostname}...")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        password = os.getenv("DAREN_SSH_PASSWORD")
        if not password:
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å SSH: ")
        
        ssh.connect(hostname, username=username, password=password, timeout=10)
        
        print("‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        stdin, stdout, stderr = ssh.exec_command(f"ls -la {remote_db_path}")
        output = stdout.read().decode()
        
        if "ghost.db" not in output:
            print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {remote_db_path}")
            return False
            
        print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {remote_db_path}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        local_db_path = "./ghost_server_live.db"
        
        print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        sftp = ssh.open_sftp()
        sftp.get(remote_db_path, local_db_path)
        sftp.close()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞—á–∞–Ω–∞: {local_db_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with sqlite3.connect(local_db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM trades")
            trade_count = cursor.fetchone()[0]
            
            print(f"üìà –ù–∞–π–¥–µ–Ω–æ {trade_count} —Ç—Ä–µ–π–¥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–µ–π–¥–∞
            cursor.execute("""
                SELECT symbol, side, entry_price, opened_at 
                FROM trades 
                ORDER BY opened_at DESC 
                LIMIT 3
            """)
            recent_trades = cursor.fetchall()
            
            print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–π–¥—ã:")
            for trade in recent_trades:
                symbol, side, price, time = trade
                print(f"  ‚Ä¢ {symbol} {side} @ {price} ({time})")
        
        ssh.close()
        return True
        
    except paramiko.AuthenticationException:
        print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SSH")
        return False
    except paramiko.SSHException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SSH: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def sync_to_supabase():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Supabase"""
    print("\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Supabase...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –≥–æ—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    os.environ["GHOST_DB_PATH"] = "./ghost_server_live.db"
    os.environ["SYNC_LOOP"] = "0"  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    
    try:
        import subprocess
        result = subprocess.run([
            "python3", "news_engine/trades_supabase_sync.py"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Supabase —É—Å–ø–µ—à–Ω–∞!")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ GHOST - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –î–∞—Ä—ç–Ω–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
    if not os.getenv("NEXT_PUBLIC_SUPABASE_URL"):
        print("‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ .env.local —Å –∫–ª—é—á–∞–º–∏ Supabase")
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if safe_download_db():
        print("\n" + "=" * 60)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Supabase
        sync_to_supabase()
        
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–µ")
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/dashboard")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

if __name__ == "__main__":
    main()
