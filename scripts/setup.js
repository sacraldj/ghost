#!/usr/bin/env node

/**
 * GHOST Trading Platform - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
 * –ó–∞–ø—É—Å–∫: node scripts/setup.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ GHOST Trading Platform - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç');
console.log('==========================================');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Node.js
try {
  const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ Node.js –Ω–∞–π–¥–µ–Ω: ${nodeVersion}`);
} catch (error) {
  console.log('‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 18+');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ npm
try {
  const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ npm –Ω–∞–π–¥–µ–Ω: ${npmVersion}`);
} catch (error) {
  console.log('‚ùå npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(1);
}

console.log('‚úÖ Node.js –∏ npm –Ω–∞–π–¥–µ–Ω—ã');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
console.log('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
try {
  execSync('npm install', { stdio: 'inherit' });
  console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º .env.local –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const envPath = path.join(process.cwd(), '.env.local');
if (!fs.existsSync(envPath)) {
  console.log('üìù –°–æ–∑–¥–∞–µ–º .env.local...');
  try {
    const envExample = fs.readFileSync(path.join(process.cwd(), 'env.example'), 'utf8');
    fs.writeFileSync(envPath, envExample);
    console.log('‚úÖ .env.local —Å–æ–∑–¥–∞–Ω');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env.local');
    process.exit(1);
  }
} else {
  console.log('‚úÖ .env.local —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
console.log('üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç...');
try {
  execSync('npm run db:generate', { stdio: 'inherit' });
  console.log('‚úÖ Prisma –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma –∫–ª–∏–µ–Ω—Ç–∞');
  process.exit(1);
}

console.log('');
console.log('üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ü–æ–ª—É—á–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Supabase Dashboard');
console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ DATABASE_URL –≤ .env.local');
console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run init-supabase');
console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
console.log('');
console.log('üîó Supabase Dashboard: https://supabase.com/dashboard/project/qjdpckwqozsbpskwplfl');
console.log('üîó Database URL: postgresql://postgres:[PASSWORD]@db.qjdpckwqozsbpskwplfl.supabase.co:5432/postgres');
console.log('');
console.log('üöÄ –ì–æ—Ç–æ–≤–æ! GHOST –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase!'); 