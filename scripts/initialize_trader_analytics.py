#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
‚ö†Ô∏è –ù–ï —Ç—Ä–æ–≥–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
‚úÖ –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
"""

import os
import sys
import asyncio
from supabase import create_client, Client
from datetime import datetime, timedelta
import json
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class TraderAnalyticsInitializer:
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
        supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY') or os.getenv('SUPABASE_SECRET_KEY')
        
        if not supabase_url or not supabase_key:
            raise ValueError("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY")
        
        self.supabase: Client = create_client(supabase_url, supabase_key)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase: {supabase_url}")
    
    def create_tables(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)"""
        print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        
        try:
            # –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
            sql_file = os.path.join(os.path.dirname(__file__), '..', 'database', 'add_trader_analytics.sql')
            
            if not os.path.exists(sql_file):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sql_file}")
                return False
            
            with open(sql_file, 'r', encoding='utf-8') as f:
                sql_content = f.read()
            
            print("‚ö†Ô∏è  –í–ê–ñ–ù–û: SQL —Å–∫—Ä–∏–ø—Ç –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ Supabase SQL Editor:")
            print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://supabase.com/dashboard")
            print("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor")
            print(f"   3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {sql_file}")
            print("\nüìÑ SQL –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            print("=" * 60)
            print(sql_content[:500] + "...")
            print("=" * 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
            return self._check_tables_exist()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    def _check_tables_exist(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        required_tables = [
            'trader_analytics',
            'signal_errors', 
            'trader_time_stats',
            'trader_behavior_flags'
        ]
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
        
        for table_name in required_tables:
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ
                result = self.supabase.table(table_name).select("*").limit(1).execute()
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name}: –Ω–∞–π–¥–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ({e})")
                return False
        
        return True
    
    def calculate_basic_analytics(self) -> bool:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"""
        print("\nüìä –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            traders_result = self.supabase.table('trader_registry').select('*').eq('is_active', True).execute()
            traders = traders_result.data
            
            if not traders:
                print("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return True
            
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(traders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")
            
            for trader in traders:
                trader_id = trader['trader_id']
                print(f"\nüìà –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞: {trader_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Ç—Ä–µ–π–¥–µ—Ä–∞ –∏–∑ v_trades
                signals_result = self.supabase.table('v_trades').select('*').eq('source', trader_id).execute()
                signals = signals_result.data
                
                if not signals:
                    print(f"   ‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –¥–ª—è {trader_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                analytics = self._calculate_trader_metrics(signals)
                analytics['trader_id'] = trader_id
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ trader_analytics (upsert)
                self.supabase.table('trader_analytics').upsert(analytics, on_conflict='trader_id').execute()
                
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ behavior_flags
                behavior_flags = {
                    'trader_id': trader_id,
                    'has_duplicates': False,
                    'has_contradictions': False,
                    'suspected_copy_paste': False
                }
                self.supabase.table('trader_behavior_flags').upsert(behavior_flags, on_conflict='trader_id').execute()
                
                print(f"   ‚úÖ Trust Index: {analytics['trust_index']:.1f}, Grade: {analytics['grade']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
            self._update_rankings()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return False
    
    def _calculate_trader_metrics(self, signals: list) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        total_signals = len(signals)
        
        if total_signals == 0:
            return {
                'total_signals': 0,
                'trust_index': 50,
                'grade': 'C',
                'risk_score': 50
            }
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        executed_signals = [s for s in signals if s.get('status') == 'sim_open']
        executed_count = len(executed_signals)
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–±–µ–¥ (TP1 –∏–ª–∏ TP2)
        wins = [s for s in executed_signals if s.get('tp1_hit') or s.get('tp2_hit')]
        win_count = len(wins)
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_pnl = sum(float(s.get('pnl_gross', 0) or 0) for s in executed_signals)
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        winrate = (win_count / executed_count * 100) if executed_count > 0 else 0
        avg_roi = (total_pnl / executed_count) if executed_count > 0 else 0
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç Trust Index (0-100)
        trust_index = min(100, max(0,
            winrate * 0.4 +                          # 40% winrate
            min(100, max(0, avg_roi + 50)) * 0.3 +   # 30% ROI (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
            min(100, total_signals) * 0.2 +          # 20% activity
            10                                        # 10% base
        ))
        
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º Grade
        if trust_index >= 80:
            grade = 'A'
        elif trust_index >= 60:
            grade = 'B' 
        elif trust_index >= 40:
            grade = 'C'
        else:
            grade = 'D'
        
        # Risk Score (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
        risk_score = max(0, min(100, 100 - trust_index))
        
        return {
            'total_signals': total_signals,
            'valid_signals': total_signals,  # –ø–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–º–∏
            'executed_signals': executed_count,
            'winrate': round(winrate, 2),
            'tp1_rate': 0,  # TODO: –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            'tp2_rate': 0,  # TODO: –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            'sl_rate': 0,   # TODO: –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            'total_pnl': round(total_pnl, 2),
            'avg_roi': round(avg_roi, 2),
            'best_roi': 0,  # TODO: —Ä–∞—Å—á–µ—Ç
            'worst_roi': 0, # TODO: —Ä–∞—Å—á–µ—Ç
            'avg_rrr': 0,   # TODO: —Ä–∞—Å—á–µ—Ç
            'max_drawdown': 0, # TODO: —Ä–∞—Å—á–µ—Ç
            'consistency_score': round(trust_index * 0.8, 2),
            'trust_index': round(trust_index, 2),
            'grade': grade,
            'risk_score': round(risk_score, 2),
            'overall_rank': 999,  # –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ _update_rankings
            'rank_change': 0
        }
    
    def _update_rankings(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"""
        print("\nüèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ trust_index
            result = self.supabase.table('trader_analytics').select('trader_id, trust_index').order('trust_index', desc=True).execute()
            analytics = result.data
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
            for i, trader in enumerate(analytics):
                new_rank = i + 1
                self.supabase.table('trader_analytics').update({
                    'overall_rank': new_rank
                }).eq('trader_id', trader['trader_id']).execute()
            
            print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {len(analytics)} —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ API endpoints"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
        
        # –¢–µ—Å—Ç –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Next.js —Å–µ—Ä–≤–µ—Ä
        print("‚ö†Ô∏è –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   npm run dev")
        print("   –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000/test-table")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")
        print("=" * 50)
        
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        if not self.create_tables():
            print("\n‚ùå –û–°–¢–ê–ù–û–í–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase")
            return False
        
        # –®–∞–≥ 2: –†–∞—Å—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏  
        if not self.calculate_basic_analytics():
            print("\n‚ùå –û–°–¢–ê–ù–û–í–ö–ê: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            return False
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç API
        self.test_api_endpoints()
        
        print("\nüéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev")
        print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000/test-table")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ Trust Index –∏ Grade")
        print("   4. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ summary –±–ª–æ–∫ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")
        
        return True

def main():
    try:
        initializer = TraderAnalyticsInitializer()
        success = initializer.run()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
