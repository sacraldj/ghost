#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import os
import sys
import json
import random
from datetime import datetime, timedelta
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ core –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

try:
    from supabase import create_client, Client
except ImportError:
    print("‚ùå Supabase client not installed. Run: pip install supabase")
    sys.exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY') or os.getenv('SUPABASE_ANON_KEY')

if not SUPABASE_URL or not SUPABASE_KEY:
    print("‚ùå Supabase credentials not found. Set SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
CRYPTO_SYMBOLS = [
    'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'DOTUSDT', 'XRPUSDT',
    'LTCUSDT', 'LINKUSDT', 'BCHUSDT', 'XLMUSDT', 'UNIUSDT', 'VETUSDT',
    'FILUSDT', 'TRXUSDT', 'EOSUSDT', 'XMRUSDT', 'AAVEUSDT', 'ATOMUSDT',
    'MKRUSDT', 'COMPUSDT', 'YFIUSDT', 'SUSHIUSDT', 'SNXUSDT', 'CRVUSDT',
    'ALPINEUSDT', 'DOGEUSDT', 'SHIBUSDT', 'AVAXUSDT', 'MATICUSDT', 'SOLUSDT'
]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
TRADERS = [
    {
        'trader_id': 'cryptoattack24',
        'name': '–ö—Ä–∏–ø—Ç–æ–ê—Ç–∞–∫–∞ 24',
        'source_handle': '@cryptoattack24',
        'style': 'news_based',  # –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–æ–≤–æ—Å—Ç—è—Ö
        'accuracy': 0.72,
        'avg_confidence': 0.85
    },
    {
        'trader_id': 'whales_guide_main',
        'name': 'Whales Crypto Guide',
        'source_handle': '@Whalesguide',
        'style': 'technical',
        'accuracy': 0.68,
        'avg_confidence': 0.78
    },
    {
        'trader_id': 'crypto_hub_vip',
        'name': 'Crypto Hub VIP',
        'source_handle': '@crypto_hub_vip',
        'style': 'scalping',
        'accuracy': 0.75,
        'avg_confidence': 0.82
    },
    {
        'trader_id': '2trade_slivaem',
        'name': '2Trade - slivaeminfo',
        'source_handle': '@2trade_slivaem',
        'style': 'swing',
        'accuracy': 0.65,
        'avg_confidence': 0.70
    }
]

def generate_signal_text(symbol: str, side: str, trader_style: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞"""
    
    if trader_style == 'news_based':
        templates = [
            f"üöÄüî• #{symbol.replace('USDT', '')} –∑–∞–ø–∞–º–ø–∏–ª–∏ –Ω–∞ +{random.randint(15, 80)}% —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞. –ó–∞–∫—Ä–µ–ø–∏–ª—Å—è –≤ —Ç–æ–ø–µ –ø–æ –ø–æ–∫—É–ø–∫–∞–º –Ω–∞ Binance.",
            f"üìà {symbol.replace('USDT', '')} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –ø–æ—Å–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫ –ø–æ–∫—É–ø–∫–µ.",
            f"‚ö° –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞—á–∞–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å {symbol.replace('USDT', '')} –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–∏–ª–µ—Ç–æ–≤. –û–∂–∏–¥–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–π —Ä–æ—Å—Ç."
        ]
    elif trader_style == 'technical':
        templates = [
            f"üìä {symbol} LONG\nEntry: {random.uniform(0.1, 100):.4f}\nTP1: {random.uniform(0.1, 100):.4f}\nTP2: {random.uniform(0.1, 100):.4f}\nSL: {random.uniform(0.1, 100):.4f}",
            f"üéØ –°–∏–≥–Ω–∞–ª –Ω–∞ {symbol}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'LONG' if side == 'Buy' else 'SHORT'}\n–í—Ö–æ–¥: {random.uniform(0.1, 100):.4f}\n–¶–µ–ª–∏: {random.uniform(0.1, 100):.4f}, {random.uniform(0.1, 100):.4f}",
        ]
    elif trader_style == 'scalping':
        templates = [
            f"‚ö° –°–ö–ê–õ–¨–ü–ò–ù–ì {symbol}\nüü¢ LONG –æ—Ç {random.uniform(0.1, 100):.4f}\nüéØ TP: {random.uniform(0.1, 100):.4f}\nüõë SL: {random.uniform(0.1, 100):.4f}",
            f"üí® –ë—ã—Å—Ç—Ä—ã–π —Å–∏–≥–Ω–∞–ª {symbol}\n–í—Ö–æ–¥: {random.uniform(0.1, 100):.4f}\n–í—ã—Ö–æ–¥: {random.uniform(0.1, 100):.4f}",
        ]
    else:  # swing
        templates = [
            f"üìà –°–í–ò–ù–ì {symbol}\n–í—Ö–æ–¥: {random.uniform(0.1, 100):.4f}\n–¶–µ–ª—å 1: {random.uniform(0.1, 100):.4f}\n–¶–µ–ª—å 2: {random.uniform(0.1, 100):.4f}\n–°—Ç–æ–ø: {random.uniform(0.1, 100):.4f}",
            f"üéØ –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª {symbol}\n–ü–æ–∫—É–ø–∫–∞ –æ—Ç {random.uniform(0.1, 100):.4f}\n–•–æ–ª–¥ –¥–æ {random.uniform(0.1, 100):.4f}",
        ]
    
    return random.choice(templates)

def generate_realistic_signals(trader: Dict, days_back: int = 30, signals_per_day: float = 2.5) -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞"""
    
    signals = []
    total_signals = int(days_back * signals_per_day * random.uniform(0.7, 1.3))
    
    for i in range(total_signals):
        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
        random_time = datetime.now() - timedelta(
            days=random.uniform(0, days_back),
            hours=random.uniform(0, 24),
            minutes=random.uniform(0, 60)
        )
        
        symbol = random.choice(CRYPTO_SYMBOLS)
        side = random.choice(['Buy', 'Sell'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        entry_price = random.uniform(0.1, 1000)
        tp1_price = entry_price * (1.02 if side == 'Buy' else 0.98)
        tp2_price = entry_price * (1.05 if side == 'Buy' else 0.95)
        sl_price = entry_price * (0.98 if side == 'Buy' else 1.02)
        
        signal_text = generate_signal_text(symbol, side, trader['style'])
        
        signal = {
            'id': f"{trader['trader_id']}_{int(random_time.timestamp() * 1000)}_{i}",
            'received_at': int(random_time.timestamp() * 1000),
            'source_name': trader['trader_id'],
            'raw_text': signal_text,
            'symbol_raw': symbol,
            'symbol': symbol,
            'side': side,
            'entry_low': entry_price * 0.99,
            'entry_high': entry_price * 1.01,
            'targets_json': json.dumps([tp1_price, tp2_price]),
            'stoploss': sl_price,
            'parse_version': '1.0',
            'parsed_ok': 1 if random.random() < trader['accuracy'] else 0
        }
        
        signals.append(signal)
    
    return signals

def generate_signal_outcomes(signals: List[Dict], trader: Dict) -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    outcomes = []
    
    for signal in signals:
        if signal['parsed_ok'] == 0:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞
        success_rate = trader['accuracy']
        
        if random.random() < success_rate:
            # –£—Å–ø–µ—à–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if random.random() < 0.6:  # 60% TP1
                final_result = 'TP1_ONLY'
                pnl_sim = random.uniform(50, 150)
            else:  # 40% TP2
                final_result = 'TP2_FULL'
                pnl_sim = random.uniform(100, 300)
        else:
            # –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            final_result = 'SL_HIT'
            pnl_sim = random.uniform(-120, -50)
        
        outcome = {
            'signal_id': signal['id'],
            'trader_id': signal['source_name'],
            'final_result': final_result,
            'pnl_sim': pnl_sim,
            'roi_sim': (pnl_sim / 100) * 100,  # ROI –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            'duration_to_tp1_min': random.randint(5, 120) if 'TP' in final_result else None,
            'duration_to_tp2_min': random.randint(30, 300) if final_result == 'TP2_FULL' else None,
            'max_favorable': random.uniform(0, 200),
            'max_adverse': random.uniform(-100, 0),
            'calculated_at': datetime.now().isoformat()
        }
        
        outcomes.append(outcome)
    
    return outcomes

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏...")
    
    try:
        # 1. –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
        print("\nüìä –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–π–¥–µ—Ä–æ–≤...")
        for trader in TRADERS:
            try:
                result = supabase.table('trader_registry').upsert({
                    'trader_id': trader['trader_id'],
                    'name': trader['name'],
                    'source_type': 'telegram',
                    'source_handle': trader['source_handle'],
                    'mode': 'observe',
                    'is_active': True,
                    'created_at': datetime.now().isoformat(),
                    'updated_at': datetime.now().isoformat()
                }).execute()
                
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–π–¥–µ—Ä: {trader['name']}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞ {trader['name']}: {e}")
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        print("\nüìà –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã...")
        all_signals = []
        all_outcomes = []
        
        for trader in TRADERS:
            print(f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {trader['name']}...")
            
            signals = generate_realistic_signals(trader, days_back=30)
            outcomes = generate_signal_outcomes(signals, trader)
            
            all_signals.extend(signals)
            all_outcomes.extend(outcomes)
            
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤, {len(outcomes)} –∏—Å—Ö–æ–¥–æ–≤")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—ã—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ 100
            batch_size = 100
            for i in range(0, len(all_signals), batch_size):
                batch = all_signals[i:i + batch_size]
                
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ signals (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞)
                try:
                    result = supabase.table('signals').upsert(batch).execute()
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–∞—Ç—á {i//batch_size + 1} –≤ —Ç–∞–±–ª–∏—Ü—É signals")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ signals: {e}")
                    
                    # Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤ signals_raw (—Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞)
                    try:
                        raw_signals = []
                        for signal in batch:
                            raw_signals.append({
                                'signal_id': signal['id'],
                                'trader_id': signal['source_name'],
                                'raw_text': signal['raw_text'],
                                'posted_at': datetime.fromtimestamp(signal['received_at'] / 1000).isoformat(),
                                'source_type': 'telegram',
                                'channel_id': f"@{signal['source_name']}"
                            })
                        
                        result = supabase.table('signals_raw').upsert(raw_signals).execute()
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–∞—Ç—á {i//batch_size + 1} –≤ —Ç–∞–±–ª–∏—Ü—É signals_raw")
                    except Exception as e2:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ signals_raw: {e2}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥—ã
        print(f"\nüéØ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(all_outcomes)} –∏—Å—Ö–æ–¥–æ–≤...")
        try:
            batch_size = 100
            for i in range(0, len(all_outcomes), batch_size):
                batch = all_outcomes[i:i + batch_size]
                result = supabase.table('signal_outcomes').upsert(batch).execute()
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–∞—Ç—á –∏—Å—Ö–æ–¥–æ–≤ {i//batch_size + 1}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–æ–≤: {e}")
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ:")
        print(f"   üë• –¢—Ä–µ–π–¥–µ—Ä–æ–≤: {len(TRADERS)}")
        print(f"   üìä –°–∏–≥–Ω–∞–ª–æ–≤: {len(all_signals)}")
        print(f"   üéØ –ò—Å—Ö–æ–¥–æ–≤: {len(all_outcomes)}")
        print(f"\nüîó –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥: http://localhost:3000")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
