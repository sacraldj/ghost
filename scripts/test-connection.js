#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...')
console.log('================================')

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
console.log(`URL: ${supabaseUrl ? '‚úÖ' : '‚ùå'} ${supabaseUrl || '–ù–ï –ù–ê–ô–î–ï–ù'}`)
console.log(`Anon Key: ${supabaseAnonKey ? '‚úÖ' : '‚ùå'} ${supabaseAnonKey ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`)
console.log(`Service Key: ${supabaseServiceKey ? '‚úÖ' : '‚ùå'} ${supabaseServiceKey ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`)

if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {
  console.log('\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!')
  console.log('üìù –î–æ–±–∞–≤—å—Ç–µ –≤ .env.local:')
  console.log('NEXT_PUBLIC_SUPABASE_URL="your-url"')
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY="your-anon-key"')
  console.log('SUPABASE_SERVICE_ROLE_KEY="your-service-key"')
  process.exit(1)
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å anon key
console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å anon key...')
const supabaseAnon = createClient(supabaseUrl, supabaseAnonKey)

async function testAnonConnection() {
  try {
    const { data, error } = await supabaseAnon.from('profiles').select('count').limit(1)
    
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ anon –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`)
      return false
    }
    
    console.log('‚úÖ Anon –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
    return true
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ anon –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`)
    return false
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å service key
console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å service key...')
const supabaseService = createClient(supabaseUrl, supabaseServiceKey)

async function testServiceConnection() {
  try {
    const { data, error } = await supabaseService.from('profiles').select('count').limit(1)
    
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ service –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`)
      return false
    }
    
    console.log('‚úÖ Service –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
    return true
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ service –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`)
    return false
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
async function checkTables() {
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...')
  
  const tables = [
    'profiles',
    'trades',
    'signals',
    'news_events',
    'ai_analysis',
    'portfolios',
    'strategies',
    'notifications',
    'chat_history'
  ]
  
  let foundTables = 0
  
  for (const table of tables) {
    try {
      const { data, error } = await supabaseService.from(table).select('*').limit(1)
      
      if (error) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: –ù–ï –Ω–∞–π–¥–µ–Ω–∞`)
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: –Ω–∞–π–¥–µ–Ω–∞`)
        foundTables++
      }
    } catch (error) {
      console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`)
    }
  }
  
  console.log(`\nüìà –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${foundTables}/${tables.length}`)
  
  if (foundTables === 0) {
    console.log('\n‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.')
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run db:migrate:supabase')
  }
  
  return foundTables > 0
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const anonOk = await testAnonConnection()
  const serviceOk = await testServiceConnection()
  const tablesOk = await checkTables()
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
  console.log(`Anon –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${anonOk ? '‚úÖ' : '‚ùå'}`)
  console.log(`Service –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${serviceOk ? '‚úÖ' : '‚ùå'}`)
  console.log(`–¢–∞–±–ª–∏—Ü—ã: ${tablesOk ? '‚úÖ' : '‚ùå'}`)
  
  if (anonOk && serviceOk && tablesOk) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.')
    console.log('üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev')
  } else {
    console.log('\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Supabase.')
    console.log('üìö –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: SUPABASE_SETUP.md')
    
    if (!anonOk || !serviceOk) {
      console.log('üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –≤ .env.local')
    }
    
    if (!tablesOk) {
      console.log('üìä –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npm run db:migrate:supabase')
    }
  }
}

main().catch(console.error)
