#!/usr/bin/env node

/**
 * GHOST | Simple Supabase Setup
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase
 */

import { createClient } from '@supabase/supabase-js'

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
  console.log('')
  console.log('üìã –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:')
  console.log('')
  console.log('NEXT_PUBLIC_SUPABASE_URL="https://your-project.supabase.co"')
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY="your-anon-key"')
  console.log('SUPABASE_SERVICE_ROLE_KEY="your-service-role-key"')
  console.log('')
  console.log('üîó –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á–∏ –Ω–∞: https://supabase.com')
  console.log('')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function setupSupabase() {
  console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase –¥–ª—è GHOST...')
  console.log('üìã URL:', supabaseUrl)

  try {
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...')

    // 1. –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã profiles...')
    await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS profiles (
          id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
          email TEXT UNIQUE,
          name TEXT,
          avatar TEXT,
          role TEXT DEFAULT 'USER',
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    })

    // 2. –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã trades...')
    await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS trades (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
          symbol TEXT NOT NULL,
          side TEXT NOT NULL CHECK (side IN ('LONG', 'SHORT')),
          status TEXT DEFAULT 'OPEN',
          entry_price DECIMAL(20,8) NOT NULL,
          exit_price DECIMAL(20,8),
          quantity DECIMAL(20,8) NOT NULL,
          leverage INTEGER NOT NULL,
          margin_used DECIMAL(20,8) NOT NULL,
          pnl_net DECIMAL(20,8),
          roi_percent DECIMAL(10,4),
          opened_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          closed_at TIMESTAMP WITH TIME ZONE
        );
      `
    })

    // 3. –¢–∞–±–ª–∏—Ü–∞ —á–∞—Ç–æ–≤
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã chat_history...')
    await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS chat_history (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
          message TEXT NOT NULL,
          response TEXT NOT NULL,
          context JSONB,
          timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    })

    // 4. –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã news_events...')
    await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS news_events (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          cluster TEXT NOT NULL,
          title TEXT NOT NULL,
          content TEXT,
          source TEXT NOT NULL,
          published_at TIMESTAMP WITH TIME ZONE NOT NULL,
          price_change_1h DECIMAL(10,4),
          reaction_type TEXT,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    })

    // 5. –¢–∞–±–ª–∏—Ü–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ai_analysis...')
    await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS ai_analysis (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          news_event_id UUID REFERENCES news_events(id),
          gpt_analysis JSONB,
          gpt_confidence DECIMAL(3,2),
          gpt_reasoning TEXT,
          final_verdict TEXT,
          confidence DECIMAL(3,2),
          reasoning TEXT,
          patterns TEXT[],
          similar_cases INTEGER DEFAULT 0,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    })

    // –í–∫–ª—é—á–µ–Ω–∏–µ RLS
    console.log('üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...')
    await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
        ALTER TABLE trades ENABLE ROW LEVEL SECURITY;
        ALTER TABLE chat_history ENABLE ROW LEVEL SECURITY;
        ALTER TABLE news_events ENABLE ROW LEVEL SECURITY;
        ALTER TABLE ai_analysis ENABLE ROW LEVEL SECURITY;
      `
    })

    // –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...')
    await supabase.rpc('exec_sql', {
      sql: `
        CREATE POLICY "Users can view own profile" ON profiles
          FOR SELECT USING (auth.uid() = id);

        CREATE POLICY "Users can view own trades" ON trades
          FOR SELECT USING (auth.uid() = user_id);

        CREATE POLICY "Users can view own chat history" ON chat_history
          FOR SELECT USING (auth.uid() = user_id);

        CREATE POLICY "All users can view news events" ON news_events
          FOR SELECT USING (true);

        CREATE POLICY "All users can view AI analysis" ON ai_analysis
          FOR SELECT USING (true);
      `
    })

    console.log('‚úÖ Supabase —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!')
    console.log('üìã –°–æ–∑–¥–∞–Ω–æ 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:')
    console.log('  ‚Ä¢ profiles - –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    console.log('  ‚Ä¢ trades - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏')
    console.log('  ‚Ä¢ chat_history - –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤')
    console.log('  ‚Ä¢ news_events - –Ω–æ–≤–æ—Å—Ç–∏')
    console.log('  ‚Ä¢ ai_analysis - –ò–ò-–∞–Ω–∞–ª–∏–∑')

    console.log('\nüîó –°—Å—ã–ª–∫–∏:')
    console.log('  ‚Ä¢ Supabase Dashboard:', supabaseUrl.replace('/rest/v1', ''))
    console.log('  ‚Ä¢ Table Editor:', `${supabaseUrl.replace('/rest/v1', '')}/project/default/editor`)

    console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
    console.log('  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase Dashboard')
    console.log('  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev')
    console.log('  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/–≤—Ö–æ–¥')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error)
    console.log('\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ SQL Editor –≤ Supabase Dashboard')
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
setupSupabase() 