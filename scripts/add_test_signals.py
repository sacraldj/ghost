#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
"""

import os
import sys
import json
import random
from datetime import datetime, timedelta

try:
    from supabase import create_client, Client
except ImportError:
    print("‚ùå Supabase client not installed. Run: pip install supabase")
    sys.exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL', "https://qjdpckwqozsbpskwplfl.supabase.co")
SUPABASE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY', "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFqZHBja3dxb3pzYnBza3dwbGZsIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDUwNTI1NSwiZXhwIjoyMDcwMDgxMjU1fQ.At9S4Jb1maeGrh3GfFtj1ItcOSDBn0Qj1dJ7aWZD97g")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
TRADERS = [
    'cryptoattack24',
    'whales_guide_main', 
    'crypto_hub_vip',
    '2trade_slivaem'
]

# –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
SYMBOLS = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'ALPINEUSDT', 'DOGEUSDT', 'SOLUSDT']

def add_signals_parsed():
    """–î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ signals_parsed"""
    print("üìä –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ signals_parsed...")
    
    signals = []
    for trader_id in TRADERS:
        for i in range(random.randint(5, 15)):  # 5-15 —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞
            signal_time = datetime.now() - timedelta(days=random.randint(0, 30))
            
            signal = {
                'signal_id': f"{trader_id}_{int(signal_time.timestamp())}_{i}",
                'trader_id': trader_id,
                'symbol': random.choice(SYMBOLS),
                'side': random.choice(['BUY', 'SELL']),
                'entry_price': round(random.uniform(0.1, 1000), 4),
                'tp1': round(random.uniform(0.1, 1000), 4),
                'tp2': round(random.uniform(0.1, 1000), 4),
                'sl': round(random.uniform(0.1, 1000), 4),
                'confidence': random.randint(70, 95),
                'is_valid': True,
                'posted_at': signal_time.isoformat(),
                'raw_text': f"Test signal for {random.choice(SYMBOLS)} from {trader_id}"
            }
            signals.append(signal)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏
        batch_size = 50
        for i in range(0, len(signals), batch_size):
            batch = signals[i:i + batch_size]
            result = supabase.table('signals_parsed').upsert(batch).execute()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–∞—Ç—á {i//batch_size + 1} –≤ signals_parsed")
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ signals_parsed")
        return len(signals)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ signals_parsed: {e}")
        return 0

def add_signal_outcomes(signals_count):
    """–î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("üéØ –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥—ã —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    outcomes = []
    outcome_id = 1
    
    for trader_id in TRADERS:
        trader_signals = signals_count // len(TRADERS)  # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        
        for i in range(trader_signals):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏—Å—Ö–æ–¥—ã
            if random.random() < 0.65:  # 65% —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                final_result = random.choice(['TP1_ONLY', 'TP2_FULL'])
                pnl_sim = random.uniform(50, 200) if final_result == 'TP1_ONLY' else random.uniform(100, 400)
            else:
                final_result = 'SL_HIT'
                pnl_sim = random.uniform(-150, -50)
            
            outcome = {
                'outcome_id': outcome_id,
                'signal_id': f"{trader_id}_outcome_{outcome_id}",
                'trader_id': trader_id,
                'final_result': final_result,
                'pnl_sim': round(pnl_sim, 2),
                'roi_sim': round((pnl_sim / 100) * 100, 2),
                'duration_to_tp1_min': random.randint(5, 120) if 'TP' in final_result else None,
                'calculated_at': datetime.now().isoformat()
            }
            outcomes.append(outcome)
            outcome_id += 1
    
    try:
        batch_size = 50
        for i in range(0, len(outcomes), batch_size):
            batch = outcomes[i:i + batch_size]
            result = supabase.table('signal_outcomes').upsert(batch).execute()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–∞—Ç—á –∏—Å—Ö–æ–¥–æ–≤ {i//batch_size + 1}")
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(outcomes)} –∏—Å—Ö–æ–¥–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–æ–≤: {e}")

def main():
    print("üöÄ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
    
    try:
        # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals_count = add_signals_parsed()
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥—ã
        if signals_count > 0:
            add_signal_outcomes(signals_count)
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥: http://localhost:3000")
        print(f"–¢—Ä–µ–π–¥–µ—Ä—ã —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for trader in TRADERS:
            print(f"  - {trader}")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
