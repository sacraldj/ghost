#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
"""

import json
import os
from datetime import datetime, timedelta
import random

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs("news_engine/output", exist_ok=True)

# –¢–µ—Å—Ç–æ–≤—ã–µ Telegram —Å–∏–≥–Ω–∞–ª—ã
test_signals = []
test_raw_messages = []

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "SOLUSDT", "DOTUSDT"]
channels = ["Crypto Signals VIP", "Trading Alerts", "News Channel", "Market Analysis"]

for i in range(20):
    timestamp = (datetime.now() - timedelta(hours=random.randint(1, 24))).isoformat()
    
    symbol = random.choice(symbols)
    side = random.choice(["LONG", "SHORT"])
    entry = round(random.uniform(50, 3000), 4)
    tp1 = round(entry * random.uniform(1.02, 1.1), 4)
    tp2 = round(entry * random.uniform(1.1, 1.2), 4)
    sl = round(entry * random.uniform(0.95, 0.98), 4)
    
    signal_text = f"""
{symbol} - {side}

–í—Ö–æ–¥: {entry}

{tp1}
{tp2}

–°—Ç–æ–ø: {sl}
    """.strip()
    
    # –°–∏–≥–Ω–∞–ª
    signal = {
        "timestamp": timestamp,
        "source": random.choice(channels),
        "chat_id": -1001000000000 - random.randint(1, 999999999),
        "text": signal_text,
        "type": "trade",
        "trigger": side
    }
    test_signals.append(signal)
    
    # –°—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    raw_message = {
        "timestamp": timestamp,
        "chat_id": signal["chat_id"],
        "channel_name": signal["source"],
        "message_id": random.randint(1000, 9999),
        "text": signal_text,
        "from_user": f"trader_{random.randint(1, 100)}"
    }
    test_raw_messages.append(raw_message)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
news_texts = [
    "üî• BREAKING: Bitcoin ETF approval expected this week!",
    "üìà Ethereum upgrade successful, price rallying",
    "‚ö†Ô∏è SEC investigating major crypto exchange",
    "üöÄ Tesla announces $2B Bitcoin purchase",
    "üìä CPI data shows inflation cooling, crypto pumping"
]

for i, news in enumerate(news_texts):
    timestamp = (datetime.now() - timedelta(hours=i)).isoformat()
    
    signal = {
        "timestamp": timestamp,
        "source": "Crypto News Fast",
        "chat_id": -1001111111111,
        "text": news,
        "type": "news",
        "trigger": "BREAKING"
    }
    test_signals.append(signal)
    
    raw_message = {
        "timestamp": timestamp,
        "chat_id": -1001111111111,
        "channel_name": "Crypto News Fast",
        "message_id": random.randint(1000, 9999),
        "text": news,
        "from_user": "news_bot"
    }
    test_raw_messages.append(raw_message)

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
test_signals.sort(key=lambda x: x["timestamp"], reverse=True)
test_raw_messages.sort(key=lambda x: x["timestamp"], reverse=True)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
with open("news_engine/output/signals.json", "w", encoding="utf-8") as f:
    json.dump(test_signals, f, ensure_ascii=False, indent=2)

with open("news_engine/output/raw_logbook.json", "w", encoding="utf-8") as f:
    json.dump(test_raw_messages, f, ensure_ascii=False, indent=2)

print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_signals)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_raw_messages)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
print("üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ news_engine/output/")
print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API:")
print("   curl http://localhost:3000/api/telegram-signals")
