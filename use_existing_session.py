#!/usr/bin/env python3
import asyncio
import os
from dotenv import load_dotenv
from telethon import TelegramClient

load_dotenv()

async def use_existing():
    api_id = int(os.getenv('TELEGRAM_API_ID'))
    api_hash = os.getenv('TELEGRAM_API_HASH')
    
    print("üîç –ü–û–ò–°–ö –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ —Å–µ—Å—Å–∏–π Telegram Desktop
    possible_locations = [
        os.path.expanduser("~/Library/Application Support/Telegram Desktop/tdata"),
        os.path.expanduser("~/Downloads"),
        os.path.expanduser("~/Desktop"),
        ".",
    ]
    
    print("üìÇ –ò—â–µ–º —Å–µ—Å—Å–∏–∏ –≤:")
    for location in possible_locations:
        print(f"  {location}")
        if os.path.exists(location):
            session_files = []
            try:
                for file in os.listdir(location):
                    if file.endswith('.session'):
                        session_files.append(os.path.join(location, file))
                if session_files:
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {session_files}")
            except:
                pass
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–µ—Å—Å–∏—é –±–µ–∑ email —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    print("\nüîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é...")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞ —Å–µ—Å—Å–∏–π
    session_names = ['ghost_session', 'main_session', 'primary_session']
    
    for session_name in session_names:
        try:
            print(f"\nüîë –ü—Ä–æ–±—É–µ–º {session_name}...")
            client = TelegramClient(session_name, api_id, api_hash)
            
            await client.connect()
            
            if await client.is_user_authorized():
                me = await client.get_me()
                print(f"‚úÖ –£–ñ–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù: {me.first_name}")
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ ghost_session –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–Ω
                if session_name != 'ghost_session':
                    import shutil
                    shutil.copy2(f'{session_name}.session', 'ghost_session.session')
                    print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ghost_session.session")
                
                await client.disconnect()
                return True
            
            await client.disconnect()
            
        except Exception as e:
            print(f"‚ö†Ô∏è {session_name}: {e}")
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    print("\nüÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é...")
    
    try:
        client = TelegramClient('ghost_session', api_id, api_hash)
        await client.connect()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram")
        print("üì± –ï—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ")
        print("üî¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS...")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not await client.is_user_authorized():
            await client.send_code_request(os.getenv('TELEGRAM_PHONE'))
            print(f"üìû –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {os.getenv('TELEGRAM_PHONE')}")
            
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –≤–≤–æ–¥–∞ - –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            await asyncio.sleep(2)
            
            if await client.is_user_authorized():
                print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            else:
                print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–æ–¥—ã")
                return False
        
        me = await client.get_me()
        print(f"‚úÖ –ì–û–¢–û–í–û: {me.first_name}")
        
        await client.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(use_existing())
    if success:
        print("\nüöÄ –°–µ—Å—Å–∏—è –≥–æ—Ç–æ–≤–∞! –ó–∞–ø—É—Å–∫–∞–µ–º start_all.py")
    else:
        print("\n‚ùå –ù—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
