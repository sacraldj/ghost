#!/usr/bin/env python3
"""
GHOST | Price Feed Logger
–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–∏—à–µ—Ç —Å–≤–µ—á–∏ (1m/5m) –ø–æ BTC/ETH –∏ –¥—Ä—É–≥–∏–º –∞–∫—Ç–∏–≤–∞–º
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: "—á—Ç–æ –±—ã–ª–æ –¥–æ –∏ –ø–æ—Å–ª–µ –Ω–æ–≤–æ—Å—Ç–∏"
"""

import json
import time
import sqlite3
from datetime import datetime
from pybit.unified_trading import HTTP
import yaml

# === API –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ===
with open("config/api_keys.yaml") as f:
    keys = yaml.safe_load(f)["bybit"]

session = HTTP(api_key=keys["api_key"], api_secret=keys["api_secret"])

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
SYMBOLS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "WIFUSDT"]
INTERVALS = ["1", "5"]  # 1m –∏ 5m —Å–≤–µ—á–∏
DB_PATH = "data/price_feed.db"

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ü–µ–Ω"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS price_feed (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT NOT NULL,
            interval TEXT NOT NULL,
            timestamp INTEGER NOT NULL,
            open_price REAL NOT NULL,
            high_price REAL NOT NULL,
            low_price REAL NOT NULL,
            close_price REAL NOT NULL,
            volume REAL NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(symbol, interval, timestamp)
        )
    """)
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_symbol_timestamp ON price_feed(symbol, timestamp)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_interval ON price_feed(interval)")
    
    conn.commit()
    conn.close()

def get_kline_data(symbol, interval, limit=1):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π —Å Bybit"""
    try:
        response = session.get_kline(
            category="linear",
            symbol=symbol,
            interval=interval,
            limit=limit
        )
        
        if response["retCode"] == 0:
            return response["result"]["list"]
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {response}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API {symbol}: {e}")
        return []

def save_price_data(symbol, interval, kline_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        for kline in kline_data:
            # kline: [timestamp, open, high, low, close, volume, ...]
            timestamp = int(kline[0])
            open_price = float(kline[1])
            high_price = float(kline[2])
            low_price = float(kline[3])
            close_price = float(kline[4])
            volume = float(kline[5])
            
            cursor.execute("""
                INSERT OR REPLACE INTO price_feed 
                (symbol, interval, timestamp, open_price, high_price, low_price, close_price, volume)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (symbol, interval, timestamp, open_price, high_price, low_price, close_price, volume))
            
        conn.commit()
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(kline_data)} —Å–≤–µ—á–µ–π {symbol} {interval}m")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {symbol}: {e}")
        conn.rollback()
    finally:
        conn.close()

def get_price_at(symbol, target_timestamp):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–µ—á—É –∫ —Ü–µ–ª–µ–≤–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        cursor.execute("""
            SELECT close_price, timestamp 
            FROM price_feed 
            WHERE symbol = ? AND timestamp <= ?
            ORDER BY timestamp DESC 
            LIMIT 1
        """, (symbol, target_timestamp))
        
        result = cursor.fetchone()
        if result:
            return {
                "price": result[0],
                "timestamp": result[1],
                "symbol": symbol
            }
        else:
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
        return None
    finally:
        conn.close()

def log_price_feed():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÅ GHOST Price Feed Logger –∑–∞–ø—É—â–µ–Ω...")
    
    while True:
        try:
            current_time = datetime.now()
            
            for symbol in SYMBOLS:
                for interval in INTERVALS:
                    kline_data = get_kline_data(symbol, interval, limit=1)
                    if kline_data:
                        save_price_data(symbol, interval, kline_data)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            time.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except KeyboardInterrupt:
            print("üõë Price Feed Logger –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(60)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    import os
    os.makedirs("data", exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_database()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    log_price_feed() 