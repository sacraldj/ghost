#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import asyncio
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

try:
    from supabase import create_client, Client
    import json
except ImportError as e:
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install supabase python-dotenv")
    sys.exit(1)

class SupabaseChecker:
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
        
        if not self.supabase_url or not self.supabase_key:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            print("   NEXT_PUBLIC_SUPABASE_URL")
            print("   SUPABASE_SERVICE_ROLE_KEY")
            sys.exit(1)
        
        print(f"üîó Supabase URL: {self.supabase_url}")
        print(f"üîë Service Key: {self.supabase_key[:20]}...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        try:
            self.supabase: Client = create_client(self.supabase_url, self.supabase_key)
            print("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            sys.exit(1)
    
    def check_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            result = self.supabase.table('information_schema.tables').select('table_name').limit(1).execute()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def get_all_tables(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        try:
            print("\nüìã –°–ü–ò–°–û–ö –í–°–ï–• –¢–ê–ë–õ–ò–¶:")
            print("=" * 50)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ SQL
            query = """
            SELECT table_name, table_type 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
            """
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ RPC –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL
            try:
                result = self.supabase.rpc('exec_sql', {'sql': query}).execute()
                tables = result.data
            except:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                tables = self.get_tables_alternative()
            
            if tables:
                for table in tables:
                    print(f"  üìÑ {table.get('table_name', 'unknown')}")
                return [t.get('table_name') for t in tables]
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return []
    
    def get_tables_alternative(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
        # –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ –Ω–∞—à–µ–π —Å—Ö–µ–º—ã
        expected_tables = [
            'profiles', 'trades', 'chat_history', 'news_events', 'ai_analysis',
            'critical_news', 'news_items', 'market_data', 'critical_alerts',
            'price_data', 'trader_registry', 'signals_raw', 'signals_parsed',
            'unified_signals', 'signal_sources', 'trades_min'
        ]
        
        existing_tables = []
        
        for table_name in expected_tables:
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ
                result = self.supabase.table(table_name).select('*').limit(1).execute()
                existing_tables.append({'table_name': table_name})
                print(f"  ‚úÖ {table_name}")
            except Exception:
                print(f"  ‚ùå {table_name} (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        
        return existing_tables
    
    def check_key_tables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüéØ –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –¢–ê–ë–õ–ò–¶:")
        print("=" * 50)
        
        key_tables = {
            'trader_registry': '–†–µ–µ—Å—Ç—Ä —Ç—Ä–µ–π–¥–µ—Ä–æ–≤',
            'signals_raw': '–°—ã—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã',
            'signals_parsed': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã',
            'unified_signals': 'Unified —Å–∏–≥–Ω–∞–ª—ã'
        }
        
        table_status = {}
        
        for table_name, description in key_tables.items():
            try:
                result = self.supabase.table(table_name).select('*', count='exact').limit(0).execute()
                count = result.count or 0
                table_status[table_name] = count
                print(f"  ‚úÖ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π - {description}")
            except Exception as e:
                table_status[table_name] = None
                print(f"  ‚ùå {table_name}: –û–¢–°–£–¢–°–¢–í–£–ï–¢ - {description}")
        
        return table_status
    
    def check_trader_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"""
        print("\nüë• –î–ê–ù–ù–´–ï –¢–†–ï–ô–î–ï–†–û–í:")
        print("=" * 50)
        
        try:
            result = self.supabase.table('trader_registry').select('*').execute()
            
            if result.data:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(result.data)} —Ç—Ä–µ–π–¥–µ—Ä–æ–≤:")
                for trader in result.data:
                    print(f"  ü§ñ {trader.get('name', 'Unnamed')} ({trader.get('trader_id')})")
                    print(f"     üì± {trader.get('source_handle', 'No handle')}")
                    print(f"     üü¢ –ê–∫—Ç–∏–≤–µ–Ω: {trader.get('is_active', False)}")
            else:
                print("‚ö†Ô∏è –¢—Ä–µ–π–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {e}")
    
    def check_signals_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        print("\nüì° –î–ê–ù–ù–´–ï –°–ò–ì–ù–ê–õ–û–í:")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        try:
            result = self.supabase.table('signals_raw').select('*').order('created_at', desc=True).limit(5).execute()
            
            if result.data:
                print(f"üì• –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(result.data)} —Å—ã—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:")
                for signal in result.data:
                    text_preview = signal.get('text', '')[:50] + '...' if len(signal.get('text', '')) > 50 else signal.get('text', '')
                    print(f"  üìù {signal.get('trader_id')}: {text_preview}")
            else:
                print("‚ö†Ô∏è –°—ã—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        try:
            result = self.supabase.table('signals_parsed').select('*').order('parsed_at', desc=True).limit(5).execute()
            
            if result.data:
                print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(result.data)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:")
                for signal in result.data:
                    print(f"  üíπ {signal.get('trader_id')}: {signal.get('symbol')} {signal.get('side')} @ {signal.get('entry')}")
            else:
                print("\n‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"\nüìã –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –û –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        print("=" * 60)
        print(f"üïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üîó URL: {self.supabase_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.check_connection():
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        tables = self.get_all_tables()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        table_status = self.check_key_tables()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.check_trader_data()
        self.check_signals_data()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
        print("=" * 50)
        
        missing_tables = [table for table, count in table_status.items() if count is None]
        empty_tables = [table for table, count in table_status.items() if count == 0]
        
        if missing_tables:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
            print("   –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏!")
        
        if empty_tables:
            print(f"‚ö†Ô∏è –ü—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(empty_tables)}")
            print("   –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        
        if not missing_tables and not empty_tables:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        return True

def main():
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• SUPABASE")
    print("=" * 60)
    
    checker = SupabaseChecker()
    success = checker.generate_report()
    
    if success:
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main()
