#!/usr/bin/env python3
"""
GHOST News Noise Filter
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–∞ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª –î–∞—Ä—ç–Ω)
"–ù–∞–¥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –∏—Ö, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —à—É–º–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞—é—Ç"
"""

import re
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class FilterResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏"""
    is_important: bool
    importance_score: float  # 0.0 - 1.0
    filter_reason: str
    detected_categories: List[str]
    spam_indicators: List[str]

class NewsNoiseFilter:
    """
    –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —à—É–º–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
    –û—Ç—Å–µ–∏–≤–∞–µ—Ç 90%+ –º—É—Å–æ—Ä–∞, –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    """
    
    def __init__(self):
        self.importance_threshold = 0.6  # –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –î–∞—Ä—ç–Ω–∞)
        self.critical_keywords = {
            'fed_monetary': [
                '—Ñ—Ä—Å', 'fed', '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞', '—Å—Ç–∞–≤–∫–∞ —Ñ—Ä—Å',
                '–ø–∞—É—ç–ª–ª', 'powell', 'fomc', '—Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏', '–ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏', 
                '–º–æ–Ω–µ—Ç–∞—Ä–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞', '–¥–µ–Ω–µ–∂–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞', '–±–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞'
            ],
            'regulatory_critical': [
                'sec', 'cftc', '–æ–¥–æ–±—Ä–µ–Ω–∏–µ etf', 'etf –æ–¥–æ–±—Ä–µ–Ω', '–±–∏—Ç–∫–æ–∏–Ω etf', 'ethereum etf',
                '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ', '–∑–∞–ø—Ä–µ—Ç –∫—Ä–∏–ø—Ç–æ', '–ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏—è', '–ª–∏—Ü–µ–Ω–∑–∏—è'
            ],
            'whale_activity': [
                '–∞—Ä—Ç—É—Ä —Ö–µ–π—Å', 'arthur hayes', '–º–∞–π–∫–ª —Å—ç–π–ª–æ—Ä', 'michael saylor', '–∏–ª–æ–Ω –º–∞—Å–∫', 'elon musk',
                '–ø–æ–∫—É–ø–∞–µ—Ç', '–ø—Ä–æ–¥–∞–µ—Ç', '–∫—É–ø–∏–ª', '–ø—Ä–æ–¥–∞–ª', '–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª', '–≤–ª–æ–∂–∏–ª',
                'microstrategy', 'tesla', 'grayscale', 'blackrock'
            ],
            'market_structure': [
                '–ª–∏—Å—Ç–∏–Ω–≥', 'listing', '–¥–µ–ª–∏—Å—Ç–∏–Ω–≥', 'delisting', '—Ö–∞–ª–≤–∏–Ω–≥', 'halving',
                '—Ä–∞–∑–ª–æ–∫', 'unlock', 'airdrop', '—Ç–æ–∫–µ–Ω–æ–º–∏–∫–∞', 'tokenomics',
                '–º–µ–π–Ω–Ω–µ—Ç', 'mainnet', '—Ö–∞—Ä–¥—Ñ–æ—Ä–∫', 'hardfork'
            ],
            'macro_events': [
                '–∏–Ω—Ñ–ª—è—Ü–∏—è', 'inflation', 'cpi', 'ppi', '–±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞', 'unemployment',
                'gdp', '–≤–≤–ø', '—Ä–µ—Ü–µ—Å—Å–∏—è', 'recession', '–∫—Ä–∏–∑–∏—Å', 'crisis'
            ]
        }
        
        # –°–ø–∞–º-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–µ–∏–≤–∞–µ–º)
        self.spam_indicators = {
            'promotional': [
                '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–º–æ', 'promo', '—Å–∫–∏–¥–∫–∞', 'discount', '–±–æ–Ω—É—Å', 'bonus',
                '–∞–∫—Ü–∏—è', '–∫–æ–Ω–∫—É—Ä—Å', '—Ä–æ–∑—ã–≥—Ä—ã—à', 'giveaway', 'airdrop –±–µ—Å–ø–ª–∞—Ç–Ω–æ'
            ],
            'clickbait': [
                '—à–æ–∫–∏—Ä—É—é—â–∞—è –ø—Ä–∞–≤–¥–∞', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '—Å–µ–∫—Ä–µ—Ç', '—Ç–∞–π–Ω–∞', 'exclusive',
                'breaking: —Ü–µ–Ω–∞', '—Å—Ä–æ—á–Ω–æ: –∫—É—Ä—Å', '—Å–µ–Ω—Å–∞—Ü–∏—è', '—Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ'
            ],
            'generic_price': [
                '—Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç', '—Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç', '–∫—É—Ä—Å –≤—ã—Ä–æ—Å', '–∫—É—Ä—Å —É–ø–∞–ª',
                '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç',
                '–≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–æ—Å—Ç –¥–æ', '–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –¥–æ'
            ],
            'social_noise': [
                '–º–µ–º', 'meme', '—à—É—Ç–∫–∞', 'joke', '—Ç—Ä–æ–ª–ª–∏–Ω–≥', 'trolling',
                '—Ö–∞–π–ø', 'hype', '—Ñ–æ–º–æ', 'fomo', '–∫ –ª—É–Ω–µ', 'to the moon'
            ],
            'low_quality': [
                '—Å–ª—É—Ö–∏', 'rumors', '–Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–≤–æ–∑–º–æ–∂–Ω–æ',
                '–ø–æ –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º', '–∏—Å—Ç–æ—á–Ω–∏–∫–∏ —É—Ç–≤–µ—Ä–∂–¥–∞—é—Ç', '–∏–Ω—Å–∞–π–¥–µ—Ä—ã –≥–æ–≤–æ—Ä—è—Ç'
            ]
        }
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –¥–æ–≤–µ—Ä–∏–µ–º
        self.trusted_sources = {
            'tier1': [  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ
                'reuters', 'bloomberg', 'wall street journal', 'financial times',
                'coindesk', 'cointelegraph', 'the block', 'decrypt'
            ],
            'tier2': [  # –í—ã—Å–æ–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ
                'cnbc', 'cnn business', 'forbes', 'yahoo finance',
                'binance news', 'coinbase blog', 'kraken blog'
            ],
            'tier3': [  # –°—Ä–µ–¥–Ω–µ–µ –¥–æ–≤–µ—Ä–∏–µ
                'crypto news', 'bitcoin magazine', 'ethereum world news',
                'ambcrypto', 'u.today', 'cryptoslate'
            ]
        }
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏-—Å–ø–∞–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–µ–∏–≤–∞–µ–º)
        self.spam_sources = [
            'cryptopotato', 'newsbtc –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞', 'clickbait crypto',
            'pump news', 'moon news', 'crypto hype'
        ]
        
        logger.info("üîç News Noise Filter initialized with aggressive filtering")
    
    def filter_news(self, news_data: Dict) -> FilterResult:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏
        """
        title = news_data.get('title', '').lower()
        content = news_data.get('content', '').lower()
        source = news_data.get('source', '').lower()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        full_text = f"{title} {content}"
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ—Ç—Å–µ–∏–≤–∞–Ω–∏–µ)
        if self._is_spam_source(source):
            return FilterResult(
                is_important=False,
                importance_score=0.0,
                filter_reason="Spam source detected",
                detected_categories=[],
                spam_indicators=['spam_source']
            )
        
        # 2. –ò—â–µ–º —Å–ø–∞–º-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        spam_indicators = self._detect_spam_indicators(full_text)
        if len(spam_indicators) >= 2:  # –ï—Å–ª–∏ 2+ —Å–ø–∞–º-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ = –æ—Ç—Å–µ–∏–≤–∞–µ–º
            return FilterResult(
                is_important=False,
                importance_score=0.1,
                filter_reason=f"Multiple spam indicators: {', '.join(spam_indicators)}",
                detected_categories=[],
                spam_indicators=spam_indicators
            )
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        importance_score, detected_categories = self._calculate_importance(full_text)
        
        # 4. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_multiplier = self._get_source_trust_multiplier(source)
        final_score = min(1.0, importance_score * source_multiplier)
        
        # 5. –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        time_penalty = self._apply_time_filters(news_data)
        final_score *= time_penalty
        
        # 6. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        is_important = final_score >= self.importance_threshold
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if is_important:
            logger.info(f"‚úÖ IMPORTANT NEWS: {title[:50]}... (score: {final_score:.2f})")
        else:
            logger.debug(f"‚ùå Filtered out: {title[:30]}... (score: {final_score:.2f}, reason: {detected_categories})")
        
        return FilterResult(
            is_important=is_important,
            importance_score=final_score,
            filter_reason=f"Score {final_score:.2f}, categories: {detected_categories}" if is_important else "Below threshold",
            detected_categories=detected_categories,
            spam_indicators=spam_indicators
        )
    
    def _is_spam_source(self, source: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–∏—Å—Ç–æ—á–Ω–∏–∫"""
        return any(spam_source in source for spam_source in self.spam_sources)
    
    def _detect_spam_indicators(self, text: str) -> List[str]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–ø–∞–º-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        detected = []
        
        for category, indicators in self.spam_indicators.items():
            for indicator in indicators:
                if indicator in text:
                    detected.append(category)
                    break  # –û–¥–∏–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        return detected
    
    def _calculate_importance(self, text: str) -> Tuple[float, List[str]]:
        """–†–∞—Å—á—ë—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        importance_score = 0.0
        detected_categories = []
        
        # –í–µ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –î–∞—Ä—ç–Ω–∞)
        category_weights = {
            'fed_monetary': 1.0,      # –§–†–° = –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å
            'regulatory_critical': 0.9,  # –†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            'whale_activity': 0.8,    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤
            'market_structure': 0.7,  # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            'macro_events': 0.6       # –ú–∞–∫—Ä–æ —Å–æ–±—ã—Ç–∏—è
        }
        
        for category, keywords in self.critical_keywords.items():
            category_score = 0.0
            matches = 0
            
            for keyword in keywords:
                if keyword in text:
                    matches += 1
                    # –ë–æ–ª—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π = –≤—ã—à–µ –≤–∞–∂–Ω–æ—Å—Ç—å
                    category_score = min(1.0, matches * 0.3)
            
            if category_score > 0:
                detected_categories.append(category)
                weighted_score = category_score * category_weights[category]
                importance_score = max(importance_score, weighted_score)  # –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º
        
        return importance_score, detected_categories
    
    def _get_source_trust_multiplier(self, source: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–æ–≤–µ—Ä–∏—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É"""
        for tier_sources in self.trusted_sources['tier1']:
            if tier_sources in source:
                return 1.2  # –ü–æ–≤—ã—à–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è tier1
        
        for tier_sources in self.trusted_sources['tier2']:
            if tier_sources in source:
                return 1.1  # –ü–æ–≤—ã—à–∞–µ–º –¥–ª—è tier2
        
        for tier_sources in self.trusted_sources['tier3']:
            if tier_sources in source:
                return 1.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ –¥–ª—è tier3
        
        return 0.8  # –°–Ω–∏–∂–∞–µ–º –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    
    def _apply_time_filters(self, news_data: Dict) -> float:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        published_at = news_data.get('published_at')
        if not published_at:
            return 1.0
        
        try:
            if isinstance(published_at, str):
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
                try:
                    pub_time = datetime.fromisoformat(published_at.replace('Z', '+00:00'))
                except:
                    pub_time = datetime.now()  # Fallback
            else:
                pub_time = published_at
            
            # –°–Ω–∏–∂–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            age_hours = (datetime.now() - pub_time.replace(tzinfo=None)).total_seconds() / 3600
            
            if age_hours > 24:
                return 0.5  # –°—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã
            elif age_hours > 6:
                return 0.8  # –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º
            else:
                return 1.0  # –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                
        except Exception:
            return 1.0  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ
    
    def get_filter_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        return {
            'importance_threshold': self.importance_threshold,
            'critical_categories': len(self.critical_keywords),
            'spam_categories': len(self.spam_indicators),
            'trusted_sources': sum(len(sources) for sources in self.trusted_sources.values()),
            'spam_sources': len(self.spam_sources)
        }
    
    def update_threshold(self, new_threshold: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        old_threshold = self.importance_threshold
        self.importance_threshold = max(0.0, min(1.0, new_threshold))
        logger.info(f"üéØ Importance threshold updated: {old_threshold:.2f} ‚Üí {self.importance_threshold:.2f}")

# Utility —Ñ—É–Ω–∫—Ü–∏–∏
def filter_news_batch(news_list: List[Dict]) -> List[Dict]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–∞—Ç—á–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    filter_instance = NewsNoiseFilter()
    filtered_news = []
    
    for news in news_list:
        result = filter_instance.filter_news(news)
        if result.is_important:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫ –Ω–æ–≤–æ—Å—Ç–∏
            news['filter_result'] = {
                'importance_score': result.importance_score,
                'detected_categories': result.detected_categories,
                'filter_reason': result.filter_reason
            }
            filtered_news.append(news)
    
    logger.info(f"üîç Filtered {len(news_list)} ‚Üí {len(filtered_news)} important news ({len(filtered_news)/len(news_list)*100:.1f}% kept)")
    return filtered_news

def is_news_important(news_data: Dict) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏"""
    filter_instance = NewsNoiseFilter()
    result = filter_instance.filter_news(news_data)
    return result.is_important

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –î–∞—Ä—ç–Ω–∞
    filter_instance = NewsNoiseFilter()
    
    # –ü—Ä–∏–º–µ—Ä 1: –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å (–º–∏–Ω–∏—Å—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –°–®–ê)
    important_news = {
        'title': '–ú–∏–Ω–∏—Å—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –°–®–ê: –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—Å—è –ø–æ–∫—É–ø–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –Ω–∞—à–∏ —Ä–µ–∑–µ—Ä–≤—ã',
        'content': '–í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–∞—á–Ω–µ–º —Å–æ —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –§–†–° –Ω–∞ 25 –±.–ø., –∞ –∑–∞—Ç–µ–º —É—Å–∫–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å',
        'source': 'reuters',
        'published_at': datetime.now().isoformat()
    }
    
    # –ü—Ä–∏–º–µ—Ä 2: –°–ø–∞–º-–Ω–æ–≤–æ—Å—Ç—å
    spam_news = {
        'title': '–®–æ–∫–∏—Ä—É—é—â–∞—è –ø—Ä–∞–≤–¥–∞ –æ –±–∏—Ç–∫–æ–∏–Ω–µ! –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –≤—ã—Ä–∞—Å—Ç–∏ –¥–æ 1 –º–∏–ª–ª–∏–æ–Ω–∞!',
        'content': '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å!',
        'source': 'cryptopotato',
        'published_at': datetime.now().isoformat()
    }
    
    # –ü—Ä–∏–º–µ—Ä 3: –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–∞)
    whale_news = {
        'title': '–ê—Ä—Ç—É—Ä –•–µ–π—Å –∑–∞—è–≤–∏–ª, —á—Ç–æ –∑–∞–∫—É–ø–∞–µ—Ç ETH –∏ –æ–±–µ—â–∞–µ—Ç –±–æ–ª—å—à–µ –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å',
        'content': '–ê—Ä—Ç—É—Ä –•–µ–π—Å –ø—Ä–∏–æ–±—Ä–µ–ª ETH –∏ –¥—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ 6,85 –º–ª–Ω $',
        'source': 'coindesk',
        'published_at': datetime.now().isoformat()
    }
    
    print("üß™ TESTING NEWS NOISE FILTER")
    print("=" * 50)
    
    for i, (name, news) in enumerate([
        ("Important (Fed)", important_news),
        ("Spam", spam_news), 
        ("Whale Activity", whale_news)
    ], 1):
        result = filter_instance.filter_news(news)
        print(f"\n{i}. {name}:")
        print(f"   Important: {'‚úÖ' if result.is_important else '‚ùå'}")
        print(f"   Score: {result.importance_score:.2f}")
        print(f"   Categories: {result.detected_categories}")
        if result.spam_indicators:
            print(f"   Spam indicators: {result.spam_indicators}")
    
    print(f"\nüìä Filter Statistics:")
    stats = filter_instance.get_filter_statistics()
    for key, value in stats.items():
        print(f"   {key}: {value}")
