"""
GHOST Trader Stats Collector
–°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º
–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç—ã —Ç–∏–ø–∞:
üèÜ TRADER STATS:
‚îú‚îÄ‚îÄ Whales Standard: 73% Win Rate, +15.2% ROI
‚îú‚îÄ‚îÄ Spot Trader: 68% Win Rate, +12.8% ROI  
‚îî‚îÄ‚îÄ Whales Precision: 61% Win Rate, +8.4% ROI
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
import json
import statistics

logger = logging.getLogger(__name__)

@dataclass
class TraderPerformance:
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–∞"""
    trader_id: str
    trader_name: str
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_signals: int = 0
    successful_signals: int = 0
    failed_signals: int = 0
    
    # Win Rate
    win_rate: float = 0.0
    
    # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
    total_roi: float = 0.0
    avg_roi: float = 0.0
    best_roi: float = 0.0
    worst_roi: float = 0.0
    
    # Risk/Reward
    avg_risk_reward: float = 0.0
    max_drawdown: float = 0.0
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_duration_hours: float = 0.0
    fastest_profit_hours: float = 0.0
    
    # –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
    avg_confidence: float = 0.0
    total_targets_hit: int = 0
    avg_targets_per_signal: float = 0.0
    
    # –ß–∞—Å—Ç–æ—Ç–∞
    signals_per_day: float = 0.0
    most_active_hour: int = 0
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    favorite_symbols: List[str] = None
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    period_start: datetime = None
    period_end: datetime = None
    
    def __post_init__(self):
        if self.favorite_symbols is None:
            self.favorite_symbols = []

@dataclass 
class SignalOutcome:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
    signal_id: str
    trader_id: str
    symbol: str
    side: str
    entry_price: float
    exit_price: Optional[float]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    outcome: str  # "TP1", "TP2", "SL", "BE", "TIMEOUT", "MANUAL"
    roi_percent: float
    pnl_usd: Optional[float]
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    entry_time: datetime
    exit_time: Optional[datetime]
    duration_hours: Optional[float]
    
    # –¶–µ–ª–∏
    targets_hit: int
    total_targets: int
    
    # –ö–∞—á–µ—Å—Ç–≤–æ
    confidence: float
    slippage: Optional[float]

class TraderStatsCollector:
    """–°–±–æ—Ä—â–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º"""
    
    def __init__(self):
        self.outcomes: List[SignalOutcome] = []
        self.performances: Dict[str, TraderPerformance] = {}
        
        logger.info("Trader Stats Collector initialized")
    
    def add_signal_outcome(self, outcome: SignalOutcome):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        self.outcomes.append(outcome)
        logger.debug(f"Added outcome for {outcome.trader_id}: {outcome.outcome} ({outcome.roi_percent:.1f}%)")
    
    def calculate_trader_performance(self, trader_id: str, 
                                   period_days: int = 30) -> TraderPerformance:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Ç—Ä–µ–π–¥–µ—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
        end_date = datetime.now()
        start_date = end_date - timedelta(days=period_days)
        
        trader_outcomes = [
            outcome for outcome in self.outcomes
            if outcome.trader_id == trader_id and 
               outcome.entry_time >= start_date
        ]
        
        if not trader_outcomes:
            return TraderPerformance(
                trader_id=trader_id,
                trader_name=self._get_trader_name(trader_id),
                period_start=start_date,
                period_end=end_date
            )
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–¥—Å—á–µ—Ç—ã
        total_signals = len(trader_outcomes)
        successful = [o for o in trader_outcomes if o.roi_percent > 0]
        failed = [o for o in trader_outcomes if o.roi_percent <= 0]
        
        # Win Rate
        win_rate = (len(successful) / total_signals * 100) if total_signals > 0 else 0
        
        # ROI –º–µ—Ç—Ä–∏–∫–∏
        roi_values = [o.roi_percent for o in trader_outcomes]
        total_roi = sum(roi_values)
        avg_roi = statistics.mean(roi_values) if roi_values else 0
        best_roi = max(roi_values) if roi_values else 0
        worst_roi = min(roi_values) if roi_values else 0
        
        # Risk/Reward
        positive_roi = [r for r in roi_values if r > 0]
        negative_roi = [abs(r) for r in roi_values if r < 0]
        
        avg_risk_reward = 0
        if negative_roi:
            avg_profit = statistics.mean(positive_roi) if positive_roi else 0
            avg_loss = statistics.mean(negative_roi) if negative_roi else 1
            avg_risk_reward = avg_profit / avg_loss if avg_loss > 0 else 0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        max_drawdown = abs(worst_roi)
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        durations = [o.duration_hours for o in trader_outcomes if o.duration_hours]
        avg_duration = statistics.mean(durations) if durations else 0
        fastest_profit = min([d for d, r in zip(durations, roi_values) if r > 0]) if durations else 0
        
        # –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
        confidences = [o.confidence for o in trader_outcomes if o.confidence]
        avg_confidence = statistics.mean(confidences) if confidences else 0
        
        total_targets_hit = sum(o.targets_hit for o in trader_outcomes)
        total_possible_targets = sum(o.total_targets for o in trader_outcomes)
        avg_targets_per_signal = total_possible_targets / total_signals if total_signals > 0 else 0
        
        # –ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_per_day = total_signals / period_days
        
        # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å
        hours = [o.entry_time.hour for o in trader_outcomes]
        most_active_hour = statistics.mode(hours) if hours else 0
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        symbols = [o.symbol for o in trader_outcomes]
        symbol_counts = {}
        for symbol in symbols:
            symbol_counts[symbol] = symbol_counts.get(symbol, 0) + 1
        
        favorite_symbols = sorted(symbol_counts.keys(), 
                                key=lambda x: symbol_counts[x], reverse=True)[:5]
        
        return TraderPerformance(
            trader_id=trader_id,
            trader_name=self._get_trader_name(trader_id),
            total_signals=total_signals,
            successful_signals=len(successful),
            failed_signals=len(failed),
            win_rate=win_rate,
            total_roi=total_roi,
            avg_roi=avg_roi,
            best_roi=best_roi,
            worst_roi=worst_roi,
            avg_risk_reward=avg_risk_reward,
            max_drawdown=max_drawdown,
            avg_duration_hours=avg_duration,
            fastest_profit_hours=fastest_profit,
            avg_confidence=avg_confidence,
            total_targets_hit=total_targets_hit,
            avg_targets_per_signal=avg_targets_per_signal,
            signals_per_day=signals_per_day,
            most_active_hour=most_active_hour,
            favorite_symbols=favorite_symbols,
            period_start=start_date,
            period_end=end_date
        )
    
    def get_top_traders(self, limit: int = 10, 
                       sort_by: str = "win_rate") -> List[TraderPerformance]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é"""
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
        trader_ids = list(set(outcome.trader_id for outcome in self.outcomes))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
        performances = []
        for trader_id in trader_ids:
            perf = self.calculate_trader_performance(trader_id)
            if perf.total_signals >= 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
                performances.append(perf)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
        sort_key_map = {
            "win_rate": lambda p: p.win_rate,
            "total_roi": lambda p: p.total_roi,
            "avg_roi": lambda p: p.avg_roi,
            "risk_reward": lambda p: p.avg_risk_reward,
            "signals_count": lambda p: p.total_signals
        }
        
        sort_key = sort_key_map.get(sort_by, sort_key_map["win_rate"])
        performances.sort(key=sort_key, reverse=True)
        
        return performances[:limit]
    
    def generate_trader_report(self, trader_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç—Ä–µ–π–¥–µ—Ä—É"""
        perf = self.calculate_trader_performance(trader_id)
        
        report = f"""
üèÜ TRADER REPORT: {perf.trader_name}
{'='*50}

üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
   ‚Ä¢ Total Signals: {perf.total_signals}
   ‚Ä¢ Win Rate: {perf.win_rate:.1f}%
   ‚Ä¢ Average ROI: {perf.avg_roi:+.1f}%
   ‚Ä¢ Total ROI: {perf.total_roi:+.1f}%

üí∞ –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–¨:
   ‚Ä¢ Best Trade: +{perf.best_roi:.1f}%
   ‚Ä¢ Worst Trade: {perf.worst_roi:.1f}%
   ‚Ä¢ Risk/Reward: {perf.avg_risk_reward:.2f}
   ‚Ä¢ Max Drawdown: {perf.max_drawdown:.1f}%

‚è±Ô∏è –í–†–ï–ú–ï–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
   ‚Ä¢ Avg Duration: {perf.avg_duration_hours:.1f} hours
   ‚Ä¢ Fastest Profit: {perf.fastest_profit_hours:.1f} hours
   ‚Ä¢ Signals per Day: {perf.signals_per_day:.1f}
   ‚Ä¢ Most Active Hour: {perf.most_active_hour:02d}:00

üéØ –ö–ê–ß–ï–°–¢–í–û –°–ò–ì–ù–ê–õ–û–í:
   ‚Ä¢ Avg Confidence: {perf.avg_confidence:.1f}%
   ‚Ä¢ Targets Hit: {perf.total_targets_hit}
   ‚Ä¢ Avg Targets/Signal: {perf.avg_targets_per_signal:.1f}

üìà –ü–û–ü–£–õ–Ø–†–ù–´–ï –°–ò–ú–í–û–õ–´:
   ‚Ä¢ {', '.join(perf.favorite_symbols[:3])}

üìÖ –ü–ï–†–ò–û–î: {perf.period_start.strftime('%Y-%m-%d')} - {perf.period_end.strftime('%Y-%m-%d')}
"""
        return report
    
    def generate_leaderboard(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
        top_traders = self.get_top_traders(limit=10)
        
        if not top_traders:
            return "üìä No trader data available yet"
        
        leaderboard = """
üèÜ TRADER LEADERBOARD (Top 10)
{'='*60}

"""
        
        for i, trader in enumerate(top_traders, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i:2d}."
            
            leaderboard += f"{medal} {trader.trader_name:<20} ‚îÇ "
            leaderboard += f"{trader.win_rate:5.1f}% WR ‚îÇ "
            leaderboard += f"{trader.avg_roi:+6.1f}% ROI ‚îÇ "
            leaderboard += f"{trader.total_signals:3d} signals\n"
        
        return leaderboard
    
    def _get_trader_name(self, trader_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        name_mapping = {
            "whalesguide_whales_standard": "Whales Standard",
            "whalesguide_spot_trader": "Spot Trader", 
            "whalesguide_whales_precision": "Whales Precision",
            "2trade_main": "2Trade Main",
            "vip_private_group": "VIP Signals"
        }
        
        return name_mapping.get(trader_id, trader_id.replace('_', ' ').title())
    
    def export_performance_data(self, filepath: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ JSON"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            trader_ids = list(set(outcome.trader_id for outcome in self.outcomes))
            export_data = {
                "generated_at": datetime.now().isoformat(),
                "total_outcomes": len(self.outcomes),
                "traders": {}
            }
            
            for trader_id in trader_ids:
                perf = self.calculate_trader_performance(trader_id)
                export_data["traders"][trader_id] = asdict(perf)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info(f"Performance data exported to {filepath}")
            
        except Exception as e:
            logger.error(f"Error exporting performance data: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def create_test_data() -> List[SignalOutcome]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    test_outcomes = []
    
    # Whales Standard - —Ö–æ—Ä–æ—à–∏–π —Ç—Ä–µ–π–¥–µ—Ä
    for i in range(20):
        outcome = SignalOutcome(
            signal_id=f"whales_std_{i}",
            trader_id="whalesguide_whales_standard",
            symbol=["BTCUSDT", "ETHUSDT", "SOLUSDT"][i % 3],
            side="LONG",
            entry_price=45000.0,
            exit_price=46500.0 if i < 15 else 44000.0,  # 75% —É—Å–ø–µ—à–Ω—ã—Ö
            outcome="TP1" if i < 15 else "SL",
            roi_percent=15.2 if i < 15 else -8.5,
            pnl_usd=152.0 if i < 15 else -85.0,
            entry_time=datetime.now() - timedelta(days=30-i),
            exit_time=datetime.now() - timedelta(days=30-i, hours=-6),
            duration_hours=6.0,
            targets_hit=1 if i < 15 else 0,
            total_targets=3,
            confidence=85.0,
            slippage=0.1
        )
        test_outcomes.append(outcome)
    
    # Spot Trader - —Å—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä
    for i in range(15):
        outcome = SignalOutcome(
            signal_id=f"spot_trader_{i}",
            trader_id="whalesguide_spot_trader",
            symbol=["TACUSDT", "DOGENUSDT", "ADAUSDT"][i % 3],
            side="LONG",
            entry_price=0.015,
            exit_price=0.0165 if i < 10 else 0.014,  # 67% —É—Å–ø–µ—à–Ω—ã—Ö
            outcome="TP1" if i < 10 else "SL",
            roi_percent=12.8 if i < 10 else -6.2,
            pnl_usd=64.0 if i < 10 else -31.0,
            entry_time=datetime.now() - timedelta(days=25-i),
            exit_time=datetime.now() - timedelta(days=25-i, hours=-4),
            duration_hours=4.0,
            targets_hit=1 if i < 10 else 0,
            total_targets=2,
            confidence=72.0,
            slippage=0.2
        )
        test_outcomes.append(outcome)
    
    # Whales Precision - –±–æ–ª–µ–µ —Å–ª–∞–±—ã–π —Ç—Ä–µ–π–¥–µ—Ä
    for i in range(12):
        outcome = SignalOutcome(
            signal_id=f"whales_prec_{i}",
            trader_id="whalesguide_whales_precision",
            symbol=["SUIUSDT", "AVAXUSDT", "LINKUSDT"][i % 3],
            side="LONG",
            entry_price=3.85,
            exit_price=4.15 if i < 7 else 3.65,  # 58% —É—Å–ø–µ—à–Ω—ã—Ö
            outcome="TP2" if i < 7 else "SL",
            roi_percent=8.4 if i < 7 else -5.8,
            pnl_usd=42.0 if i < 7 else -29.0,
            entry_time=datetime.now() - timedelta(days=20-i),
            exit_time=datetime.now() - timedelta(days=20-i, hours=-8),
            duration_hours=8.0,
            targets_hit=2 if i < 7 else 0,
            total_targets=4,
            confidence=68.0,
            slippage=0.15
        )
        test_outcomes.append(outcome)
    
    return test_outcomes


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
def test_trader_stats():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä—â–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TRADER STATS COLLECTOR")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫
    collector = TraderStatsCollector()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = create_test_data()
    for outcome in test_data:
        collector.add_signal_outcome(outcome)
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
    print("\n" + collector.generate_leaderboard())
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ª—É—á—à–µ–º—É —Ç—Ä–µ–π–¥–µ—Ä—É
    top_traders = collector.get_top_traders(limit=1)
    if top_traders:
        print(collector.generate_trader_report(top_traders[0].trader_id))
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    collector.export_performance_data("trader_performance.json")
    print("üìÅ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ trader_performance.json")


if __name__ == "__main__":
    test_trader_stats()
