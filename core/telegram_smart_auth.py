"""
–£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê TELEGRAM –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç @777000  
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–≤–æ–¥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∞
"""

import asyncio
import logging
import os
import re
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from telethon import TelegramClient
from telethon.errors import (
    PhoneCodeInvalidError, 
    PhoneCodeExpiredError, 
    SessionPasswordNeededError,
    AuthKeyUnregisteredError,
    ApiIdInvalidError,
    PhoneNumberInvalidError,
    FloodWaitError
)

logger = logging.getLogger(__name__)

class SmartTelegramAuth:
    """
    –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –∫–æ–¥–æ–≤
    """
    
    def __init__(self, api_id: str, api_hash: str, phone: str):
        self.api_id = int(api_id)
        self.api_hash = api_hash
        self.phone = phone
    
    async def smart_auth(self, session_path: str = 'ghost_session') -> bool:
        """
        –£–ú–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –∫–æ–¥–æ–≤
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –£–ú–ù–û–ô –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram")
        logger.info(f"üìû –ù–æ–º–µ—Ä: {self.phone}")
        logger.info(f"üíæ –°–µ—Å—Å–∏—è: {session_path}")
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            if await self._check_existing_session(session_path):
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é")
                return True
            
            # 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–∏—Å–∫–æ–º –∫–æ–¥–æ–≤
            return await self._create_new_session_with_smart_code_detection(session_path)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–º–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def _check_existing_session(self, session_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏"""
        session_file = f'{session_path}.session'
        
        if not os.path.exists(session_file):
            logger.info("üìÅ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é...")
        
        client = TelegramClient(session_path, self.api_id, self.api_hash)
        try:
            await client.connect()
            
            if await client.is_user_authorized():
                me = await client.get_me()
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name}")
                return True
            else:
                logger.info("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
                return False
                
        except Exception as e:
            logger.info(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False
        finally:
            await client.disconnect()
    
    async def _create_new_session_with_smart_code_detection(self, session_path: str) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å —É–º–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∫–æ–¥–æ–≤
        """
        logger.info("üîÑ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å —É–º–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∫–æ–¥–æ–≤...")
        
        client = TelegramClient(session_path, self.api_id, self.api_hash)
        
        try:
            await client.connect()
            
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥
            logger.info(f"üìû –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –Ω–∞ {self.phone}")
            sent_code = await client.send_code_request(self.phone)
            
            logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            logger.info("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...")
            
            # 2. –£–ú–ù–´–ô –ü–û–ò–°–ö –ö–û–î–ê
            code = await self._smart_code_search()
            
            if not code:
                logger.error("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                return False
            
            # 3. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
            logger.info(f"üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å –∫–æ–¥–æ–º: {code}")
            await client.sign_in(phone=self.phone, code=code)
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if await client.is_user_authorized():
                me = await client.get_me()
                logger.info(f"üéâ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name}")
                return True
            else:
                logger.error("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
                
        except PhoneCodeInvalidError:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        except PhoneCodeExpiredError:
            logger.error("‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç—ë–∫")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
        finally:
            await client.disconnect()
    
    async def _smart_code_search(self, timeout_minutes: int = 5) -> Optional[str]:
        """
        –£–ú–ù–´–ô –ü–û–ò–°–ö –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram
        """
        logger.info(f"üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {timeout_minutes} –º–∏–Ω—É—Ç...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–¥ —á–µ—Ä–µ–∑ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        backup_sessions = [
            'ghost_session_backup',
            'ghost_session',
            'main_session',
            'telegram_session'
        ]
        
        start_time = datetime.now()
        timeout = timedelta(minutes=timeout_minutes)
        
        while datetime.now() - start_time < timeout:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            for session_name in backup_sessions:
                try:
                    code = await self._search_code_in_session(session_name, start_time)
                    if code:
                        logger.info(f"üéâ –ö–û–î –ù–ê–ô–î–ï–ù —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é {session_name}: {code}")
                        return code
                except:
                    continue
            
            logger.info("‚è≥ –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥—ë–º 10 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)
        
        logger.error("‚è∞ –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ")
        return None
    
    async def _search_code_in_session(self, session_name: str, start_time: datetime) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é"""
        session_file = f'{session_name}.session'
        
        if not os.path.exists(session_file):
            return None
        
        client = TelegramClient(session_name, self.api_id, self.api_hash)
        
        try:
            await client.connect()
            
            if not await client.is_user_authorized():
                return None
            
            logger.info(f"üîç –ò—â–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é {session_name}")
            
            # –ü–æ–∏—Å–∫ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram
            code = await self._find_code_in_telegram_messages(client, start_time)
            if code:
                return code
            
            # –ü–æ–∏—Å–∫ –≤ Saved Messages  
            code = await self._find_code_in_saved_messages(client, start_time)
            if code:
                return code
            
            return None
            
        finally:
            await client.disconnect()
    
    async def _find_code_in_telegram_messages(self, client: TelegramClient, start_time: datetime) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∫–æ–¥–∞ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç Telegram"""
        try:
            # –ò—â–µ–º —á–∞—Ç —Å Telegram Service
            entity = await client.get_entity(777000)  # Telegram Service Notifications
            
            logger.info("üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram Service (777000)...")
            
            time_threshold = start_time - timedelta(minutes=10)
            
            async for message in client.iter_messages(entity, limit=20):
                if not message.message or not message.date:
                    continue
                
                if message.date < time_threshold:
                    continue
                
                text = message.message
                logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ ({message.date}): {text}")
                
                code = self._extract_code_from_text(text)
                if code:
                    logger.info(f"‚úÖ –ö–û–î –ù–ê–ô–î–ï–ù –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {code}")
                    return code
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö: {e}")
        
        return None
    
    async def _find_code_in_saved_messages(self, client: TelegramClient, start_time: datetime) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∫–æ–¥–∞ –≤ Saved Messages"""
        try:
            me = await client.get_me()
            
            logger.info("üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º Saved Messages...")
            
            time_threshold = start_time - timedelta(minutes=10)
            
            async for message in client.iter_messages(me.id, limit=15):
                if not message.message or not message.date:
                    continue
                
                if message.date < time_threshold:
                    continue
                
                text = message.message
                code = self._extract_code_from_text(text)
                if code:
                    logger.info(f"‚úÖ –ö–û–î –ù–ê–ô–î–ï–ù –≤ Saved Messages: {code}")
                    return code
                    
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Saved Messages: {e}")
        
        return None
    
    def _extract_code_from_text(self, text: str) -> Optional[str]:
        """
        –£–õ–£–ß–®–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        """
        if not text:
            return None
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        patterns = [
            # –¢–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã Telegram
            r'Login code:\s*(\d{5,6})\.?\s*Do not give',  # Login code: 11690. Do not give...
            r'Login code:\s*(\d{5,6})',                    # Login code: 11690
            r'–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞:\s*(\d{5,6})',                 # –ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: 11690
            r'Your login code:\s*(\d{5,6})',               # Your login code: 11690
            r'Telegram code:\s*(\d{5,6})',                 # Telegram code: 11690
            
            # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            r'(\d{5,6})\s*is your',                        # 11690 is your verification code  
            r'code:\s*(\d{5,6})',                          # code: 11690
            r'verification code:\s*(\d{5,6})',             # verification code: 11690
            
            # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å)
            r'^(\d{5,6})\.?\s*Do not',                     # 11690. Do not give this code
            r'(\d{5,6})'                                   # –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ 5-6 —Ü–∏—Ñ—Ä
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE | re.MULTILINE)
            if match:
                code = match.group(1)
                if code.isdigit() and 4 <= len(code) <= 6:
                    return code
        
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
async def create_smart_auth_client(api_id: str, api_hash: str, phone: str, session_path: str = 'ghost_session') -> Optional[TelegramClient]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ Telegram –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–º–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    """
    auth = SmartTelegramAuth(api_id, api_hash, phone)
    
    if await auth.smart_auth(session_path):
        # –°–æ–∑–¥–∞—ë–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        client = TelegramClient(session_path, int(api_id), api_hash)
        await client.connect()
        return client
    else:
        logger.error("‚ùå –£–º–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return None
