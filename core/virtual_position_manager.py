"""
Virtual Position Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
"""
import asyncio
import logging
import uuid
from typing import Optional, List, Dict, Any
from datetime import datetime, timezone, timedelta
from dataclasses import dataclass
from enum import Enum
import json

from core.market_price_service import market_price_service, MarketPrice
from core.virtual_position_db import virtual_position_db
from signals.parsers.signal_parser_base import ParsedSignal, SignalDirection

logger = logging.getLogger(__name__)

class PositionStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–æ–∑–∏—Ü–∏–∏"""
    PENDING = "PENDING"           # –û–∂–∏–¥–∞–µ—Ç –≤—Ö–æ–¥–∞
    PARTIAL_FILL = "PARTIAL_FILL" # –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
    FILLED = "FILLED"             # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
    TP1_HIT = "TP1_HIT"          # –î–æ—Å—Ç–∏–≥–Ω—É—Ç TP1
    TP2_HIT = "TP2_HIT"          # –î–æ—Å—Ç–∏–≥–Ω—É—Ç TP2
    TP3_HIT = "TP3_HIT"          # –î–æ—Å—Ç–∏–≥–Ω—É—Ç TP3
    SL_HIT = "SL_HIT"            # –î–æ—Å—Ç–∏–≥–Ω—É—Ç Stop Loss
    CLOSED = "CLOSED"             # –ó–∞–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é
    EXPIRED = "EXPIRED"           # –ò—Å—Ç–µ–∫–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏

class EventType(Enum):
    """–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –ø–æ–∑–∏—Ü–∏–∏"""
    POSITION_CREATED = "POSITION_CREATED"
    ENTRY_FILLED = "ENTRY_FILLED"
    PRICE_UPDATE = "PRICE_UPDATE"
    TP1_REACHED = "TP1_REACHED"
    TP2_REACHED = "TP2_REACHED"
    TP3_REACHED = "TP3_REACHED"
    SL_REACHED = "SL_REACHED"
    PARTIAL_CLOSE = "PARTIAL_CLOSE"
    POSITION_CLOSED = "POSITION_CLOSED"
    TIMEOUT = "TIMEOUT"
    ERROR = "ERROR"
    MANUAL_ACTION = "MANUAL_ACTION"

@dataclass
class VirtualPosition:
    """–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è"""
    id: str
    symbol: str
    side: str  # LONG/SHORT
    position_size_usd: float
    leverage: int
    margin_usd: float
    
    # –¶–µ–Ω—ã –∏–∑ —Å–∏–≥–Ω–∞–ª–∞
    signal_entry_min: Optional[float]
    signal_entry_max: Optional[float]
    signal_tp1: Optional[float]
    signal_tp2: Optional[float]
    signal_tp3: Optional[float]
    signal_sl: Optional[float]
    
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    avg_entry_price: Optional[float] = None
    current_price: Optional[float] = None
    current_pnl_usd: float = 0.0
    current_pnl_percent: float = 0.0
    
    status: PositionStatus = PositionStatus.PENDING
    filled_percent: float = 0.0
    remaining_percent: float = 100.0
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    signal_time: datetime = None
    entry_timeout: datetime = None
    first_entry_time: Optional[datetime] = None
    last_update_time: Optional[datetime] = None
    close_time: Optional[datetime] = None

class VirtualPositionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    
    def __init__(self, supabase_client=None):
        self.supabase = supabase_client
        self.active_positions: Dict[str, VirtualPosition] = {}
        self.monitoring_task = None
        self.monitoring_interval = 5  # —Å–µ–∫—É–Ω–¥
        self.entry_timeout_hours = 48  # —á–∞—Å–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º DB –∫–ª–∏–µ–Ω—Ç
        if supabase_client:
            virtual_position_db.set_supabase(supabase_client)
        
    def set_supabase(self, supabase_client):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Supabase –∫–ª–∏–µ–Ω—Ç"""
        self.supabase = supabase_client
        virtual_position_db.set_supabase(supabase_client)
    
    async def create_position_from_signal(
        self, 
        signal: ParsedSignal, 
        v_trade_id: str,
        position_size_usd: float = 100.0,
        leverage: int = 10
    ) -> Optional[str]:
        """
        –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal: –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            v_trade_id: ID –∑–∞–ø–∏—Å–∏ –≤ v_trades
            position_size_usd: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USD
            leverage: –ü–ª–µ—á–æ
        
        Returns:
            position_id –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø–æ–∑–∏—Ü–∏–∏
            position_id = str(uuid.uuid4())
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂—É
            margin_usd = position_size_usd / leverage
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—ã –∏–∑ —Å–∏–≥–Ω–∞–ª–∞
            signal_entry_min = None
            signal_entry_max = None
            
            if hasattr(signal, 'entry_zone') and signal.entry_zone:
                signal_entry_min = min(signal.entry_zone)
                signal_entry_max = max(signal.entry_zone)
            elif hasattr(signal, 'entry_single') and signal.entry_single:
                signal_entry_min = signal.entry_single
                signal_entry_max = signal.entry_single
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª–∏ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å
            signal_tp1 = signal.targets[0] if signal.targets and len(signal.targets) > 0 else None
            signal_tp2 = signal.targets[1] if signal.targets and len(signal.targets) > 1 else None
            signal_tp3 = signal.targets[2] if signal.targets and len(signal.targets) > 2 else None
            signal_sl = signal.stop_loss if signal.stop_loss else None
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            position = VirtualPosition(
                id=position_id,
                symbol=signal.symbol,
                side='LONG' if signal.direction in [SignalDirection.LONG, SignalDirection.BUY] else 'SHORT',
                position_size_usd=position_size_usd,
                leverage=leverage,
                margin_usd=margin_usd,
                signal_entry_min=signal_entry_min,
                signal_entry_max=signal_entry_max,
                signal_tp1=signal_tp1,
                signal_tp2=signal_tp2,
                signal_tp3=signal_tp3,
                signal_sl=signal_sl,
                signal_time=datetime.now(timezone.utc),
                entry_timeout=datetime.now(timezone.utc) + timedelta(hours=self.entry_timeout_hours)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if await self._save_position_to_db(position, signal.signal_id, v_trade_id):
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                self.active_positions[position_id] = position
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
                await self._log_position_event(
                    position_id,
                    EventType.POSITION_CREATED,
                    f"Position created from signal {signal.symbol} {signal.direction.value}",
                    event_data={
                        'signal_id': signal.signal_id,
                        'v_trade_id': v_trade_id,
                        'position_size_usd': position_size_usd,
                        'leverage': leverage
                    }
                )
                
                # –°—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ
                await self._attempt_market_entry(position_id)
                
                logger.info(f"‚úÖ Virtual position created: {position.symbol} {position.side} ${position_size_usd} (ID: {position_id})")
                return position_id
            else:
                logger.error(f"‚ùå Failed to save position to database")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error creating virtual position: {e}")
            return None
    
    async def _attempt_market_entry(self, position_id: str) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ"""
        try:
            position = self.active_positions.get(position_id)
            if not position:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É
            price_data = await market_price_service.get_market_price(position.symbol)
            if not price_data:
                logger.error(f"‚ùå Failed to get market price for {position.symbol}")
                return False
            
            current_price = price_data.price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞
            can_enter = self._can_enter_at_price(position, current_price)
            
            if can_enter:
                # –í—Ö–æ–¥–∏–º –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ
                await self._execute_market_entry(position_id, current_price, 100.0)  # 100% –ø–æ–∑–∏—Ü–∏–∏
                return True
            else:
                logger.info(f"üí° Market price ${current_price} not in entry zone for {position.symbol} {position.side}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error attempting market entry for {position_id}: {e}")
            return False
    
    def _can_enter_at_price(self, position: VirtualPosition, price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –≤–æ–π—Ç–∏ –ø–æ –¥–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ"""
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–æ–Ω—ã –≤—Ö–æ–¥–∞, –≤—Ö–æ–¥–∏–º –ø–æ –ª—é–±–æ–π —Ü–µ–Ω–µ
        if not position.signal_entry_min or not position.signal_entry_max:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ü–µ–Ω–∞ –≤ –∑–æ–Ω—É –≤—Ö–æ–¥–∞ (—Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º)
        tolerance = 0.005  # 0.5% –¥–æ–ø—É—Å–∫
        
        if position.side == 'LONG':
            # –î–ª—è LONG —Ö–æ—Ç–∏–º –∫—É–ø–∏—Ç—å –¥–µ—à–µ–≤–ª–µ –∏–ª–∏ –≤ –∑–æ–Ω–µ
            max_entry = position.signal_entry_max * (1 + tolerance)
            return price <= max_entry
        else:
            # –î–ª—è SHORT —Ö–æ—Ç–∏–º –ø—Ä–æ–¥–∞—Ç—å –¥–æ—Ä–æ–∂–µ –∏–ª–∏ –≤ –∑–æ–Ω–µ
            min_entry = position.signal_entry_min * (1 - tolerance)
            return price >= min_entry
    
    async def _execute_market_entry(
        self, 
        position_id: str, 
        entry_price: float, 
        entry_percent: float = 100.0
    ) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ"""
        try:
            position = self.active_positions.get(position_id)
            if not position:
                return False
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞
            entry_size_usd = position.position_size_usd * (entry_percent / 100.0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            if position.avg_entry_price is None:
                position.avg_entry_price = entry_price
            else:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
                total_filled = position.filled_percent / 100.0
                new_avg_price = (
                    (position.avg_entry_price * total_filled * position.position_size_usd + 
                     entry_price * entry_size_usd) /
                    ((total_filled * position.position_size_usd) + entry_size_usd)
                )
                position.avg_entry_price = new_avg_price
            
            position.filled_percent = min(100.0, position.filled_percent + entry_percent)
            position.remaining_percent = 100.0 - position.filled_percent
            position.current_price = entry_price
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if position.filled_percent >= 100.0:
                position.status = PositionStatus.FILLED
                position.first_entry_time = datetime.now(timezone.utc)
            else:
                position.status = PositionStatus.PARTIAL_FILL
                if position.first_entry_time is None:
                    position.first_entry_time = datetime.now(timezone.utc)
            
            position.last_update_time = datetime.now(timezone.utc)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if await self._save_entry_to_db(position_id, entry_price, entry_size_usd, entry_percent):
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞
                await self._log_position_event(
                    position_id,
                    EventType.ENTRY_FILLED,
                    f"Market entry: ${entry_price} ({entry_percent:.1f}%)",
                    price_at_event=entry_price,
                    event_data={
                        'entry_price': entry_price,
                        'entry_size_usd': entry_size_usd,
                        'entry_percent': entry_percent,
                        'filled_percent': position.filled_percent
                    }
                )
                
                logger.info(f"üéØ Market entry executed: {position.symbol} {position.side} at ${entry_price} ({entry_percent:.1f}%)")
                return True
            else:
                logger.error(f"‚ùå Failed to save entry to database")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error executing market entry: {e}")
            return False
    
    async def update_position_prices(self) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.active_positions:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            symbols = list(set(pos.symbol for pos in self.active_positions.values()))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            prices = await market_price_service.get_multiple_prices(symbols)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            for position_id, position in self.active_positions.items():
                if position.symbol in prices:
                    new_price = prices[position.symbol].price
                    await self._update_position_price(position_id, new_price)
                    
        except Exception as e:
            logger.error(f"‚ùå Error updating position prices: {e}")
    
    async def _update_position_price(self, position_id: str, new_price: float) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            position = self.active_positions.get(position_id)
            if not position or not position.avg_entry_price:
                return
            
            old_price = position.current_price
            position.current_price = new_price
            position.last_update_time = datetime.now(timezone.utc)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
            if position.side == 'LONG':
                price_change = (new_price - position.avg_entry_price) / position.avg_entry_price
            else:
                price_change = (position.avg_entry_price - new_price) / position.avg_entry_price
            
            position.current_pnl_percent = price_change * 100 * position.leverage
            position.current_pnl_usd = position.position_size_usd * (price_change * position.leverage)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            await self._check_tp_sl_levels(position_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (> 1%)
            if old_price and abs((new_price - old_price) / old_price) > 0.01:
                await self._log_position_event(
                    position_id,
                    EventType.PRICE_UPDATE,
                    f"Price update: ${old_price:.6f} ‚Üí ${new_price:.6f} (PnL: {position.current_pnl_percent:.2f}%)",
                    price_at_event=new_price,
                    pnl_at_event=position.current_pnl_usd
                )
                
        except Exception as e:
            logger.error(f"‚ùå Error updating position price: {e}")
    
    async def _check_tp_sl_levels(self, position_id: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π TP/SL"""
        try:
            position = self.active_positions.get(position_id)
            if not position or not position.current_price:
                return
            
            current_price = position.current_price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Stop Loss
            if position.signal_sl and self._is_sl_hit(position, current_price):
                await self._execute_sl(position_id)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Take Profit —É—Ä–æ–≤–Ω–∏
            if position.signal_tp1 and self._is_tp_hit(position, current_price, position.signal_tp1):
                if position.status not in [PositionStatus.TP1_HIT, PositionStatus.TP2_HIT, PositionStatus.TP3_HIT]:
                    await self._execute_tp(position_id, 1, position.signal_tp1)
            
            if position.signal_tp2 and self._is_tp_hit(position, current_price, position.signal_tp2):
                if position.status not in [PositionStatus.TP2_HIT, PositionStatus.TP3_HIT]:
                    await self._execute_tp(position_id, 2, position.signal_tp2)
            
            if position.signal_tp3 and self._is_tp_hit(position, current_price, position.signal_tp3):
                if position.status != PositionStatus.TP3_HIT:
                    await self._execute_tp(position_id, 3, position.signal_tp3)
                    
        except Exception as e:
            logger.error(f"‚ùå Error checking TP/SL levels: {e}")
    
    def _is_tp_hit(self, position: VirtualPosition, current_price: float, tp_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ Take Profit"""
        if position.side == 'LONG':
            return current_price >= tp_price
        else:
            return current_price <= tp_price
    
    def _is_sl_hit(self, position: VirtualPosition, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ Stop Loss"""
        if not position.signal_sl:
            return False
        
        if position.side == 'LONG':
            return current_price <= position.signal_sl
        else:
            return current_price >= position.signal_sl
    
    async def _execute_tp(self, position_id: str, tp_level: int, tp_price: float) -> None:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å Take Profit"""
        try:
            position = self.active_positions.get(position_id)
            if not position:
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
            close_percent = {1: 50.0, 2: 30.0, 3: 20.0}.get(tp_level, 0.0)  # 50% –Ω–∞ TP1, 30% –Ω–∞ TP2, 20% –Ω–∞ TP3
            
            if close_percent > position.remaining_percent:
                close_percent = position.remaining_percent
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            await self._execute_partial_close(position_id, tp_price, close_percent, f"TP{tp_level}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if tp_level == 1:
                position.status = PositionStatus.TP1_HIT
            elif tp_level == 2:
                position.status = PositionStatus.TP2_HIT
            elif tp_level == 3:
                position.status = PositionStatus.TP3_HIT
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            event_type = {1: EventType.TP1_REACHED, 2: EventType.TP2_REACHED, 3: EventType.TP3_REACHED}.get(tp_level)
            await self._log_position_event(
                position_id,
                event_type,
                f"TP{tp_level} reached at ${tp_price:.6f}, closed {close_percent:.1f}%",
                price_at_event=tp_price,
                pnl_at_event=position.current_pnl_usd
            )
            
            logger.info(f"üéØ TP{tp_level} hit: {position.symbol} at ${tp_price:.6f}, closed {close_percent:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå Error executing TP{tp_level}: {e}")
    
    async def _execute_sl(self, position_id: str) -> None:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å Stop Loss"""
        try:
            position = self.active_positions.get(position_id)
            if not position or not position.signal_sl:
                return
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–∑–∏—Ü–∏—é
            await self._execute_partial_close(position_id, position.signal_sl, position.remaining_percent, "SL")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            position.status = PositionStatus.SL_HIT
            position.close_time = datetime.now(timezone.utc)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self._log_position_event(
                position_id,
                EventType.SL_REACHED,
                f"Stop Loss reached at ${position.signal_sl:.6f}, position closed",
                price_at_event=position.signal_sl,
                pnl_at_event=position.current_pnl_usd
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if position_id in self.active_positions:
                del self.active_positions[position_id]
            
            logger.info(f"üõë Stop Loss hit: {position.symbol} at ${position.signal_sl:.6f}")
            
        except Exception as e:
            logger.error(f"‚ùå Error executing Stop Loss: {e}")
    
    async def _execute_partial_close(
        self, 
        position_id: str, 
        exit_price: float, 
        close_percent: float, 
        exit_type: str
    ) -> None:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            position = self.active_positions.get(position_id)
            if not position:
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è
            close_size_usd = position.position_size_usd * (close_percent / 100.0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
            if position.side == 'LONG':
                price_change = (exit_price - position.avg_entry_price) / position.avg_entry_price
            else:
                price_change = (position.avg_entry_price - exit_price) / position.avg_entry_price
            
            pnl_percent = price_change * 100 * position.leverage
            pnl_usd = close_size_usd * (price_change * position.leverage)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            position.remaining_percent = max(0.0, position.remaining_percent - close_percent)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self._save_exit_to_db(position_id, exit_price, close_size_usd, close_percent, pnl_usd, pnl_percent, exit_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
            if position.remaining_percent <= 0.1:  # –î–æ–ø—É—Å–∫ 0.1%
                position.status = PositionStatus.CLOSED
                position.close_time = datetime.now(timezone.utc)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                if position_id in self.active_positions:
                    del self.active_positions[position_id]
                
                await self._log_position_event(
                    position_id,
                    EventType.POSITION_CLOSED,
                    f"Position fully closed",
                    price_at_event=exit_price,
                    pnl_at_event=position.current_pnl_usd
                )
            
            logger.info(f"üìà Partial close: {position.symbol} {close_percent:.1f}% at ${exit_price:.6f} (PnL: {pnl_percent:.2f}%)")
            
        except Exception as e:
            logger.error(f"‚ùå Error executing partial close: {e}")
    
    async def start_monitoring(self) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π"""
        if self.monitoring_task is not None:
            return
        
        self.monitoring_task = asyncio.create_task(self._monitoring_loop())
        logger.info("üîÑ Virtual position monitoring started")
    
    async def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π"""
        if self.monitoring_task:
            self.monitoring_task.cancel()
            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                pass
            self.monitoring_task = None
            logger.info("‚èπÔ∏è Virtual position monitoring stopped")
    
    async def _monitoring_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while True:
            try:
                await self.update_position_prices()
                await asyncio.sleep(self.monitoring_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå Error in monitoring loop: {e}")
                await asyncio.sleep(self.monitoring_interval)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async def _save_position_to_db(self, position: VirtualPosition, signal_id: str, v_trade_id: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            position_data = {
                'symbol': position.symbol,
                'side': position.side,
                'position_size_usd': position.position_size_usd,
                'leverage': position.leverage,
                'margin_usd': position.margin_usd,
                'signal_entry_min': position.signal_entry_min,
                'signal_entry_max': position.signal_entry_max,
                'signal_tp1': position.signal_tp1,
                'signal_tp2': position.signal_tp2,
                'signal_tp3': position.signal_tp3,
                'signal_sl': position.signal_sl,
                'avg_entry_price': position.avg_entry_price,
                'current_price': position.current_price,
                'current_pnl_usd': position.current_pnl_usd,
                'current_pnl_percent': position.current_pnl_percent,
                'status': position.status.value,
                'filled_percent': position.filled_percent,
                'remaining_percent': position.remaining_percent,
                'signal_time': position.signal_time,
                'entry_timeout': position.entry_timeout,
                'first_entry_time': position.first_entry_time,
                'last_update_time': position.last_update_time,
                'close_time': position.close_time
            }
            
            return await virtual_position_db.save_position(position.id, signal_id, v_trade_id, position_data)
            
        except Exception as e:
            logger.error(f"‚ùå Error saving position to DB: {e}")
            return False
    
    async def _save_entry_to_db(self, position_id: str, entry_price: float, entry_size_usd: float, entry_percent: float) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        return await virtual_position_db.save_entry(
            position_id=position_id,
            entry_price=entry_price,
            entry_size_usd=entry_size_usd,
            entry_percent=entry_percent,
            entry_type='MARKET',
            entry_reason=f'Market entry at ${entry_price:.6f}'
        )
    
    async def _save_exit_to_db(self, position_id: str, exit_price: float, exit_size_usd: float, exit_percent: float, pnl_usd: float, pnl_percent: float, exit_type: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        return await virtual_position_db.save_exit(
            position_id=position_id,
            exit_price=exit_price,
            exit_size_usd=exit_size_usd,
            exit_percent=exit_percent,
            pnl_usd=pnl_usd,
            pnl_percent=pnl_percent,
            exit_type=exit_type,
            exit_reason=f'{exit_type} exit at ${exit_price:.6f}'
        )
    
    async def _log_position_event(
        self, 
        position_id: str, 
        event_type: EventType, 
        description: str, 
        price_at_event: Optional[float] = None,
        pnl_at_event: Optional[float] = None,
        event_data: Optional[Dict[str, Any]] = None
    ) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        logger.info(f"üìù Position Event: {position_id} | {event_type.value} | {description}")
        
        return await virtual_position_db.log_event(
            position_id=position_id,
            event_type=event_type.value,
            description=description,
            price_at_event=price_at_event,
            pnl_at_event=pnl_at_event,
            event_data=event_data
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
virtual_position_manager = VirtualPositionManager()

async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
    logging.basicConfig(level=logging.INFO)
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    logger.info("üß™ Testing Virtual Position Manager...")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã
    
if __name__ == "__main__":
    asyncio.run(main())
