"""
GHOST Channel Manager
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
(Telegram –∫–∞–Ω–∞–ª—ã, Discord, Twitter, RSS, API –∏ –¥—Ä.)
"""

import asyncio
import logging
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Union, Callable
from dataclasses import dataclass, asdict
from enum import Enum
import yaml

logger = logging.getLogger(__name__)

class SourceType(Enum):
    """–¢–∏–ø—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    TELEGRAM_CHANNEL = "telegram_channel"
    TELEGRAM_GROUP = "telegram_group"
    DISCORD_CHANNEL = "discord_channel"
    TWITTER_ACCOUNT = "twitter_account"
    RSS_FEED = "rss_feed"
    WEBHOOK = "webhook"
    API_ENDPOINT = "api_endpoint"
    FILE_WATCHER = "file_watcher"

class SourceStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    ACTIVE = "active"
    PAUSED = "paused"
    DISABLED = "disabled"
    ERROR = "error"
    CONNECTING = "connecting"

@dataclass
class SourceConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    source_id: str
    source_type: SourceType
    name: str
    description: str
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connection_params: Dict[str, Any]
    
    # –ü–∞—Ä—Å–∏–Ω–≥
    parser_type: str
    parser_config: Dict[str, Any]
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filters: Dict[str, Any]
    
    # –°—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    status: SourceStatus = SourceStatus.ACTIVE
    priority: int = 100  # —á–µ–º –º–µ–Ω—å—à–µ - —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    check_interval: int = 60  # —Å–µ–∫—É–Ω–¥—ã
    max_retries: int = 3
    retry_delay: int = 300  # —Å–µ–∫—É–Ω–¥—ã
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    last_success: Optional[datetime] = None
    last_error: Optional[str] = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()
        self.updated_at = datetime.now()

@dataclass
class SourceStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É"""
    source_id: str
    messages_received: int = 0
    signals_detected: int = 0
    signals_parsed: int = 0
    signals_successful: int = 0
    errors_count: int = 0
    uptime_percentage: float = 0.0
    avg_response_time: float = 0.0
    last_activity: Optional[datetime] = None

class ChannelManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, config_dir: str = "config/sources"):
        self.config_dir = config_dir
        self.sources: Dict[str, SourceConfig] = {}
        self.listeners: Dict[str, Any] = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        self.stats: Dict[str, SourceStats] = {}
        self.parser_registry: Dict[str, Callable] = {}
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–∏–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(config_dir, exist_ok=True)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_sources_from_json()
        
        logger.info(f"Channel Manager initialized with config dir: {config_dir}")
    
    def register_parser(self, parser_type: str, parser_class: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        self.parser_registry[parser_type] = parser_class
        logger.info(f"Registered parser: {parser_type}")
    
    def add_source(self, source_config: SourceConfig) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self._validate_source_config(source_config):
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä
            self.sources[source_config.source_id] = source_config
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats[source_config.source_id] = SourceStats(source_config.source_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self._save_source_config(source_config)
            
            logger.info(f"Added source: {source_config.name} ({source_config.source_id})")
            return True
            
        except Exception as e:
            logger.error(f"Error adding source {source_config.source_id}: {e}")
            return False
    
    def load_sources_from_json(self) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        loaded_count = 0
        json_config_path = "config/sources.json"
        
        try:
            if not os.path.exists(json_config_path):
                logger.warning(f"JSON config file not found: {json_config_path}")
                return 0
                
            with open(json_config_path, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            sources = config_data.get('sources', [])
            
            for source_data in sources:
                try:
                    # –°–æ–∑–¥–∞–µ–º SourceConfig –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö
                    source_config = self._config_from_json_dict(source_data)
                    
                    if source_config and source_data.get('is_active', False):
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Ä–µ–µ—Å—Ç—Ä
                        self.sources[source_config.source_id] = source_config
                        self.stats[source_config.source_id] = SourceStats(source_config.source_id)
                        loaded_count += 1
                        
                        logger.info(f"‚úÖ Loaded active source: {source_config.name} ({source_config.source_id})")
                    else:
                        logger.debug(f"‚è∏Ô∏è Skipped inactive source: {source_data.get('name', 'Unknown')}")
                        
                except Exception as e:
                    logger.error(f"Error loading source from JSON: {e}")
                    
            logger.info(f"üì° Loaded {loaded_count} active sources from JSON config")
            return loaded_count
            
        except Exception as e:
            logger.error(f"Error loading sources from JSON config: {e}")
            return 0
    
    def _config_from_json_dict(self, data: Dict) -> Optional[SourceConfig]:
        """–°–æ–∑–¥–∞–Ω–∏–µ SourceConfig –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º source_type –≤ enum
            source_type = SourceType(data.get('source_type', 'telegram_channel'))
            
            # –°–æ–∑–¥–∞–µ–º SourceConfig
            config = SourceConfig(
                source_id=data.get('source_id', ''),
                source_type=source_type,
                name=data.get('name', ''),
                description=data.get('notes', ''),
                connection_params=data.get('connection_params', {}),
                parser_type=data.get('parser_type', 'whales_universal'),
                parser_config={},
                filters={
                    'keywords_include': data.get('keywords_filter', []),
                    'keywords_exclude': data.get('exclude_keywords', [])
                },
                status=SourceStatus.ACTIVE if data.get('is_active', False) else SourceStatus.DISABLED,
                priority=data.get('priority', 100)
            )
            
            return config
            
        except Exception as e:
            logger.error(f"Error creating SourceConfig from JSON: {e}")
            return None
    
    def load_sources_from_config(self) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        loaded_count = 0
        
        try:
            # –ò—â–µ–º –≤—Å–µ YAML —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤
            for filename in os.listdir(self.config_dir):
                if filename.endswith('.yaml') or filename.endswith('.yml'):
                    filepath = os.path.join(self.config_dir, filename)
                    
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            config_data = yaml.safe_load(f)
                        
                        # –°–æ–∑–¥–∞–µ–º SourceConfig –∏–∑ YAML
                        source_config = self._config_from_dict(config_data)
                        
                        if source_config and self.add_source(source_config):
                            loaded_count += 1
                            
                    except Exception as e:
                        logger.error(f"Error loading config from {filepath}: {e}")
            
            logger.info(f"Loaded {loaded_count} sources from config directory")
            return loaded_count
            
        except Exception as e:
            logger.error(f"Error loading sources from config: {e}")
            return 0
    
    async def start_source(self, source_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if source_id not in self.sources:
            logger.error(f"Source not found: {source_id}")
            return False
        
        source = self.sources[source_id]
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω
            if source_id in self.listeners:
                logger.warning(f"Source {source_id} already running")
                return True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            source.status = SourceStatus.CONNECTING
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å
            listener = await self._create_listener(source)
            
            if listener:
                self.listeners[source_id] = listener
                source.status = SourceStatus.ACTIVE
                source.last_success = datetime.now()
                
                logger.info(f"Started source: {source.name}")
                return True
            else:
                source.status = SourceStatus.ERROR
                return False
                
        except Exception as e:
            logger.error(f"Error starting source {source_id}: {e}")
            source.status = SourceStatus.ERROR
            source.last_error = str(e)
            return False
    
    async def stop_source(self, source_id: str) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if source_id not in self.listeners:
            logger.warning(f"Source {source_id} not running")
            return True
        
        try:
            listener = self.listeners[source_id]
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
            if hasattr(listener, 'stop'):
                await listener.stop()
            elif hasattr(listener, 'close'):
                await listener.close()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            del self.listeners[source_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if source_id in self.sources:
                self.sources[source_id].status = SourceStatus.PAUSED
            
            logger.info(f"Stopped source: {source_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error stopping source {source_id}: {e}")
            return False
    
    async def start_all_sources(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        results = {}
        
        for source_id, source in self.sources.items():
            if source.status == SourceStatus.ACTIVE:
                results[source_id] = await self.start_source(source_id)
        
        active_count = sum(1 for success in results.values() if success)
        logger.info(f"Started {active_count}/{len(results)} sources")
        
        return results
    
    async def stop_all_sources(self) -> Dict[str, bool]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        results = {}
        
        for source_id in list(self.listeners.keys()):
            results[source_id] = await self.stop_source(source_id)
        
        return results
    
    def get_source_stats(self, source_id: str) -> Optional[SourceStats]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É"""
        return self.stats.get(source_id)
    
    def get_all_stats(self) -> Dict[str, SourceStats]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        return self.stats.copy()
    
    def get_active_sources(self) -> List[SourceConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return [source for source in self.sources.values() if source.status == SourceStatus.ACTIVE]
    
    def update_source_stats(self, source_id: str, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if source_id in self.stats:
            stats = self.stats[source_id]
            
            for key, value in kwargs.items():
                if hasattr(stats, key):
                    if key.endswith('_count'):
                        # –°—á–µ—Ç—á–∏–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
                        setattr(stats, key, getattr(stats, key) + value)
                    else:
                        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                        setattr(stats, key, value)
            
            stats.last_activity = datetime.now()
    
    async def _create_listener(self, source: SourceConfig) -> Optional[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            if source.source_type == SourceType.TELEGRAM_CHANNEL:
                return await self._create_telegram_listener(source)
            elif source.source_type == SourceType.DISCORD_CHANNEL:
                return await self._create_discord_listener(source)
            elif source.source_type == SourceType.RSS_FEED:
                return await self._create_rss_listener(source)
            elif source.source_type == SourceType.WEBHOOK:
                return await self._create_webhook_listener(source)
            else:
                logger.error(f"Unsupported source type: {source.source_type}")
                return None
                
        except Exception as e:
            logger.error(f"Error creating listener for {source.source_id}: {e}")
            return None
    
    async def _create_telegram_listener(self, source: SourceConfig) -> Optional[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ Telegram —Å–ª—É—à–∞—Ç–µ–ª—è"""
        from core.telegram_listener import TelegramListener
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        params = source.connection_params
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
        listener = TelegramListener(
            api_id=params.get('api_id'),
            api_hash=params.get('api_hash'),
            phone=params.get('phone')
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if await listener.initialize():
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
            from core.telegram_listener import ChannelConfig
            
            channel_config = ChannelConfig(
                channel_id=params.get('channel_id'),
                channel_name=source.name,
                trader_id=source.source_id,
                is_active=True,
                keywords_filter=source.filters.get('keywords_include', []),
                exclude_keywords=source.filters.get('keywords_exclude', [])
            )
            
            listener.add_channel(channel_config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
            asyncio.create_task(listener.start_listening())
            
            return listener
        
        return None
    
    async def _create_discord_listener(self, source: SourceConfig) -> Optional[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ Discord —Å–ª—É—à–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)"""
        logger.info(f"Discord listener for {source.source_id} - not implemented yet")
        return None
    
    async def _create_rss_listener(self, source: SourceConfig) -> Optional[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ RSS —Å–ª—É—à–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)"""
        logger.info(f"RSS listener for {source.source_id} - not implemented yet")
        return None
    
    async def _create_webhook_listener(self, source: SourceConfig) -> Optional[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ Webhook —Å–ª—É—à–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)"""
        logger.info(f"Webhook listener for {source.source_id} - not implemented yet")
        return None
    
    def _validate_source_config(self, source: SourceConfig) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if not source.source_id:
            logger.error("Source ID is required")
            return False
        
        if source.source_id in self.sources:
            logger.error(f"Source ID already exists: {source.source_id}")
            return False
        
        if not source.connection_params:
            logger.error(f"Connection params required for {source.source_id}")
            return False
        
        return True
    
    def _save_source_config(self, source: SourceConfig):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ —Ñ–∞–π–ª"""
        try:
            filename = f"{source.source_id}.yaml"
            filepath = os.path.join(self.config_dir, filename)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
            config_dict = asdict(source)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
            for key, value in config_dict.items():
                if isinstance(value, datetime):
                    config_dict[key] = value.isoformat()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º enums –≤ —Å—Ç—Ä–æ–∫–∏
            config_dict['source_type'] = source.source_type.value
            config_dict['status'] = source.status.value
            
            with open(filepath, 'w', encoding='utf-8') as f:
                yaml.dump(config_dict, f, default_flow_style=False, allow_unicode=True)
                
        except Exception as e:
            logger.error(f"Error saving config for {source.source_id}: {e}")
    
    def _config_from_dict(self, config_data: Dict[str, Any]) -> Optional[SourceConfig]:
        """–°–æ–∑–¥–∞–Ω–∏–µ SourceConfig –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ enums
            if 'source_type' in config_data:
                config_data['source_type'] = SourceType(config_data['source_type'])
            
            if 'status' in config_data:
                config_data['status'] = SourceStatus(config_data['status'])
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
            for date_field in ['created_at', 'updated_at', 'last_success']:
                if date_field in config_data and config_data[date_field]:
                    config_data[date_field] = datetime.fromisoformat(config_data[date_field])
            
            return SourceConfig(**config_data)
            
        except Exception as e:
            logger.error(f"Error creating SourceConfig from dict: {e}")
            return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
def create_example_sources():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    # 1. Whales Guide Telegram
    whales_guide = SourceConfig(
        source_id="whalesguide_telegram",
        source_type=SourceType.TELEGRAM_CHANNEL,
        name="Whales Guide",
        description="Main crypto signals channel",
        connection_params={
            "api_id": "YOUR_API_ID",
            "api_hash": "YOUR_API_HASH", 
            "phone": "YOUR_PHONE",
            "channel_id": "-1001234567890"
        },
        parser_type="whales_crypto_parser",
        parser_config={
            "confidence_threshold": 0.7,
            "auto_detect_trader": True
        },
        filters={
            "keywords_include": ["longing", "buying", "long", "short"],
            "keywords_exclude": ["spam", "promo", "advertisement"],
            "min_confidence": 0.8
        },
        priority=10  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    )
    
    # 2. 2Trade Channel
    trade_2_channel = SourceConfig(
        source_id="2trade_telegram",
        source_type=SourceType.TELEGRAM_CHANNEL,
        name="2Trade Channel",
        description="Secondary signals source",
        connection_params={
            "api_id": "YOUR_API_ID",
            "api_hash": "YOUR_API_HASH",
            "phone": "YOUR_PHONE", 
            "channel_id": "-1001234567891"
        },
        parser_type="2trade_parser",
        parser_config={
            "confidence_threshold": 0.6
        },
        filters={
            "keywords_include": ["signal", "entry", "target"],
            "keywords_exclude": ["test", "demo"]
        },
        priority=20
    )
    
    # 3. VIP Private Group
    vip_group = SourceConfig(
        source_id="vip_private_group",
        source_type=SourceType.TELEGRAM_GROUP,
        name="VIP Private Signals",
        description="Premium signals group",
        connection_params={
            "api_id": "YOUR_API_ID",
            "api_hash": "YOUR_API_HASH",
            "phone": "YOUR_PHONE",
            "channel_id": "-1001234567892"
        },
        parser_type="vip_signals_parser",
        parser_config={
            "confidence_threshold": 0.9,
            "premium_features": True
        },
        filters={
            "keywords_include": ["üî•", "üíé", "VIP"],
            "min_targets": 2
        },
        priority=5  # –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    )
    
    return [whales_guide, trade_2_channel, vip_group]


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Channel Manager
    async def test_channel_manager():
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CHANNEL MANAGER")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = ChannelManager("config/test_sources")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        examples = create_example_sources()
        
        for source in examples:
            success = manager.add_source(source)
            print(f"{'‚úÖ' if success else '‚ùå'} Added: {source.name}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä SOURCES LOADED: {len(manager.sources)}")
        
        for source_id, source in manager.sources.items():
            print(f"   ‚Ä¢ {source.name} ({source.source_type.value}) - {source.status.value}")
        
        print(f"\nüéØ CHANNEL MANAGER –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_channel_manager())
