"""
GHOST Live Signal Processor
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è UnifiedSignalSystem —Å ChannelManager –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ live –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import asdict

# –ù–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from signals.unified_signal_system import UnifiedSignalParser, UnifiedSignal, SignalStatus, SignalSource
from core.channel_manager import ChannelManager, SourceConfig
from core.telegram_listener import TelegramListener

# Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
import os
from supabase import create_client, Client

logger = logging.getLogger(__name__)

class LiveSignalProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∂–∏–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç Telegram –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.unified_parser = UnifiedSignalParser()
        self.channel_manager = ChannelManager()
        self.telegram_listener = None
        
        # Supabase –∫–ª–∏–µ–Ω—Ç
        self.supabase = self._init_supabase()
        
        # –ö—ç—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        self.processed_messages = set()
        self.recent_signals = {}  # trader_id -> –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.stats = {
            "messages_received": 0,
            "signals_detected": 0,
            "signals_parsed": 0,
            "signals_saved": 0,
            "duplicates_filtered": 0,
            "errors": 0
        }
        
        logger.info("Live Signal Processor initialized")
    
    def _init_supabase(self) -> Optional[Client]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            supabase_url = os.getenv("NEXT_PUBLIC_SUPABASE_URL")
            supabase_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
            
            if not supabase_url or not supabase_key:
                logger.warning("Supabase credentials not found")
                return None
            
            supabase = create_client(supabase_url, supabase_key)
            logger.info("‚úÖ Supabase client initialized")
            return supabase
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Supabase: {e}")
            return None
    
    async def start_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∏–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üöÄ Starting live signal processing...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        active_sources = self.channel_manager.get_active_sources()
        logger.info(f"üì° Found {len(active_sources)} active sources")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram listener
        await self._start_telegram_processing()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        await self._start_background_tasks()
        
        logger.info("‚úÖ Live signal processing started")
    
    async def _start_telegram_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            from core.channel_manager import SourceType
            
            # –ü–æ–ª—É—á–∞–µ–º Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            telegram_sources = [
                s for s in self.channel_manager.get_active_sources() 
                if s.source_type in [SourceType.TELEGRAM_CHANNEL, SourceType.TELEGRAM_GROUP]
            ]
            
            if not telegram_sources:
                logger.warning("No active Telegram sources found")
                return
            
            # –°–æ–∑–¥–∞–µ–º Telegram listener
            self.telegram_listener = TelegramListener()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.telegram_listener.set_message_handler(self._handle_telegram_message)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self.telegram_listener.start())
            
            logger.info(f"üì± Telegram processing started for {len(telegram_sources)} sources")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start Telegram processing: {e}")
    
    async def _handle_telegram_message(self, message_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram"""
        try:
            self.stats["messages_received"] += 1
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id = message_data.get("chat_id")
            message_id = message_data.get("message_id")
            text = message_data.get("text", "")
            timestamp = message_data.get("timestamp", datetime.now())
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            unique_id = f"{chat_id}_{message_id}"
            
            if unique_id in self.processed_messages:
                self.stats["duplicates_filtered"] += 1
                return
            
            self.processed_messages.add(unique_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            source_config = self._find_source_by_chat_id(chat_id)
            if not source_config:
                logger.debug(f"Unknown source for chat_id: {chat_id}")
                return
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ SignalSource enum
            signal_source = self._map_source_type(source_config.source_type)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if not self._message_looks_like_signal(text, source_config):
                logger.debug(f"Message filtered out: {text[:50]}...")
                return
            
            self.stats["signals_detected"] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π —Å–∏–≥–Ω–∞–ª
            await self._save_raw_signal(text, source_config, message_data)
            
            # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
            parsed_signal = await self.unified_parser.parse_signal(
                raw_text=text,
                source=signal_source,
                trader_id=source_config.source_id,
                message_id=str(message_id)
            )
            
            if parsed_signal and parsed_signal.is_valid:
                self.stats["signals_parsed"] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                await self._save_parsed_signal(parsed_signal, source_config)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                self._update_recent_signals_cache(parsed_signal)
                
                logger.info(f"‚úÖ Signal processed: {parsed_signal.symbol} {parsed_signal.side} from {source_config.name}")
                
            else:
                logger.warning(f"‚ùå Failed to parse signal from {source_config.name}")
                
        except Exception as e:
            self.stats["errors"] += 1
            logger.error(f"‚ùå Error handling Telegram message: {e}")
    
    def _find_source_by_chat_id(self, chat_id: str) -> Optional[SourceConfig]:
        """–ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ chat_id"""
        for source in self.channel_manager.get_active_sources():
            if str(source.connection_params.get("channel_id")) == str(chat_id):
                return source
        return None
    
    def _map_source_type(self, source_type) -> SignalSource:
        """–ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ SignalSource enum"""
        from core.channel_manager import SourceType
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω enum, –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        if isinstance(source_type, SourceType):
            source_type_str = source_type.value
        else:
            source_type_str = str(source_type)
            
        mapping = {
            "telegram_channel": SignalSource.TELEGRAM_WHALESGUIDE,
            "telegram_whalesguide": SignalSource.TELEGRAM_WHALESGUIDE,
            "telegram_2trade": SignalSource.TELEGRAM_2TRADE,
            "telegram_crypto_hub": SignalSource.TELEGRAM_CRYPTO_HUB,
            "telegram_coinpulse": SignalSource.TELEGRAM_COINPULSE,
            "discord_channel": SignalSource.DISCORD_VIP,
        }
        return mapping.get(source_type_str, SignalSource.UNKNOWN)
    
    def _message_looks_like_signal(self, text: str, source_config: SourceConfig) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if len(text.strip()) < 20:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if source_config.keywords_filter:
            text_lower = text.lower()
            if not any(keyword in text_lower for keyword in source_config.keywords_filter):
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
        if source_config.exclude_keywords:
            text_lower = text.lower()
            if any(keyword in text_lower for keyword in source_config.exclude_keywords):
                return False
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_patterns = [
            r"(entry|–≤—Ö–æ–¥|–≤—Ö–æ–¥–∞)",
            r"(target|tp\d|—Ü–µ–ª—å)",
            r"(stop|sl|—Å—Ç–æ–ø)",
            r"(long|short|–ª–æ–Ω–≥|—à–æ—Ä—Ç)",
            r"(buy|sell|–ø–æ–∫—É–ø|–ø—Ä–æ–¥–∞)",
            r"usdt",
            r"\$\d+",  # –¶–µ–Ω—ã —Å –¥–æ–ª–ª–∞—Ä–æ–º
            r"\d+\.\d+",  # –î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
        ]
        
        text_lower = text.lower()
        matches = sum(1 for pattern in signal_patterns if __import__('re').search(pattern, text_lower))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è - –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–∏–≥–Ω–∞–ª
        return matches >= 3
    
    async def _save_raw_signal(self, text: str, source_config: SourceConfig, message_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É"""
        try:
            if not self.supabase:
                return
            
            raw_signal_data = {
                "trader_id": source_config.source_id,
                "source_msg_id": str(message_data.get("message_id")),
                "posted_at": message_data.get("timestamp", datetime.now()).isoformat(),
                "text": text,
                "meta": {
                    "chat_id": message_data.get("chat_id"),
                    "source_name": source_config.name,
                    "source_type": source_config.source_type,
                    "processing_version": "v1.0"
                },
                "processed": False
            }
            
            result = self.supabase.table("signals_raw").insert(raw_signal_data).execute()
            
            if result.data:
                logger.debug(f"‚úÖ Raw signal saved for {source_config.name}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to save raw signal: {e}")
    
    async def _save_parsed_signal(self, signal: UnifiedSignal, source_config: SourceConfig):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É"""
        try:
            if not self.supabase:
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è signals_parsed
            parsed_data = {
                "trader_id": signal.trader_id,
                "posted_at": signal.received_at.isoformat(),
                "symbol": signal.symbol,
                "side": signal.side,
                "entry_type": signal.entry_type,
                "entry": float(signal.entry_single) if signal.entry_single else None,
                "range_low": float(min(signal.entry_zone)) if signal.entry_zone else None,
                "range_high": float(max(signal.entry_zone)) if signal.entry_zone else None,
                "tp1": float(signal.tp1) if signal.tp1 else None,
                "tp2": float(signal.tp2) if signal.tp2 else None,
                "tp3": float(signal.tp3) if signal.tp3 else None,
                "tp4": float(signal.tp4) if signal.tp4 else None,
                "sl": float(signal.sl) if signal.sl else None,
                "leverage_hint": self._extract_leverage_number(signal.leverage),
                "confidence": float(signal.confidence) if signal.confidence else None,
                "parse_version": "unified_v1.0",
                "checksum": self._generate_signal_checksum(signal),
                "is_valid": signal.is_valid
            }
            
            result = self.supabase.table("signals_parsed").insert(parsed_data).execute()
            
            if result.data:
                self.stats["signals_saved"] += 1
                logger.debug(f"‚úÖ Parsed signal saved: {signal.symbol} {signal.side}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∏—Å—Ö–æ–¥–∞ –≤ —Ñ–æ–Ω–µ
                asyncio.create_task(self._simulate_signal_outcome(result.data[0], signal))
            
        except Exception as e:
            logger.error(f"‚ùå Failed to save parsed signal: {e}")
    
    def _extract_leverage_number(self, leverage_str: Optional[str]) -> Optional[int]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–µ—á–∞"""
        if not leverage_str:
            return None
        
        import re
        match = re.search(r"(\d+)", leverage_str)
        return int(match.group(1)) if match else None
    
    def _generate_signal_checksum(self, signal: UnifiedSignal) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
        import hashlib
        
        key_data = f"{signal.trader_id}_{signal.symbol}_{signal.side}_{signal.entry_single or signal.avg_entry_price}_{signal.tp1}_{signal.sl}"
        return hashlib.md5(key_data.encode()).hexdigest()
    
    async def _simulate_signal_outcome(self, parsed_signal_data: Dict, original_signal: UnifiedSignal):
        """–°–∏–º—É–ª—è—Ü–∏—è –∏—Å—Ö–æ–¥–∞ —Å–∏–≥–Ω–∞–ª–∞ (–æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞)"""
        try:
            # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —Å–∏–≥–Ω–∞–ª—É
            logger.debug(f"üìä Simulating outcome for {original_signal.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to simulate signal outcome: {e}")
    
    def _update_recent_signals_cache(self, signal: UnifiedSignal):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        trader_id = signal.trader_id
        
        if trader_id not in self.recent_signals:
            self.recent_signals[trader_id] = []
        
        self.recent_signals[trader_id].append({
            "symbol": signal.symbol,
            "side": signal.side,
            "timestamp": signal.received_at,
            "confidence": signal.confidence
        })
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞
        self.recent_signals[trader_id] = self.recent_signals[trader_id][-10:]
    
    async def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        
        # –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
        asyncio.create_task(self._cleanup_cache_periodically())
        
        # –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        asyncio.create_task(self._update_stats_periodically())
        
        logger.info("üìä Background tasks started")
    
    async def _cleanup_cache_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        while True:
            try:
                await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ processed_messages
                if len(self.processed_messages) > 10000:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5000
                    recent_messages = list(self.processed_messages)[-5000:]
                    self.processed_messages = set(recent_messages)
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –∫—ç—à–∞
                cutoff_time = datetime.now() - timedelta(hours=24)
                for trader_id in list(self.recent_signals.keys()):
                    self.recent_signals[trader_id] = [
                        s for s in self.recent_signals[trader_id]
                        if s["timestamp"] > cutoff_time
                    ]
                    
                    if not self.recent_signals[trader_id]:
                        del self.recent_signals[trader_id]
                
                logger.debug("üßπ Cache cleanup completed")
                
            except Exception as e:
                logger.error(f"‚ùå Error in cache cleanup: {e}")
    
    async def _update_stats_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while True:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                logger.info(f"üìä Processing stats: {self.stats}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                await self._save_processing_stats()
                
            except Exception as e:
                logger.error(f"‚ùå Error updating stats: {e}")
    
    async def _save_processing_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            if not self.supabase:
                return
            
            stats_data = {
                "timestamp": datetime.now().isoformat(),
                "component": "live_signal_processor",
                "stats": self.stats,
                "active_sources": len(self.channel_manager.get_active_sources()),
                "recent_traders": len(self.recent_signals)
            }
            
            # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É system_stats
            # self.supabase.table("system_stats").insert(stats_data).execute()
            
        except Exception as e:
            logger.error(f"‚ùå Failed to save processing stats: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            **self.stats,
            "active_sources": len(self.channel_manager.get_active_sources()),
            "recent_traders": len(self.recent_signals),
            "cache_size": len(self.processed_messages)
        }
    
    async def stop_processing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("üõë Stopping live signal processing...")
        
        if self.telegram_listener:
            await self.telegram_listener.stop()
        
        logger.info("‚úÖ Live signal processing stopped")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
live_processor = LiveSignalProcessor()

def get_live_processor() -> LiveSignalProcessor:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    return live_processor


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_live_processor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ live –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LIVE SIGNAL PROCESSOR")
    print("=" * 60)
    
    processor = get_live_processor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print(f"üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    print(f"   Unified Parser: ‚úÖ")
    print(f"   Channel Manager: ‚úÖ")
    print(f"   Supabase: {'‚úÖ' if processor.supabase else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    active_sources = processor.channel_manager.get_active_sources()
    print(f"\nüì° –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {len(active_sources)}")
    for source in active_sources:
        print(f"   ‚Ä¢ {source.name} ({source.source_type})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    test_message = {
        "chat_id": "-1001234567890",
        "message_id": "12345",
        "text": """Longing #BTCUSDT Here
        
        Entry: $45000 - $44500
        Targets: $46000, $47000
        Stoploss: $43000""",
        "timestamp": datetime.now()
    }
    
    print(f"\nüß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await processor._handle_telegram_message(test_message)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {processor.get_stats()}")
    
    print(f"\nüéâ LIVE PROCESSOR READY!")


if __name__ == "__main__":
    asyncio.run(test_live_processor())
