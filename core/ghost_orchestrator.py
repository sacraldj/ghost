#!/usr/bin/env python3
"""
GHOST Unified System - Central Orchestrator
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–æ–π GHOST

–§—É–Ω–∫—Ü–∏–∏:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ lifecycle –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
"""

import asyncio
import json
import logging
import os
import sys
import time
import traceback
import psutil
import signal
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, asdict
from pathlib import Path
import yaml
# Temporarily disable Redis due to compatibility issues
aioredis = None
import subprocess
from concurrent.futures import ThreadPoolExecutor
from contextlib import asynccontextmanager

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã)
try:
    from utils.ghost_logger import GhostLogger
except ImportError:
    GhostLogger = None

try:
    from utils.system_monitor import SystemMonitor
except ImportError:
    SystemMonitor = None

try:
    from utils.config_manager import ConfigManager
except ImportError:
    ConfigManager = None

try:
    from utils.database_manager import DatabaseManager
except ImportError:
    DatabaseManager = None

try:
    from utils.notification_manager import NotificationManager
except ImportError:
    NotificationManager = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('orchestrator.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('GhostOrchestrator')

@dataclass
class ModuleConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å–∏—Å—Ç–µ–º—ã"""
    name: str
    module_path: str
    command: List[str]
    working_dir: str
    enabled: bool = True
    restart_on_failure: bool = True
    max_restarts: int = 3
    restart_delay: float = 5.0
    health_check_interval: float = 30.0
    dependencies: List[str] = None
    environment: Dict[str, str] = None
    
    def __post_init__(self):
        if self.dependencies is None:
            self.dependencies = []
        if self.environment is None:
            self.environment = {}

@dataclass 
class ModuleStatus:
    """–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è"""
    name: str
    process: Optional[subprocess.Popen] = None
    pid: Optional[int] = None
    status: str = "stopped"  # stopped, starting, running, failed, restarting
    last_restart: Optional[datetime] = None
    restart_count: int = 0
    last_health_check: Optional[datetime] = None
    health_status: str = "unknown"  # healthy, unhealthy, unknown
    start_time: Optional[datetime] = None
    cpu_usage: float = 0.0
    memory_usage: float = 0.0
    error_message: Optional[str] = None

class GhostOrchestrator:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã GHOST"""
    
    def __init__(self, config_path: str = "config/system_config.yaml"):
        self.config_path = config_path
        self.config = {}
        self.modules: Dict[str, ModuleConfig] = {}
        self.module_status: Dict[str, ModuleStatus] = {}
        self.redis = None
        self.db_manager = None
        self.notification_manager = None
        self.system_monitor = None
        self.ghost_logger = None
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.running = False
        self.shutdown_event = asyncio.Event()
        self.executor = ThreadPoolExecutor(max_workers=4)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.system_metrics = {
            'start_time': datetime.utcnow(),
            'total_restarts': 0,
            'uptime': 0,
            'modules_healthy': 0,
            'modules_total': 0
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("üöÄ Initializing GHOST Orchestrator...")
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self._load_config()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self._init_redis()
            await self._init_database()
            await self._init_notifications()
            await self._init_system_monitor()
            await self._init_logger()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            self._setup_signal_handlers()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
            await self._load_modules()
            
            logger.info("‚úÖ GHOST Orchestrator initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize orchestrator: {e}")
            logger.error(traceback.format_exc())
            raise
    
    async def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    self.config = yaml.safe_load(f)
            else:
                # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.config = self._get_default_config()
                os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
                with open(self.config_path, 'w', encoding='utf-8') as f:
                    yaml.dump(self.config, f, default_flow_style=False)
                logger.info(f"Created default config at {self.config_path}")
                
        except Exception as e:
            logger.error(f"Failed to load config: {e}")
            self.config = self._get_default_config()
    
    def _get_default_config(self) -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'orchestrator': {
                'check_interval': 10,
                'max_restarts': 3,
                'health_check_timeout': 30,
                'log_level': 'INFO'
            },
            'redis': {
                'url': 'redis://localhost:6379/0',
                'enabled': True
            },
            'database': {
                'supabase_url': os.getenv('SUPABASE_URL'),
                'supabase_key': os.getenv('SUPABASE_SECRET_KEY')
            },
            'modules': {
                'news_engine': {
                    'enabled': True,
                    'command': ['python3', 'enhanced_news_engine.py'],
                    'working_dir': 'news_engine',
                    'restart_on_failure': True,
                    'max_restarts': 3,
                    'dependencies': []
                },
                'price_feed': {
                    'enabled': True,
                    'command': ['python3', 'price_feed_engine.py'],
                    'working_dir': 'news_engine',
                    'restart_on_failure': True,
                    'max_restarts': 3,
                    'dependencies': []
                },
                'telegram_listener': {
                    'enabled': False,  # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω
                    'command': ['python3', 'telegram_listener.py'],
                    'working_dir': 'core',
                    'restart_on_failure': True,
                    'max_restarts': 5,
                    'dependencies': []
                },
                'trade_executor': {
                    'enabled': False,  # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω
                    'command': ['python3', 'trade_executor.py'],
                    'working_dir': 'core',
                    'restart_on_failure': True,
                    'max_restarts': 3,
                    'dependencies': ['telegram_listener']
                },
                'position_manager': {
                    'enabled': False,  # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω
                    'command': ['python3', 'position_manager.py'],
                    'working_dir': 'core',
                    'restart_on_failure': True,
                    'max_restarts': 3,
                    'dependencies': ['trade_executor']
                }
            }
        }
    
    async def _init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis"""
        if not aioredis:
            logger.warning("‚ö†Ô∏è aioredis not available, Redis disabled")
            self.redis = None
            return
            
        if not self.config.get('redis', {}).get('enabled', False):
            logger.info("Redis disabled in config")
            return
            
        try:
            redis_url = self.config['redis']['url']
            self.redis = await aioredis.from_url(redis_url)
            await self.redis.ping()
            logger.info("‚úÖ Redis connected")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Redis connection failed: {e}")
            self.redis = None
    
    async def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if DatabaseManager:
                self.db_manager = DatabaseManager(self.config['database'])
                await self.db_manager.initialize()
            logger.info("‚úÖ Database manager initialized")
        except Exception as e:
            logger.error(f"‚ùå Database initialization failed: {e}")
    
    async def _init_notifications(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if NotificationManager:
                self.notification_manager = NotificationManager(self.config)
                await self.notification_manager.initialize()
            logger.info("‚úÖ Notification manager initialized")
        except Exception as e:
            logger.error(f"‚ùå Notification manager initialization failed: {e}")
    
    async def _init_system_monitor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            if SystemMonitor:
                self.system_monitor = SystemMonitor()
            logger.info("‚úÖ System monitor initialized")
        except Exception as e:
            logger.error(f"‚ùå System monitor initialization failed: {e}")
    
    async def _init_logger(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ GHOST"""
        try:
            if GhostLogger:
                self.ghost_logger = GhostLogger(self.config)
            logger.info("‚úÖ GHOST logger initialized")
        except Exception as e:
            logger.error(f"‚ùå GHOST logger initialization failed: {e}")
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"Received signal {signum}, initiating shutdown...")
        asyncio.create_task(self.shutdown())
    
    async def _load_modules(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π"""
        modules_config = self.config.get('modules', {})
        
        for module_name, module_config in modules_config.items():
            if not module_config.get('enabled', True):
                continue
                
            self.modules[module_name] = ModuleConfig(
                name=module_name,
                module_path=module_config['working_dir'],
                command=module_config['command'],
                working_dir=module_config['working_dir'],
                enabled=module_config.get('enabled', True),
                restart_on_failure=module_config.get('restart_on_failure', True),
                max_restarts=module_config.get('max_restarts', 3),
                restart_delay=module_config.get('restart_delay', 5.0),
                dependencies=module_config.get('dependencies', []),
                environment=module_config.get('environment', {})
            )
            
            self.module_status[module_name] = ModuleStatus(name=module_name)
            
        logger.info(f"Loaded {len(self.modules)} modules")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("üöÄ Starting GHOST Orchestrator...")
        self.running = True
        
        try:
            # –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            await self._start_modules()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self._main_loop()
            
        except Exception as e:
            logger.error(f"‚ùå Orchestrator error: {e}")
            logger.error(traceback.format_exc())
        finally:
            await self.shutdown()
    
    async def _start_modules(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        # –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
        sorted_modules = self._topological_sort()
        
        for module_name in sorted_modules:
            if self.modules[module_name].enabled:
                await self._start_module(module_name)
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
                await asyncio.sleep(2)
    
    def _topological_sort(self) -> List[str]:
        """–¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º"""
        visited = set()
        temp_visited = set()
        result = []
        
        def visit(module_name: str):
            if module_name in temp_visited:
                raise ValueError(f"Circular dependency detected: {module_name}")
            if module_name in visited:
                return
                
            temp_visited.add(module_name)
            
            # –ü–æ—Å–µ—â–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            for dep in self.modules[module_name].dependencies:
                if dep in self.modules:
                    visit(dep)
            
            temp_visited.remove(module_name)
            visited.add(module_name)
            result.append(module_name)
        
        for module_name in self.modules:
            if module_name not in visited:
                visit(module_name)
        
        return result
    
    async def _start_module(self, module_name: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        module_config = self.modules[module_name]
        module_status = self.module_status[module_name]
        
        logger.info(f"üü¢ Starting module: {module_name}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            for dep in module_config.dependencies:
                if dep not in self.module_status or self.module_status[dep].status != "running":
                    logger.error(f"‚ùå Dependency {dep} not running for {module_name}")
                    return False
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            cmd = module_config.command
            working_dir = os.path.abspath(module_config.working_dir)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env.update(module_config.environment)
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            module_status.status = "starting"
            module_status.start_time = datetime.utcnow()
            
            process = subprocess.Popen(
                cmd,
                cwd=working_dir,
                env=env,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            module_status.process = process
            module_status.pid = process.pid
            module_status.status = "running"
            module_status.restart_count = 0
            
            logger.info(f"‚úÖ Module {module_name} started with PID {process.pid}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ Redis
            await self._save_module_status(module_name)
            
            return True
            
        except Exception as e:
            module_status.status = "failed"
            module_status.error_message = str(e)
            logger.error(f"‚ùå Failed to start module {module_name}: {e}")
            return False
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        check_interval = self.config['orchestrator']['check_interval']
        
        while self.running and not self.shutdown_event.is_set():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª–µ–π
                await self._check_modules_health()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
                await self._update_system_metrics()
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ Redis
                await self._save_system_status()
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(check_interval)
                
            except Exception as e:
                logger.error(f"Error in main loop: {e}")
                await asyncio.sleep(check_interval)
    
    async def _check_modules_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        for module_name, module_status in self.module_status.items():
            await self._check_module_health(module_name)
    
    async def _check_module_health(self, module_name: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        module_status = self.module_status[module_name]
        
        if module_status.status != "running":
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤
            if module_status.process and module_status.process.poll() is not None:
                logger.warning(f"‚ö†Ô∏è Module {module_name} process died")
                module_status.status = "failed"
                module_status.error_message = f"Process exited with code {module_status.process.returncode}"
                await self._handle_module_failure(module_name)
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if module_status.pid:
                try:
                    process = psutil.Process(module_status.pid)
                    module_status.cpu_usage = process.cpu_percent()
                    module_status.memory_usage = process.memory_info().rss / 1024 / 1024  # MB
                except psutil.NoSuchProcess:
                    logger.warning(f"‚ö†Ô∏è Process {module_status.pid} for {module_name} not found")
                    module_status.status = "failed"
                    await self._handle_module_failure(module_name)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å HTTP health check –¥–ª—è –º–æ–¥—É–ª–µ–π
            
            module_status.health_status = "healthy"
            module_status.last_health_check = datetime.utcnow()
            
        except Exception as e:
            logger.error(f"Error checking health of {module_name}: {e}")
            module_status.health_status = "unhealthy"
    
    async def _handle_module_failure(self, module_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—è –º–æ–¥—É–ª—è"""
        module_config = self.modules[module_name]
        module_status = self.module_status[module_name]
        
        logger.error(f"‚ùå Module {module_name} failed: {module_status.error_message}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±–æ–µ
        if self.notification_manager:
            await self.notification_manager.send_alert(
                f"Module {module_name} failed",
                module_status.error_message or "Unknown error"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        if (module_config.restart_on_failure and 
            module_status.restart_count < module_config.max_restarts):
            
            logger.info(f"üîÑ Attempting to restart {module_name} "
                       f"(attempt {module_status.restart_count + 1})")
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            await asyncio.sleep(module_config.restart_delay)
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            await self._cleanup_module(module_name)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
            module_status.restart_count += 1
            module_status.last_restart = datetime.utcnow()
            self.system_metrics['total_restarts'] += 1
            
            success = await self._start_module(module_name)
            if success:
                logger.info(f"‚úÖ Module {module_name} restarted successfully")
            else:
                logger.error(f"‚ùå Failed to restart module {module_name}")
        else:
            logger.error(f"‚ùå Module {module_name} reached max restart limit or restart disabled")
    
    async def _cleanup_module(self, module_name: str):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–æ–¥—É–ª—è"""
        module_status = self.module_status[module_name]
        
        if module_status.process:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ graceful shutdown
                module_status.process.terminate()
                await asyncio.sleep(2)
                
                # Force kill –µ—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
                if module_status.process.poll() is None:
                    module_status.process.kill()
                    
            except Exception as e:
                logger.error(f"Error cleaning up module {module_name}: {e}")
        
        module_status.process = None
        module_status.pid = None
        module_status.status = "stopped"
    
    async def _update_system_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        self.system_metrics['uptime'] = (
            datetime.utcnow() - self.system_metrics['start_time']
        ).total_seconds()
        
        self.system_metrics['modules_total'] = len(self.modules)
        self.system_metrics['modules_healthy'] = sum(
            1 for status in self.module_status.values()
            if status.health_status == "healthy"
        )
    
    async def _save_system_status(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –≤ Redis –∏–ª–∏ —Ñ–∞–π–ª"""
        try:
            status_data = {
                'timestamp': datetime.utcnow().isoformat(),
                'orchestrator_status': 'running' if self.running else 'stopped',
                'system_metrics': self.system_metrics.copy(),
                'modules': {
                    name: {
                        'status': status.status,
                        'health': status.health_status,
                        'pid': status.pid,
                        'restart_count': status.restart_count,
                        'cpu_usage': status.cpu_usage,
                        'memory_usage': status.memory_usage,
                        'start_time': status.start_time.isoformat() if status.start_time else None,
                        'last_health_check': status.last_health_check.isoformat() if status.last_health_check else None
                    }
                    for name, status in self.module_status.items()
                }
            }
            
            # Convert datetime objects to strings for JSON serialization
            status_data['system_metrics']['start_time'] = status_data['system_metrics']['start_time'].isoformat()
            
            # Try Redis first
            if self.redis:
                await self.redis.setex(
                    'ghost:orchestrator:status',
                    300,  # TTL 5 –º–∏–Ω—É—Ç
                    json.dumps(status_data, default=str)
                )
            else:
                # Fallback to file
                status_file = 'logs/orchestrator_status.json'
                os.makedirs(os.path.dirname(status_file), exist_ok=True)
                with open(status_file, 'w') as f:
                    json.dump(status_data, f, indent=2, default=str)
            
        except Exception as e:
            logger.error(f"Failed to save system status: {e}")
    
    async def _save_module_status(self, module_name: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è –≤ Redis"""
        if not self.redis:
            return
            
        try:
            status = self.module_status[module_name]
            status_data = {
                'name': status.name,
                'status': status.status,
                'health': status.health_status,
                'pid': status.pid,
                'restart_count': status.restart_count,
                'cpu_usage': status.cpu_usage,
                'memory_usage': status.memory_usage,
                'start_time': status.start_time.isoformat() if status.start_time else None,
                'last_health_check': status.last_health_check.isoformat() if status.last_health_check else None,
                'error_message': status.error_message
            }
            
            await self.redis.setex(
                f'ghost:module:{module_name}:status',
                300,  # TTL 5 –º–∏–Ω—É—Ç
                json.dumps(status_data, default=str)
            )
            
        except Exception as e:
            logger.error(f"Failed to save module {module_name} status: {e}")
    
    async def shutdown(self):
        """Graceful shutdown –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("üõë Shutting down GHOST Orchestrator...")
        self.running = False
        self.shutdown_event.set()
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        for module_name in list(self.module_status.keys()):
            await self._cleanup_module(module_name)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if self.redis:
            await self.redis.close()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ executor
        self.executor.shutdown(wait=True)
        
        logger.info("‚úÖ GHOST Orchestrator shutdown complete")
    
    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'orchestrator': {
                'running': self.running,
                'uptime': self.system_metrics['uptime'],
                'start_time': self.system_metrics['start_time'].isoformat(),
                'total_restarts': self.system_metrics['total_restarts']
            },
            'modules': {
                name: {
                    'status': status.status,
                    'health': status.health_status,
                    'pid': status.pid,
                    'restart_count': status.restart_count,
                    'cpu_usage': status.cpu_usage,
                    'memory_usage': status.memory_usage,
                    'start_time': status.start_time.isoformat() if status.start_time else None
                }
                for name, status in self.module_status.items()
            },
            'system_metrics': self.system_metrics
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    orchestrator = GhostOrchestrator()
    
    try:
        await orchestrator.initialize()
        await orchestrator.start()
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt")
    except Exception as e:
        logger.error(f"Orchestrator failed: {e}")
        logger.error(traceback.format_exc())
    finally:
        await orchestrator.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
