"""
Market Price Service - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω —Å –±–∏—Ä–∂–∏
"""
import asyncio
import logging
import json
from typing import Optional, Dict, List
from datetime import datetime, timezone
import aiohttp
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class MarketPrice:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã"""
    symbol: str
    price: float
    timestamp: datetime
    source: str
    
    def to_dict(self) -> dict:
        return {
            'symbol': self.symbol,
            'price': self.price,
            'timestamp': self.timestamp.isoformat(),
            'source': self.source
        }

class MarketPriceService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∏—Ä–∂"""
    
    def __init__(self):
        self.session = None
        self.cache = {}
        self.cache_ttl = 5  # –ö–µ—à –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
        
    async def _get_session(self):
        """–ü–æ–ª—É—á–∏—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        if self.session is None:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        if self.session:
            await self.session.close()
            self.session = None
    
    def _is_cache_valid(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–µ—à–∞"""
        if symbol not in self.cache:
            return False
        
        cache_time = self.cache[symbol]['timestamp']
        now = datetime.now(timezone.utc)
        return (now - cache_time).total_seconds() < self.cache_ttl
    
    async def get_bybit_price(self, symbol: str) -> Optional[MarketPrice]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å Bybit"""
        try:
            session = await self._get_session()
            url = f"https://api.bybit.com/v5/market/tickers?category=linear&symbol={symbol}"
            
            async with session.get(url) as response:
                if response.status != 200:
                    logger.error(f"‚ùå Bybit API error: HTTP {response.status}")
                    return None
                
                data = await response.json()
                
                if data.get('retCode') == 0 and data.get('result', {}).get('list'):
                    price_data = data['result']['list'][0]
                    price = float(price_data['lastPrice'])
                    
                    return MarketPrice(
                        symbol=symbol,
                        price=price,
                        timestamp=datetime.now(timezone.utc),
                        source='bybit'
                    )
                else:
                    logger.error(f"‚ùå Bybit API invalid response: {data}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå Error fetching Bybit price for {symbol}: {e}")
            return None
    
    async def get_binance_price(self, symbol: str) -> Optional[MarketPrice]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å Binance"""
        try:
            session = await self._get_session()
            url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol}"
            
            async with session.get(url) as response:
                if response.status != 200:
                    logger.error(f"‚ùå Binance API error: HTTP {response.status}")
                    return None
                
                data = await response.json()
                
                if 'price' in data:
                    price = float(data['price'])
                    
                    return MarketPrice(
                        symbol=symbol,
                        price=price,
                        timestamp=datetime.now(timezone.utc),
                        source='binance'
                    )
                else:
                    logger.error(f"‚ùå Binance API invalid response: {data}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå Error fetching Binance price for {symbol}: {e}")
            return None
    
    async def get_market_price(self, symbol: str, prefer_exchange: str = 'bybit') -> Optional[MarketPrice]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É —Å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–π –±–∏—Ä–∂–∏ –∏ fallback
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, DOGEUSDT)
            prefer_exchange: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –±–∏—Ä–∂–∞ ('bybit' –∏–ª–∏ 'binance')
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if self._is_cache_valid(symbol):
            cached = self.cache[symbol]
            logger.debug(f"üìä Using cached price for {symbol}: ${cached['price']}")
            return MarketPrice(
                symbol=symbol,
                price=cached['price'],
                timestamp=cached['timestamp'],
                source=cached['source']
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é —Ü–µ–Ω—É
        price_data = None
        
        if prefer_exchange == 'bybit':
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Bybit
            price_data = await self.get_bybit_price(symbol)
            if price_data is None:
                # Fallback –Ω–∞ Binance
                logger.warning(f"‚ö†Ô∏è Bybit failed for {symbol}, trying Binance...")
                price_data = await self.get_binance_price(symbol)
        else:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Binance
            price_data = await self.get_binance_price(symbol)
            if price_data is None:
                # Fallback –Ω–∞ Bybit
                logger.warning(f"‚ö†Ô∏è Binance failed for {symbol}, trying Bybit...")
                price_data = await self.get_bybit_price(symbol)
        
        # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if price_data:
            self.cache[symbol] = {
                'price': price_data.price,
                'timestamp': price_data.timestamp,
                'source': price_data.source
            }
            logger.info(f"üí∞ Market price for {symbol}: ${price_data.price} ({price_data.source})")
        else:
            logger.error(f"‚ùå Failed to get market price for {symbol} from all exchanges")
        
        return price_data
    
    async def get_multiple_prices(self, symbols: List[str], prefer_exchange: str = 'bybit') -> Dict[str, MarketPrice]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        tasks = []
        for symbol in symbols:
            task = asyncio.create_task(self.get_market_price(symbol, prefer_exchange))
            tasks.append((symbol, task))
        
        results = {}
        for symbol, task in tasks:
            try:
                price_data = await task
                if price_data:
                    results[symbol] = price_data
                else:
                    logger.warning(f"‚ö†Ô∏è No price data for {symbol}")
            except Exception as e:
                logger.error(f"‚ùå Error getting price for {symbol}: {e}")
        
        return results
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–∞—Ä–µ
            test_symbol = 'BTCUSDT'
            price_data = await self.get_market_price(test_symbol)
            
            if price_data and price_data.price > 0:
                logger.info(f"‚úÖ Market price service test OK: {test_symbol} = ${price_data.price}")
                return True
            else:
                logger.error("‚ùå Market price service test failed")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Market price service test error: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
market_price_service = MarketPriceService()

async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞"""
    logger.basicConfig(level=logging.INFO)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if await market_price_service.test_connection():
        logger.info("‚úÖ Market price service ready")
    else:
        logger.error("‚ùå Market price service not ready")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
    symbols = ['DOGEUSDT', 'BTCUSDT', 'ETHUSDT']
    prices = await market_price_service.get_multiple_prices(symbols)
    
    for symbol, price_data in prices.items():
        logger.info(f"üí∞ {symbol}: ${price_data.price} from {price_data.source}")
    
    await market_price_service.close()

if __name__ == "__main__":
    asyncio.run(main())
