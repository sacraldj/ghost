"""
GHOST Telegram Auto Authentication System
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
–í–∫–ª—é—á–∞–µ—Ç SMS API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤
"""

import asyncio
import logging
import json
import os
import re
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from dotenv import load_dotenv
import httpx
import hashlib

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from telethon import TelegramClient
from telethon.errors import (
    PhoneCodeInvalidError, 
    PhoneCodeExpiredError, 
    SessionPasswordNeededError,
    AuthKeyUnregisteredError,
    ApiIdInvalidError,
    PhoneNumberInvalidError,
    FloodWaitError
)

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à Rate Limiter
try:
    from core.telegram_rate_limiter import TelegramRateLimiter
except ImportError:
    logger.warning("‚ö†Ô∏è TelegramRateLimiter –Ω–µ –Ω–∞–π–¥–µ–Ω")
    TelegramRateLimiter = None

# SMS Service —É–¥–∞–ª–µ–Ω - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

class TelegramAutoAuth:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram"""
    
    def __init__(self, api_id: str, api_hash: str, phone: str = None, interactive: bool = True):
        self.api_id = int(api_id)
        self.api_hash = api_hash
        self.phone = phone or os.getenv('TELEGRAM_PHONE')
        self.interactive = interactive  # –†–∞–∑—Ä–µ—à–∏—Ç—å –ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        
        # SMS —Å–µ—Ä–≤–∏—Å—ã —É–¥–∞–ª–µ–Ω—ã - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        
        # –ö–ª–∏–µ–Ω—Ç
        self.client: Optional[TelegramClient] = None
        
        # –ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ì–û–ö–†–ê–¢–ù–´–• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
        # Rate limiter –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DISABLE_RATE_LIMITER=1
        disable_rl = os.getenv('DISABLE_RATE_LIMITER') == '1'
        self.rate_limiter = None if disable_rl else (TelegramRateLimiter() if TelegramRateLimiter else None)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º-–∞—É—Ç–æ–≤
        self.code_timeout = 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
        self.sms_check_interval = 10  # –ü—Ä–æ–≤–µ—Ä—è–µ–º SMS –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        self.max_code_attempts = 2  # –î–í–ï –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ–≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫
        self.auth_attempts = []
        
        if self.rate_limiter:
            logger.info("TelegramAutoAuth initialized with rate limiting protection")
        else:
            logger.info("TelegramAutoAuth initialized without rate limiting")

    def get_manual_code_input(self, phone: str) -> Optional[str]:
        """
        –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            phone: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–æ–¥
            
        Returns:
            –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–¥ –∏–ª–∏ None
        """
        try:
            print("\n" + "="*50)
            print("üîë –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ô –í–í–û–î –ö–û–î–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
            print("="*50)
            print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
            print("üì® –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMS –∏–ª–∏ Telegram –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
            print("üí° –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (5 —Ü–∏—Ñ—Ä)")
            print("-"*50)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            code = input("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ").strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
            if not code:
                print("‚ùå –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω")
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ü–∏—Ñ—Ä—ã
            if not code.isdigit():
                print("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–æ–±—ã—á–Ω–æ 5 —Ü–∏—Ñ—Ä)
            if len(code) != 5:
                print("‚ö†Ô∏è –û–±—ã—á–Ω–æ –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç 5 —Ü–∏—Ñ—Ä, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º...")
                
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {code}")
            return code
            
        except KeyboardInterrupt:
            print("\n‚ùå –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {e}")
            return None

    # SMS —Å–µ—Ä–≤–∏—Å—ã —É–¥–∞–ª–µ–Ω—ã - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

    # SMS –∫–æ–¥ —É–¥–∞–ª–µ–Ω - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

    # SMS –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

    # –í—Å–µ SMS –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã

    def _extract_code_from_sms(self, sms_text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ SMS (—É–ª—É—á—à–µ–Ω–Ω—ã–π)"""
        if not sms_text or len(sms_text) < 4:
            return None
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleaned_text = sms_text.strip()
        logger.debug(f"üîç –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ: '{cleaned_text[:100]}'...")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (—Å–∞–º—ã–µ —Ç–æ—á–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        patterns = [
            # –¢–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¢–ï–ö–£–©–ï–ì–û —Ñ–æ—Ä–º–∞—Ç–∞ Telegram
            r'Login code:\s*(\d{5,6})\.?\s*Do not give',  # "Login code: 48827. Do not give..."
            r'Login code:\s*(\d{5,6})',                    # "Login code: 48827"
            r'Telegram code:\s*(\d{5,6})',
            r'Your login code:\s*(\d{5,6})',
            r'Verification code:\s*(\d{5,6})',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–æ–¥–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            r'(\d{5,6})\.?\s*Do not give this code',
            r'(\d{5,6})\.?\s*We never ask it for anything else',
            
            # –†—É—Å—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            r'–ö–æ–¥ –≤—Ö–æ–¥–∞ –≤ Telegram:\s*(\d{5,6})',
            r'–í–∞—à –∫–æ–¥:\s*(\d{5,6})',
            r'–∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\s*(\d{5,6})',
            r'–ö–æ–¥:\s*(\d{5,6})',
            r'–∫–æ–¥:\s*(\d{5,6})',
            
            # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            r'Your code:\s*(\d{5,6})',
            r'code:\s*(\d{5,6})',
            r'Code:\s*(\d{5,6})',
            r'–≤—Ö–æ–¥–∞:\s*(\d{5,6})',
            r'–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\s*(\d{5,6})',
            
            # –ü–µ—Ä–≤—ã–µ —Ü–∏—Ñ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (—á–∞—Å—Ç–æ –∫–æ–¥ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º)
            r'^[^\d]*(\d{5,6})[^\d]',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Å–∫–æ–±–∫–∞—Ö –∏–ª–∏ –∫–∞–≤—ã—á–∫–∞—Ö
            r'["\'](\d{5,6})["\']',
            r'\[(\d{5,6})\]',
            r'\((\d{5,6})\)',
            
            # –û–±—â–∏–π –ø–æ–∏—Å–∫ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å–ª–æ–≤
            r'\b(\d{5})\b',
            r'\b(\d{6})\b',
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - –ª—é–±—ã–µ 5-6 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
            r'(\d{5,6})',
        ]
        
        for i, pattern in enumerate(patterns):
            try:
                matches = re.findall(pattern, cleaned_text, re.IGNORECASE)
                if matches:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    code = matches[0]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                    if code.isdigit() and 5 <= len(code) <= 6:
                        logger.info(f"üéØ –ö–û–î –ù–ê–ô–î–ï–ù! –ü–∞—Ç—Ç–µ—Ä–Ω #{i+1}: '{pattern}' -> {code}")
                        return code
                        
            except re.error as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ #{i+1}: {e}")
                continue
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        numbers = re.findall(r'\d{5,6}', cleaned_text)
        if numbers:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
            for num in numbers:
                if 5 <= len(num) <= 6:
                    logger.debug(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º: {num}")
                    return num
        
        logger.warning(f"‚ùå –ö–æ–¥ –ù–ï –ù–ê–ô–î–ï–ù –≤ —Ç–µ–∫—Å—Ç–µ: '{cleaned_text[:200]}...'")
        logger.debug(f"üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
        return None

    async def get_code_from_telegram_messages(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram (—É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)"""
        try:
            logger.info("üì± –ò—â–µ–º –°–í–ï–ñ–ò–ô –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...")
            logger.info("üí° –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —á–µ—Ä–µ–∑ –õ–Æ–ë–£–Æ –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Å—Å–∏—é")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–≤–∫–ª—é—á–∞—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏)
            session_files = [
                'ghost_session.session',
                'ghost_session_backup.session',  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                'main_session.session', 
                'telegram_session.session',
                'reader_session.session'  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            ]
            
            for session_file in session_files:
                if os.path.exists(session_file):
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é: {session_file}")
                    code = await self._try_get_code_from_session(session_file)
                    if code:
                        logger.info(f"‚úÖ –ù–ê–ô–î–ï–ù –°–í–ï–ñ–ò–ô –ö–û–î —á–µ—Ä–µ–∑ {session_file}: {code}")
                        return code
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞...")
            code = await self._get_code_from_temp_session()
            if code:
                logger.info(f"‚úÖ –ù–ê–ô–î–ï–ù –°–í–ï–ñ–ò–ô –ö–û–î —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é: {code}")
                return code
            
            logger.warning("‚ö†Ô∏è –°–í–ï–ñ–ò–ô –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ Telegram: {e}")
            return None

    async def _try_get_code_from_session(self, session_name: str) -> Optional[str]:
        """–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        session_path = session_name.replace('.session', '')
        client = TelegramClient(session_path, self.api_id, self.api_hash)
        
        try:
            await client.connect()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ {session_name}, –∏—â–µ–º –∫–æ–¥...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–¥–∞
            code = await self._search_for_fresh_code(client)
            return code
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Å–µ—Å—Å–∏–µ–π {session_name}: {e}")
            return None
        finally:
            try:
                await client.disconnect()
            except:
                pass

    async def _search_for_fresh_code(self, client: TelegramClient) -> Optional[str]:
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –°–í–ï–ñ–ï–ì–û –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        try:
            current_time = datetime.now()
            # –ò—â–µ–º –∫–æ–¥ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç (—Å–≤–µ–∂–∏–π!)
            time_threshold = current_time - timedelta(minutes=15)
            
            logger.info("üîç –ò—â–µ–º –°–í–ï–ñ–ò–ô –∫–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç...")
            
            # –°–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            search_methods = [
                ("Telegram Service (777000)", self._search_in_telegram_service),
                ("Saved Messages", self._search_in_saved_messages),
                ("–í—Å–µ –¥–∏–∞–ª–æ–≥–∏", self._search_in_all_dialogs)
            ]
            
            for method_name, search_func in search_methods:
                try:
                    logger.info(f"üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º: {method_name}")
                    code = await search_func(client, time_threshold)
                    if code:
                        logger.info(f"üéØ –ù–ê–ô–î–ï–ù –°–í–ï–ñ–ò–ô –ö–û–î –≤ {method_name}: {code}")
                        return code
                        
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {method_name}: {e}")
                    continue
            
            logger.info("‚ùå –°–≤–µ–∂–∏–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞: {e}")
            return None

    async def _search_in_telegram_service(self, client: TelegramClient, time_threshold: datetime) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º Telegram Service (777000)"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç 777000
            entity = await client.get_entity(777000)
            
            logger.info("üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @777000 (Telegram Service)")
            
            async for message in client.iter_messages(entity, limit=10):
                if not message.text or not message.date:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–µ–∂–µ–µ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç)
                if message.date.replace(tzinfo=None) < time_threshold:
                    continue
                
                code = self._extract_code_from_sms(message.text)
                if code:
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {message.date}: {message.text[:50]}...")
                    return code
                    
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Telegram Service: {e}")
            
        return None

    async def _search_in_saved_messages(self, client: TelegramClient, time_threshold: datetime) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ Saved Messages"""
        try:
            me = await client.get_me()
            
            logger.info("üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º Saved Messages")
            
            async for message in client.iter_messages('me', limit=20):
                if not message.text or not message.date:
                    continue
                
                if message.date.replace(tzinfo=None) < time_threshold:
                    continue
                
                code = self._extract_code_from_sms(message.text)
                if code:
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –≤ Saved Messages –æ—Ç {message.date}")
                    return code
                    
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Saved Messages: {e}")
            
        return None

    async def _search_in_all_dialogs(self, client: TelegramClient, time_threshold: datetime) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–∞—Ö (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞)"""
        try:
            logger.info("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏  
            dialog_count = 0
            async for dialog in client.iter_dialogs(limit=5):
                dialog_count += 1
                
                try:
                    async for message in client.iter_messages(dialog, limit=3):
                        if not message.text or not message.date:
                            continue
                        
                        if message.date.replace(tzinfo=None) < time_threshold:
                            continue
                        
                        code = self._extract_code_from_sms(message.text)
                        if code:
                            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –≤ –¥–∏–∞–ª–æ–≥–µ {dialog.name} –æ—Ç {message.date}")
                            return code
                            
                except:
                    continue
                    
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {dialog_count} –¥–∏–∞–ª–æ–≥–æ–≤")
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö: {e}")
            
            return None

    async def _get_code_from_existing_session(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é"""
        session_file = 'ghost_session.session'
        if not os.path.exists(session_file):
            return None
        
        session_client = TelegramClient('ghost_session', self.api_id, self.api_hash)
        try:
            await session_client.connect()
            
            if not await session_client.is_user_authorized():
                return None
            
            logger.info("üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞")
            return await self._search_for_code_in_messages(session_client)
            
        finally:
            await session_client.disconnect()

    async def _get_code_from_temp_session(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
        temp_client = TelegramClient(':memory:', self.api_id, self.api_hash)
        try:
            await temp_client.connect()
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –æ–±—ã—á–Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ 
            # —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if await temp_client.is_user_authorized():
                return await self._search_for_code_in_messages(temp_client)
            else:
                return None
                
        finally:
            await temp_client.disconnect()

    async def _search_for_code_in_messages(self, client: TelegramClient) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–ª–∏–µ–Ω—Ç–∞"""
        start_time = datetime.now()
        timeout = timedelta(seconds=300)  # 5 –º–∏–Ω—É—Ç
        check_interval = 8  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 8 —Å–µ–∫—É–Ω–¥
        
        logger.info(f"üîç –ò—â–µ–º –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ {timeout.seconds} —Å–µ–∫—É–Ω–¥...")
        
        while datetime.now() - start_time < timeout:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram (777000)
                code = await self._check_telegram_official_messages(client, start_time)
                if code:
                    return code
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Saved Messages
                code = await self._check_saved_messages(client, start_time)
                if code:
                    return code
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫–æ–¥ –ø—Ä–∏—à–µ–ª –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
                code = await self._check_all_dialogs_for_code(client, start_time)
                if code:
                    return code
                
                logger.debug(f"‚è≥ –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º {check_interval} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(check_interval)
                
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞: {e}")
                await asyncio.sleep(2)
        
        logger.warning("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ")
        return None

    async def _check_telegram_official_messages(self, client: TelegramClient, start_time: datetime) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç Telegram
            telegram_entities = []
            
            # –°–ø–æ—Å–æ–± 1: –ø–æ ID 777000 (Telegram Service Notifications)
            try:
                entity = await client.get_entity(777000)
                telegram_entities.append(entity)
                logger.debug("‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç Telegram –ø–æ ID 777000")
            except:
                pass
            
            # –°–ø–æ—Å–æ–± 2: –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for username in ['telegram', 'Telegram']:
                try:
                    entity = await client.get_entity(username)
                    telegram_entities.append(entity)
                    logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç Telegram –ø–æ –∏–º–µ–Ω–∏ {username}")
                except:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
            for entity in telegram_entities:
                async for message in client.iter_messages(entity, limit=15):
                    if message.message and message.date > start_time - timedelta(minutes=10):
                        text = message.message
                        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram: {text[:50]}...")
                        
                        code = self._extract_code_from_sms(text)
                        if code:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram: {code}")
                            return code
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram: {e}")
        
        return None

    async def _check_saved_messages(self, client: TelegramClient, start_time: datetime) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Saved Messages"""
        try:
            me = await client.get_me()
            
            async for message in client.iter_messages(me.id, limit=10):
                if message.message and message.date > start_time - timedelta(minutes=10):
                    text = message.message
                    logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Saved Messages: {text[:50]}...")
                    
                    code = self._extract_code_from_sms(text)
                    if code:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –≤ Saved Messages: {code}")
                        return code
                        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Saved Messages: {e}")
        
        return None

    async def _check_all_dialogs_for_code(self, client: TelegramClient, start_time: datetime) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫–æ–¥ –ø—Ä–∏—à–µ–ª –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ"""
        try:
            checked_count = 0
            max_dialogs_to_check = 10  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–∏–∞–ª–æ–≥–æ–≤
            
            async for dialog in client.iter_dialogs(limit=max_dialogs_to_check):
                checked_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –¥–∏–∞–ª–æ–≥–µ
                async for message in client.iter_messages(dialog.entity, limit=3):
                    if message.message and message.date > start_time - timedelta(minutes=10):
                        text = message.message
                        
                        # –ò—â–µ–º –∫–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        if any(keyword in text.lower() for keyword in ['login', 'code', 'telegram', '–∫–æ–¥', '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü']):
                            logger.debug(f"üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –¥–∏–∞–ª–æ–≥–µ {dialog.name}: {text[:50]}...")
                            
                            code = self._extract_code_from_sms(text)
                            if code:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –≤ –¥–∏–∞–ª–æ–≥–µ {dialog.name}: {code}")
                                return code
            
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {checked_count}")
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        
        return None

    async def get_code_from_env(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        code = os.getenv('TELEGRAM_CODE')
        if code and code.isdigit() and len(code) in [5, 6]:
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {code}")
            return code
        return None

    async def get_auth_code(self, phone_number: str = None, skip_env: bool = False) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
        phone = phone_number or self.phone
        
        # –ú–µ—Ç–æ–¥ 1: –ß—Ç–µ–Ω–∏–µ –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è)
        logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π...")
        code = await self.get_code_from_telegram_messages()
        if code:
            return code
        
        # SMS —Å–µ—Ä–≤–∏—Å—ã —É–¥–∞–ª–µ–Ω—ã
        
        # –¢–û–õ–¨–ö–û –°–í–ï–ñ–ò–ï –ö–û–î–´! –ë–µ–∑ —Å—Ç–∞—Ä—ã—Ö –∏–∑ .env
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –°–í–ï–ñ–ò–ô –∫–æ–¥ –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        logger.info("  1. –ö–æ–¥ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ Telegram –æ—Ç @777000")
        logger.info("  2. –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á—Ç–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–π –∏–∑ —Å–µ—Å—Å–∏–π")
        logger.info("  3. –ö–æ–¥ —Å–≤–µ–∂–∏–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç)")
        logger.info("üö´ –°–¢–ê–†–´–ï –ö–û–î–´ –∏–∑ .env –ù–ï –ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø!")
        
        return None

    async def get_auth_code_after_request(self, phone_number: str = None) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π)"""
        phone = phone_number or self.phone
        
        logger.info("üì± –û–∂–∏–¥–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏ –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫
        max_attempts = 5  # 5 –ø–æ–ø—ã—Ç–æ–∫
        wait_time = 3     # –ù–∞—á–∏–Ω–∞–µ–º —Å 3 —Å–µ–∫—É–Ω–¥
        
        for attempt in range(max_attempts):
            logger.info(f"‚è∞ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ (–æ–∂–∏–¥–∞–Ω–∏–µ: {wait_time}—Å)")
            await asyncio.sleep(wait_time)
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π
            code = await self.get_code_from_telegram_messages()
            if code:
                logger.info(f"‚úÖ –ö–û–î –ü–û–õ–£–ß–ï–ù –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {code}")
                return code
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
            wait_time = min(wait_time + 2, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
        
        # SMS —Å–µ—Ä–≤–∏—Å—ã —É–¥–∞–ª–µ–Ω—ã
        
        # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Telegram —Å–µ—Å—Å–∏—è—Ö
        logger.info("üîÑ –ò—â–µ–º –∫–æ–¥ –≤ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Å—Å–∏—è—Ö (–≤–∫–ª—é—á–∞—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏)
        session_files = [
            'ghost_session',
            'ghost_session_backup',  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π  
            'ghost_master_session', 
            'telegram_reader',
            'reader_session',        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è
            'main_session'
        ]
        
        for session_name in session_files:
            try:
                session_file = f'{session_name}.session'
                if os.path.exists(session_file):
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é {session_name}...")
                    
                    temp_client = TelegramClient(session_name, self.api_id, self.api_hash)
                    await temp_client.connect()
                    
                    if await temp_client.is_user_authorized():
                        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é {session_name} –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞")
                        
                        # –ò—â–µ–º –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                        start_time = datetime.now()
                        timeout = timedelta(seconds=120)  # 2 –º–∏–Ω—É—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
                        
                        for _ in range(12):  # 12 attempts = 60 seconds
                            code = await self.get_code_from_telegram_messages()
                            if code:
                                return code
                            await asyncio.sleep(5)
                        
                        logger.warning(f"‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_name} –∏—Å—Ç–µ–∫–ª–æ")
                        await temp_client.disconnect()
                    else:
                        await temp_client.disconnect()
                        continue
                        
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π {session_name}: {e}")
                continue
        
        # –¢–û–õ–¨–ö–û –°–í–ï–ñ–ò–ï –ö–û–î–´! –ù–∏–∫–∞–∫–∏—Ö —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤ –∏–∑ .env
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –°–í–ï–ñ–ò–ô –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        logger.info("  1. –°–≤–µ–∂–∏–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –≤ Telegram –æ—Ç @777000")
        logger.info("  2. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç")
        logger.info("  3. –ù—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –æ–¥–Ω–æ–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —á—Ç–µ–Ω–∏—è")
        logger.info("üö´ –°–∏—Å—Ç–µ–º–∞ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –∏–∑ .env - —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ!")
        
        return None

    async def perform_auth(self, session_path: str = 'ghost_session') -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not self.phone:
                logger.error("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω (TELEGRAM_PHONE)")
                return False
            
            # üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê RATE LIMITER
            if self.rate_limiter:
                can_attempt, reason = self.rate_limiter.can_attempt_auth(self.phone)
                if not can_attempt:
                    logger.error(f"üö´ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {reason}")
                    return False
                else:
                    logger.info("üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
            
            logger.info(f"üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è {self.phone}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.client = TelegramClient(session_path, self.api_id, self.api_hash)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await self.client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if await self.client.is_user_authorized():
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞)
                if self.rate_limiter:
                    self.rate_limiter.record_attempt(self.phone, True)
                return True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            for attempt in range(self.max_code_attempts):
                try:
                    logger.info(f"üìû –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {attempt + 1}/{self.max_code_attempts}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞
                    sent_code = await self.client.send_code_request(self.phone)
                    logger.info(f"üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {self.phone}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                    code = await self.get_auth_code_after_request(self.phone)
                    
                    if not code:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                        if attempt < self.max_code_attempts - 1:
                            logger.info("‚è≥ –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                            await asyncio.sleep(30)
                            continue
                        else:
                            logger.error("‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞")
                            logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –∫–æ–¥–∞...")
                            
                            # –ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
                            if self.interactive:
                                manual_code = self.get_manual_code_input(self.phone)
                                if manual_code:
                                    code = manual_code
                                    logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥")
                                else:
                                    logger.error("‚ùå –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–¥–∞ –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω")
                                    logger.info("üí° –ö–∞–∫ —Ä–µ–∑–µ—Ä–≤ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_CODE –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                                    # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
                                    if self.rate_limiter:
                                        self.rate_limiter.record_attempt(self.phone, False, "CodeNotReceived_ManualFailed")
                                    return False
                            else:
                                logger.error("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω")
                                logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_CODE –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ interactive=True")
                                # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
                                if self.rate_limiter:
                                    self.rate_limiter.record_attempt(self.phone, False, "CodeNotReceived_NonInteractive")
                                return False
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –∫–æ–¥–æ–º
                    try:
                        await self.client.sign_in(self.phone, code)
                        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ–¥–æ–º —É—Å–ø–µ—à–Ω–∞!")
                        # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                        if self.rate_limiter:
                            self.rate_limiter.record_attempt(self.phone, True)
                        return True
                        
                    except SessionPasswordNeededError:
                        # –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å
                        password = os.getenv('TELEGRAM_PASSWORD')
                        if password:
                            logger.info("üîí –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å 2FA")
                            await self.client.sign_in(password=password)
                            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞!")
                            # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —Å 2FA
                            if self.rate_limiter:
                                self.rate_limiter.record_attempt(self.phone, True)
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è TELEGRAM_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                            
                            if self.interactive:
                                logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è 2FA...")
                                print("\n" + "="*50)
                                print("üîí –¢–†–ï–ë–£–ï–¢–°–Ø –ü–ê–†–û–õ–¨ –î–í–£–•–§–ê–ö–¢–û–†–ù–û–ô –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
                                print("="*50)
                                print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}")
                                print("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞")
                                print("-"*50)
                                
                                try:
                                    manual_password = input("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ").strip()
                                    if manual_password:
                                        await self.client.sign_in(password=manual_password)
                                        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º 2FA –ø–∞—Ä–æ–ª—è —É—Å–ø–µ—à–Ω–∞!")
                                        # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —Å —Ä—É—á–Ω—ã–º 2FA
                                        if self.rate_limiter:
                                            self.rate_limiter.record_attempt(self.phone, True)
                                        return True
                                    else:
                                        logger.error("‚ùå –ü–∞—Ä–æ–ª—å 2FA –Ω–µ –≤–≤–µ–¥–µ–Ω")
                                        # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É 2FA
                                        if self.rate_limiter:
                                            self.rate_limiter.record_attempt(self.phone, False, "2FA_PasswordEmpty")
                                        return False
                                except KeyboardInterrupt:
                                    logger.error("‚ùå –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è 2FA –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                                    # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ 2FA
                                    if self.rate_limiter:
                                        self.rate_limiter.record_attempt(self.phone, False, "2FA_InputCancelled")
                                    return False
                            else:
                                logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA, –Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω")
                                logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_PASSWORD –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ interactive=True")
                                # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É 2FA
                                if self.rate_limiter:
                                    self.rate_limiter.record_attempt(self.phone, False, "2FA_PasswordMissing_NonInteractive")
                                return False
                    
                    except FloodWaitError as e:
                        logger.info("‚ö†Ô∏è FloodWaitError –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º FloodWaitError
                        continue
                    
                    except (PhoneCodeInvalidError, PhoneCodeExpiredError) as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–¥–∞: {e}")
                        if attempt < self.max_code_attempts - 1:
                            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥...")
                            await asyncio.sleep(10)
                            continue
                        else:
                            logger.warning("‚ùå –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã")
                            logger.info("üîÑ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞...")
                            
                            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Å–≤–µ–∂–µ–≥–æ –∫–æ–¥–∞ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
                            if self.interactive:
                                manual_code = self.get_manual_code_input(self.phone)
                                if manual_code:
                                    try:
                                        await self.client.sign_in(self.phone, manual_code)
                                        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Ä—É—á–Ω—ã–º –∫–æ–¥–æ–º —É—Å–ø–µ—à–Ω–∞!")
                                        # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —Å —Ä—É—á–Ω—ã–º –∫–æ–¥–æ–º
                                        if self.rate_limiter:
                                            self.rate_limiter.record_attempt(self.phone, True)
                                        return True
                                    except (PhoneCodeInvalidError, PhoneCodeExpiredError):
                                        logger.error("‚ùå –†—É—á–Ω–æ–π –∫–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                            else:
                                logger.info("üí° –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω, —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                            
                            logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                            # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                            if self.rate_limiter:
                                self.rate_limiter.record_attempt(self.phone, False, "AllCodesInvalid")
                            return False
                            
                except FloodWaitError as e:
                    logger.info("‚ö†Ô∏è FloodWaitError –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º FloodWaitError
                    continue
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    if attempt < self.max_code_attempts - 1:
                        await asyncio.sleep(15)
                        continue
                    else:
                        # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
                        if self.rate_limiter:
                            self.rate_limiter.record_attempt(self.phone, False, str(type(e).__name__))
                        raise
            
            # üìù –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É
            if self.rate_limiter:
                self.rate_limiter.record_attempt(self.phone, False, "ExhaustedAttempts")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            # üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
            if self.rate_limiter:
                self.rate_limiter.record_attempt(self.phone, False, f"CriticalError_{type(e).__name__}")
            return False

    async def validate_session(self, session_path: str = 'ghost_session') -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            if not os.path.exists(f'{session_path}.session'):
                logger.info("üìÅ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            test_client = TelegramClient(session_path, self.api_id, self.api_hash)
            await test_client.connect()
            
            if await test_client.is_user_authorized():
                me = await test_client.get_me()
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {me.first_name} (@{me.username})")
                await test_client.disconnect()
                return True
            else:
                logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
                await test_client.disconnect()
                return False
                
        except AuthKeyUnregisteredError:
            logger.warning("‚ö†Ô∏è –ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False

    async def ensure_auth(self, session_path: str = 'ghost_session') -> TelegramClient:
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Å—Å–∏—é –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            if await self.validate_session(session_path):
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é")
                client = TelegramClient(session_path, self.api_id, self.api_hash)
                await client.connect()
                return client
            
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –ù–ï –£–î–ê–õ–Ø–ï–ú –µ–µ —Å—Ä–∞–∑—É
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            backup_session = f'{session_path}_backup'
            try:
                import shutil
                if os.path.exists(f'{session_path}.session'):
                    shutil.copy2(f'{session_path}.session', f'{backup_session}.session')
                    logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {backup_session}")
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π —Å–µ—Å—Å–∏–∏)
            logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            auth_success = await self.perform_auth(session_path)
            
            if auth_success:
                # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –¢–û–ì–î–ê —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
                for ext in ['.session', '.session-journal']:
                    old_session_file = f'{session_path}_old{ext}'
                    session_file = f'{session_path}{ext}'
                    backup_file = f'{backup_session}{ext}'
                    
                    # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    if os.path.exists(backup_file):
                        try:
                            os.remove(backup_file)
                            logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—é: {backup_file}")
                        except:
                            pass
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã")
                
            if auth_success:
                return self.client
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    def get_auth_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        return {
            'phone': self.phone,
            'api_id': self.api_id,
            'auth_attempts': len(self.auth_attempts),
            'last_attempt': self.auth_attempts[-1] if self.auth_attempts else None
        }

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

async def create_auto_auth_client(api_id: str = None, api_hash: str = None, phone: str = None, interactive: bool = True) -> TelegramClient:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    
    Args:
        api_id: ID API Telegram
        api_hash: Hash API Telegram  
        phone: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        interactive: —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–¥–∞/–ø–∞—Ä–æ–ª—è –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    api_id = api_id or os.getenv('TELEGRAM_API_ID')
    api_hash = api_hash or os.getenv('TELEGRAM_API_HASH')
    phone = phone or os.getenv('TELEGRAM_PHONE')
    
    if not api_id or not api_hash:
        raise ValueError("TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    auth = TelegramAutoAuth(api_id, api_hash, phone, interactive=interactive)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    return await auth.ensure_auth()

async def test_auto_auth():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = await create_auto_auth_client()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if await client.is_user_authorized():
            me = await client.get_me()
            logger.info(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} (@{me.username})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            dialog_count = 0
            async for dialog in client.iter_dialogs(limit=5):
                dialog_count += 1
                logger.info(f"  üìã –î–∏–∞–ª–æ–≥: {dialog.name}")
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {dialog_count}")
            
            await client.disconnect()
            return True
        else:
            logger.error("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: –∫–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(test_auto_auth())
