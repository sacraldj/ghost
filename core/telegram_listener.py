"""
GHOST Telegram Listener
–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∫–∞–Ω–∞–ª–∞–º –¥–ª—è —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
–ù–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã core/telegram_listener.py —Å–∏—Å—Ç–µ–º—ã –î–∞—Ä–µ–Ω–∞
"""

import asyncio
import logging
import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '.env'))

from telethon import TelegramClient, events
from telethon.tl.types import Channel, Chat

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from core.signal_router import route_signal
from core.trader_registry import TraderRegistry
from signals.image_parser import get_image_parser

logger = logging.getLogger(__name__)

@dataclass
class ChannelConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    channel_id: str
    channel_name: str
    trader_id: str
    is_active: bool = True
    keywords_filter: List[str] = None
    exclude_keywords: List[str] = None
    
    def __post_init__(self):
        if self.keywords_filter is None:
            self.keywords_filter = []
        if self.exclude_keywords is None:
            self.exclude_keywords = []

class TelegramListener:
    """–°–ª—É—à–∞—Ç–µ–ª—å Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, api_id: str, api_hash: str, phone: str = None):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone or os.getenv('TELEGRAM_PHONE')
        
        # Telegram –∫–ª–∏–µ–Ω—Ç
        self.client: Optional[TelegramClient] = None
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
        self.channels: Dict[str, ChannelConfig] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_received': 0,
            'signals_detected': 0,
            'signals_parsed': 0,
            'by_channel': {}
        }
        
        # –§–∏–ª—å—Ç—Ä—ã
        self.global_signal_keywords = [
            'long', 'short', 'buy', 'sell', 'entry', 'target', 'tp1', 'tp2', 'tp3', 'sl', 'stop',
            '–ª–æ–Ω–≥', '—à–æ—Ä—Ç', '–ø–æ–∫—É–ø–∫–∞', '–ø—Ä–æ–¥–∞–∂–∞', '–≤—Ö–æ–¥', '—Ü–µ–ª—å', '—Å—Ç–æ–ø'
        ]
        
        # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç—ã)
        self.processed_messages: Set[str] = set()
        
        # –ü–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.image_parser = get_image_parser()
        
        # –í–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.external_message_handler = None
        
        logger.info("Telegram Listener initialized")
    
    async def _get_code_from_telegram(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info("üì± –û–∂–∏–¥–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –∫–æ–¥–æ–º
            telegram_code = os.getenv('TELEGRAM_CODE')
            if telegram_code:
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {telegram_code}")
                return telegram_code
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ Telegram
            try:
                logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç Telegram...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                import asyncio
                import re
                from datetime import datetime, timedelta
                
                # –ñ–¥–µ–º –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
                start_time = datetime.now()
                timeout = timedelta(seconds=60)
                
                while datetime.now() - start_time < timeout:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram (777000)
                        async for message in self.client.iter_messages(777000, limit=5):
                            if message.message and message.date > start_time - timedelta(minutes=2):
                                text = message.message
                                
                                # –ò—â–µ–º –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                                code_patterns = [
                                    r'Login code: (\d{5,6})',
                                    r'Telegram code: (\d{5,6})',
                                    r'code: (\d{5,6})',
                                    r'–∫–æ–¥: (\d{5,6})',
                                    r'–ö–æ–¥: (\d{5,6})',
                                    r'\b(\d{5,6})\b'  # –õ—é–±—ã–µ 5-6 —Ü–∏—Ñ—Ä
                                ]
                                
                                for pattern in code_patterns:
                                    match = re.search(pattern, text)
                                    if match:
                                        code = match.group(1)
                                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {code}")
                                        logger.debug(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
                                        return code
                        
                        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        await asyncio.sleep(2)
                        
                    except Exception as msg_error:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_error}")
                        await asyncio.sleep(1)
                
                logger.warning("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ (60 —Å–µ–∫)")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_CODE –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            # –í —Å–µ—Ä–≤–µ—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –º–æ–∂–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤–≤–æ–¥
            return ""
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            return ""
    
    async def _get_code_from_telegram_after_request(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ Telegram –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –∫–æ–¥–æ–º
            telegram_code = os.getenv('TELEGRAM_CODE')
            if telegram_code:
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {telegram_code}")
                return telegram_code
            
            logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç Telegram...")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            import asyncio
                        import re
            from datetime import datetime, timedelta
            
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                temp_client = TelegramClient(':memory:', int(self.api_id), self.api_hash)
                await temp_client.connect()
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π
                if os.path.exists('ghost_session.session'):
                    try:
                        session_client = TelegramClient('ghost_session', int(self.api_id), self.api_hash)
                        await session_client.connect()
                        
                        if await session_client.is_user_authorized():
                            logger.info("üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞")
                            
                            # –ñ–¥–µ–º –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
                            start_time = datetime.now()
                            timeout = timedelta(seconds=60)
                            
                            while datetime.now() - start_time < timeout:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram (777000)
                                    async for message in session_client.iter_messages(777000, limit=5):
                                        if message.message and message.date > start_time - timedelta(minutes=2):
                                            text = message.message
                                            
                                            # –ò—â–µ–º –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                                            code_patterns = [
                                                r'Login code: (\d{5,6})',
                                                r'Telegram code: (\d{5,6})',
                                                r'code: (\d{5,6})',
                                                r'–∫–æ–¥: (\d{5,6})',
                                                r'–ö–æ–¥: (\d{5,6})',
                                                r'\b(\d{5,6})\b'  # –õ—é–±—ã–µ 5-6 —Ü–∏—Ñ—Ä
                                            ]
                                            
                                            for pattern in code_patterns:
                                                match = re.search(pattern, text)
                                                if match:
                                                    code = match.group(1)
                                                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {code}")
                                                    await session_client.disconnect()
                            await temp_client.disconnect()
                            return code
                                    
                                    await asyncio.sleep(2)
                                    
                                except Exception as msg_error:
                                    logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_error}")
                                    await asyncio.sleep(1)
                            
                            await session_client.disconnect()
                        
                    except Exception as session_error:
                        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é: {session_error}")
                
                await temp_client.disconnect()
                logger.warning("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_CODE –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return ""
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            return ""
    
    async def _perform_automatic_auth(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not self.phone:
                self.phone = os.getenv('TELEGRAM_PHONE')
                if not self.phone:
                    logger.error("‚ùå TELEGRAM_PHONE –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                    return False
            
            logger.info(f"üìû –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –Ω–æ–º–µ—Ä–æ–º: {self.phone}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞
            sent_code = await self.client.send_code_request(self.phone)
            logger.info("üì± –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            code = await self._get_code_from_telegram_after_request()
            
            if not code:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                return False
            
            logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥: {code}")
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
                await self.client.sign_in(self.phone, code)
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ–¥–æ–º —É—Å–ø–µ—à–Ω–∞")
                return True
                
            except Exception as sign_in_error:
                error_str = str(sign_in_error)
                
                if "Two-step verification" in error_str or "password" in error_str.lower():
                    # –ù—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å 2FA
                    password = os.getenv('TELEGRAM_PASSWORD')
                    if password:
                        logger.info("üîí –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å 2FA –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                        await self.client.sign_in(password=password)
                        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞")
                        return True
                    else:
                        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA, –Ω–æ TELEGRAM_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        return False
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {sign_in_error}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            # –ü—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            session_path = 'ghost_session'
            self.client = TelegramClient(session_path, self.api_id, self.api_hash)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π
                await self.client.connect()
                
                if await self.client.is_user_authorized():
                    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é")
                else:
                    logger.info("üîë –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                    if not await self._perform_automatic_auth():
                        logger.error("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                        return False
                        
            except Exception as auth_error:
                logger.info(f"üîë –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {auth_error}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if not await self._perform_automatic_auth():
                    logger.error("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                logger.info(f"Telegram client authorized as: {me.first_name} (@{me.username})")
                return True
            else:
                logger.error("Telegram client not authorized")
                return False
                
        except Exception as e:
            logger.error(f"Error initializing Telegram client: {e}")
            return False
    
    def add_channel(self, channel_config: ChannelConfig):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.channels[channel_config.channel_id] = channel_config
        self.stats['by_channel'][channel_config.channel_id] = {
            'messages': 0,
            'signals': 0,
            'name': channel_config.channel_name
        }
        logger.info(f"Added channel: {channel_config.channel_name} (ID: {channel_config.channel_id})")
    
    def load_channels_from_config(self, config_path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    config_data = json.load(f)
                
                for channel_data in config_data.get('channels', []):
                    config = ChannelConfig(
                        channel_id=channel_data['channel_id'],
                        channel_name=channel_data['channel_name'],
                        trader_id=channel_data['trader_id'],
                        is_active=channel_data.get('is_active', True),
                        keywords_filter=channel_data.get('keywords_filter', []),
                        exclude_keywords=channel_data.get('exclude_keywords', [])
                    )
                    self.add_channel(config)
                
                logger.info(f"Loaded {len(self.channels)} channels from config")
            
            else:
                logger.warning(f"Config file not found: {config_path}")
                
        except Exception as e:
            logger.error(f"Error loading channels config: {e}")
    
    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.client:
            logger.error("Telegram client not initialized")
            return
        
        if not self.channels:
            logger.warning("No channels configured for listening")
            return
        
        logger.info(f"Starting to listen to {len(self.channels)} channels...")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        @self.client.on(events.NewMessage())
        async def handle_new_message(event):
            await self._handle_message(event)
        
        # –î–µ—Ä–∂–∏–º –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
        try:
            await self.client.run_until_disconnected()
        except Exception as e:
            logger.error(f"Error in Telegram listener: {e}")
            raise
    
    def set_message_handler(self, handler_func):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.external_message_handler = handler_func
        logger.info("External message handler set")
    
    async def _handle_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = await event.get_chat()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∫–∞–Ω–∞–ª–∞
            if hasattr(chat, 'id'):
                chat_id = str(chat.id)
            else:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–Ω–∏—Ç–æ—Ä–∏–º –ª–∏ –º—ã —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
            if chat_id not in self.channels:
                return
            
            channel_config = self.channels[chat_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª
            if not channel_config.is_active:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = event.message.text or ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            has_image = bool(event.message.photo or event.message.document)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not message_text and not has_image:
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            message_id = f"{chat_id}_{event.message.id}"
            if message_id in self.processed_messages:
                return
            
            self.processed_messages.add(message_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['messages_received'] += 1
            self.stats['by_channel'][chat_id]['messages'] += 1
            
            logger.debug(f"New message from {channel_config.channel_name}: {message_text[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if not self._message_passes_filters(message_text, channel_config):
                return
            
            # –î–ª—è –∫–∞–Ω–∞–ª–∞ Whales Guide - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            is_whales_guide = channel_config.trader_id == "whales_guide_main"
            
            if is_whales_guide:
                # –î–ª—è Whales Guide - –±–µ—Ä–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                is_signal = (message_text and len(message_text) > 10) or has_image
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
            is_text_signal = message_text and self._looks_like_signal(message_text)
            is_image_signal = has_image
                is_signal = is_text_signal or is_image_signal
            
            if not is_signal:
                logger.debug("Message doesn't look like a trading signal")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
            self.stats['signals_detected'] += 1
            self.stats['by_channel'][chat_id]['signals'] += 1
            
            logger.info(f"Signal detected from {channel_config.channel_name}")
            
            # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if self.external_message_handler:
                try:
                    message_data = {
                        "chat_id": chat_id,
                        "message_id": event.message.id,
                        "text": message_text,
                        "timestamp": event.message.date,
                        "has_image": has_image,
                        "channel_name": channel_config.channel_name,
                        "trader_id": channel_config.trader_id
                    }
                    
                    await self.external_message_handler(message_data)
                    logger.debug(f"External handler called for message from {channel_config.channel_name}")
                    
                except Exception as e:
                    logger.error(f"Error in external message handler: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ (—Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
            await self._process_signal(message_text, channel_config, event, has_image)
            
        except Exception as e:
            logger.error(f"Error handling message: {e}")
    
    def _message_passes_filters(self, text: str, config: ChannelConfig) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã"""
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if config.exclude_keywords:
            for keyword in config.exclude_keywords:
                if keyword.lower() in text_lower:
                    logger.debug(f"Message excluded by keyword: {keyword}")
                    return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–∞—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if config.keywords_filter:
            for keyword in config.keywords_filter:
                if keyword.lower() in text_lower:
                    return True
            logger.debug("Message doesn't match include keywords")
            return False
        
        return True
    
    def _looks_like_signal(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        text_lower = text.lower()
        
        # –î–ª—è –∫–∞–Ω–∞–ª–∞ Whales Guide - –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        crypto_indicators = [
            'btc', 'eth', 'usdt', 'bnb', 'ada', 'xrp', 'sol', 'dot', 'doge', 'matic',
            'avax', 'shib', 'ltc', 'link', 'uni', 'atom', 'xlm', 'vet', 'icp', 'fil',
            'trx', 'etc', 'ftt', 'near', 'algo', 'mana', 'sand', 'gala', 'ape', 'lrc',
            'crypto', 'bitcoin', 'ethereum', 'binance', 'trading', 'signal', 'whale',
            'long', 'short', 'buy', 'sell', 'pump', 'dump', 'bullish', 'bearish',
            'entry', 'target', 'profit', 'loss', 'tp', 'sl', 'stop', 'resistance', 
            'support', 'breakout', 'moon', 'gem', 'x10', 'x100', 'hodl', 'fomo',
            'alert', 'call', 'analysis', 'market', 'price', 'trend', 'chart'
        ]
        
        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã 1 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä - —Å—á–∏—Ç–∞–µ–º —Å–∏–≥–Ω–∞–ª–æ–º
        for indicator in crypto_indicators:
            if indicator in text_lower:
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ü–µ–Ω –∏ —Å–∏–º–≤–æ–ª–æ–≤
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ü–µ–Ω ($1.23, 45000, 0.001234)
        price_patterns = [
            r'\$\d+\.?\d*',  # $123.45
            r'\d+\.\d+',     # 123.45
            r'\d{4,}',       # 45000
        ]
        
        for pattern in price_patterns:
            if re.search(pattern, text):
                return True
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞ - —Ç–æ–∂–µ –±–µ—Ä–µ–º
        if len(text) > 50 and re.search(r'\d', text):
            return True
            
        return False
    
    async def _process_signal(self, text: str, config: ChannelConfig, event, has_image: bool = False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä (—Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
            source_info = {
                'channel_id': config.channel_id,
                'channel_name': config.channel_name,
                'message_id': event.message.id,
                'message_date': event.message.date,
                'chat_type': 'channel',
                'has_image': has_image
            }
            
            result = None
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
            if has_image:
                logger.info(f"üñºÔ∏è Processing image signal from {config.channel_name}")
                image_result = await self._process_image_signal(event, text, config)
                if image_result:
                    result = image_result
                    logger.info(f"‚úÖ Image signal parsed: {result.get('symbol')} {result.get('side')}")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º —Ç–µ–∫—Å—Ç
            if not result and text:
                result = await route_signal(text, config.trader_id, source_info)
            
            if result:
                self.stats['signals_parsed'] += 1
                logger.info(f"Signal successfully parsed: {result.get('symbol')} {result.get('side', result.get('direction'))}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                await self._save_raw_signal(text, config, event, result, has_image)
                
            else:
                logger.warning(f"Failed to parse signal from {config.channel_name}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                await self._save_raw_signal(text, config, event, None, has_image)
                
        except Exception as e:
            logger.error(f"Error processing signal: {e}")
    
    async def _process_image_signal(self, event, caption: str, config: ChannelConfig) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = await self._download_image_from_event(event)
            if not image_data:
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
            result = await self.image_parser.parse_image_signal(
                image_data=image_data,
                telegram_caption=caption
            )
            
            if result and result.get('is_signal'):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç —Å–∏—Å—Ç–µ–º—ã
                return {
                    'symbol': result.get('symbol'),
                    'side': result.get('side'),
                    'entry': result.get('entry'),
                    'targets': result.get('targets'),
                    'stop_loss': result.get('stop_loss'),
                    'leverage': result.get('leverage'),
                    'reason': result.get('reason'),
                    'confidence': result.get('confidence', 0.8),
                    'source': 'image_analysis',
                    'ai_model': result.get('ai_model'),
                    'chart_pattern': result.get('chart_pattern'),
                    'timeframe': result.get('timeframe'),
                    'trader_id': config.trader_id
                }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error processing image signal: {e}")
            return None
    
    async def _download_image_from_event(self, event) -> Optional[bytes]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Telegram —Å–æ–±—ã—Ç–∏—è"""
        try:
            if event.message.photo:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                image_data = await event.message.download_media(file=bytes)
                return image_data
            elif event.message.document:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if event.message.document.mime_type and event.message.document.mime_type.startswith('image/'):
                    image_data = await event.message.download_media(file=bytes)
                    return image_data
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error downloading image: {e}")
            return None
    
    async def _save_raw_signal(self, text: str, config: ChannelConfig, event, parsed_result: Optional[Dict], has_image: bool = False):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        try:
            raw_signal_data = {
                'trader_id': config.trader_id,
                'source_msg_id': str(event.message.id),
                'posted_at': event.message.date.isoformat(),
                'text': text,
                'meta': {
                    'channel_id': config.channel_id,
                    'channel_name': config.channel_name,
                    'parsed': parsed_result is not None,
                    'parsed_symbol': parsed_result.get('symbol') if parsed_result else None,
                    'parsed_direction': parsed_result.get('side', parsed_result.get('direction')) if parsed_result else None,
                    'has_image': has_image,
                    'source_type': parsed_result.get('source') if parsed_result else 'text_only',
                    'ai_model': parsed_result.get('ai_model') if parsed_result else None,
                    'confidence': parsed_result.get('confidence') if parsed_result else None
                }
            }
            
            # TODO: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ signals_raw —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ Supabase
            logger.debug(f"Saving raw signal from {config.trader_id}")
            
        except Exception as e:
            logger.error(f"Error saving raw signal: {e}")
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–ª—É—à–∞—Ç–µ–ª—è"""
        return {
            **self.stats,
            'channels_count': len(self.channels),
            'active_channels': len([c for c in self.channels.values() if c.is_active]),
            'parse_rate': (self.stats['signals_parsed'] / max(self.stats['signals_detected'], 1)) * 100
        }
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è"""
        if self.client:
            await self.client.disconnect()
            logger.info("Telegram listener stopped")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def create_telegram_listener(api_id: str, api_hash: str, phone: str = None) -> TelegramListener:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è Telegram"""
    listener = TelegramListener(api_id, api_hash, phone)
    
    if await listener.initialize():
        return listener
    else:
        raise Exception("Failed to initialize Telegram listener")

def create_default_channels_config() -> List[Dict[str, Any]]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤"""
    return [
        {
            "channel_id": "",  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
            "channel_name": "Crypto Hub VIP",
            "trader_id": "crypto_hub_vip",
            "is_active": True,
            "keywords_filter": ["longing", "shorting", "entry", "targets"],
            "exclude_keywords": ["test", "admin"]
        },
        {
            "channel_id": "",  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
            "channel_name": "2Trade",
            "trader_id": "2trade",
            "is_active": True,
            "keywords_filter": ["pair:", "direction:", "entry:"],
            "exclude_keywords": ["demo", "test"]
        }
    ]

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def test_telegram_listener():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Å–ª—É—à–∞—Ç–µ–ª—è"""
    print("üß™ Testing Telegram Listener")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    test_config = ChannelConfig(
        channel_id="test_channel",
        channel_name="Test Channel",
        trader_id="test_trader"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    listener = TelegramListener("test_api_id", "test_api_hash")
    listener.add_channel(test_config)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    test_messages = [
        "Longing #SUI Here - Long (5x - 10x) Entry: $3.89",  # –î–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        "Hello everyone! How are you today?",  # –ù–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        "PAIR: BTC DIRECTION: LONG ENTRY: $43000",  # –î–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        "Admin announcement: server maintenance",  # –ù–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
    ]
    
    for i, msg in enumerate(test_messages):
        passes_filter = listener._message_passes_filters(msg, test_config)
        looks_like_signal = listener._looks_like_signal(msg)
        
        print(f"Message {i+1}: {'‚úÖ' if (passes_filter and looks_like_signal) else '‚ùå'}")
        print(f"  Text: {msg[:50]}...")
        print(f"  Passes filter: {passes_filter}")
        print(f"  Looks like signal: {looks_like_signal}")
        print()
    
    return listener

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram Listener"""
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH') 
    phone = os.getenv('TELEGRAM_PHONE')
    
    if not api_id or not api_hash:
        logger.error("‚ùå TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º listener
        listener = TelegramListener(api_id, api_hash, phone)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
        config_path = os.path.join('config', 'telegram_channels.json')
        listener.load_channels_from_config(config_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if await listener.initialize():
            logger.info("üü¢ Telegram Listener –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
            await listener.start_listening()
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram Listener")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Telegram Listener: {e}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    asyncio.run(main())