#!/usr/bin/env python3
"""
GHOST Telegram Listener - –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ Telegram –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

–§—É–Ω–∫—Ü–∏–∏:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º Telegram –∫–∞–Ω–∞–ª–∞–º
- –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º
"""

import asyncio
import json
import logging
import os
import re
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict
import yaml
import aioredis
from telethon import TelegramClient, events
from telethon.tl.types import Channel, Chat
import sqlite3
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —É—Ç–∏–ª–∏—Ç–∞–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from utils.ghost_logger import log_info, log_warning, log_error
    from utils.database_manager import DatabaseManager
except ImportError as e:
    print(f"Warning: Could not import utils: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/telegram_listener.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('TelegramListener')

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    id: str
    channel_id: str
    channel_name: str
    trader_name: str
    message_id: int
    timestamp: datetime
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞
    symbol: str
    direction: str  # LONG, SHORT
    entry_zone: List[float]  # –ó–æ–Ω–∞ –≤—Ö–æ–¥–∞
    tp_levels: List[float]   # Take Profit —É—Ä–æ–≤–Ω–∏
    sl_level: float          # Stop Loss
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    leverage: Optional[int] = None
    risk_percent: Optional[float] = None
    confidence: Optional[float] = None
    
    # –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    original_text: str = ""
    parsed_data: Dict[str, Any] = None
    validation_status: str = "pending"  # pending, valid, invalid
    validation_errors: List[str] = None
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞
    trader_stats: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.parsed_data is None:
            self.parsed_data = {}
        if self.validation_errors is None:
            self.validation_errors = []
        if self.trader_stats is None:
            self.trader_stats = {}

@dataclass
class ChannelConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞"""
    id: Union[str, int]
    name: str
    trader_name: str
    enabled: bool = True
    signal_patterns: List[str] = None
    parser_type: str = "default"  # default, custom_parser_name
    priority: int = 1  # 1-5, —á–µ–º –≤—ã—à–µ - —Ç–µ–º –≤–∞–∂–Ω–µ–µ
    min_confidence: float = 0.7
    
    def __post_init__(self):
        if self.signal_patterns is None:
            self.signal_patterns = []

class SignalParser:
    """–ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.symbol_pattern = re.compile(r'([A-Z]+/USDT|[A-Z]+USDT)', re.IGNORECASE)
        self.direction_pattern = re.compile(r'(LONG|SHORT|BUY|SELL)', re.IGNORECASE)
        self.entry_pattern = re.compile(r'(?:Entry|–í—Ö–æ–¥|ENTRY)[\s:]*([0-9.,\-\s]+)', re.IGNORECASE)
        self.tp_pattern = re.compile(r'(?:TP|Take\s*Profit|–¶–µ–ª—å)[\s:]*([0-9.,\-\s]+)', re.IGNORECASE)
        self.sl_pattern = re.compile(r'(?:SL|Stop\s*Loss|–°—Ç–æ–ø)[\s:]*([0-9.,\-\s]+)', re.IGNORECASE)
        self.leverage_pattern = re.compile(r'(?:Leverage|–ü–ª–µ—á–æ)[\s:]*(\d+)[xX—Ö]?', re.IGNORECASE)
    
    def parse_signal(self, text: str, channel_name: str, trader_name: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            signal_data = {}
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
            symbol_match = self.symbol_pattern.search(text)
            if symbol_match:
                symbol = symbol_match.group(1).upper()
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
                if not symbol.endswith('USDT'):
                    symbol = symbol.replace('/', '') + 'USDT'
                signal_data['symbol'] = symbol
            else:
                return None  # –ë–µ–∑ —Å–∏–º–≤–æ–ª–∞ —Å–∏–≥–Ω–∞–ª –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            direction_match = self.direction_pattern.search(text)
            if direction_match:
                direction = direction_match.group(1).upper()
                if direction in ['BUY', 'LONG']:
                    signal_data['direction'] = 'LONG'
                elif direction in ['SELL', 'SHORT']:
                    signal_data['direction'] = 'SHORT'
            else:
                return None  # –ë–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–æ–Ω—ã –≤—Ö–æ–¥–∞
            entry_match = self.entry_pattern.search(text)
            if entry_match:
                entry_text = entry_match.group(1)
                signal_data['entry_zone'] = self._parse_numbers(entry_text)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ TP —É—Ä–æ–≤–Ω–µ–π
            tp_matches = self.tp_pattern.findall(text)
            if tp_matches:
                tp_levels = []
                for tp_text in tp_matches:
                    tp_levels.extend(self._parse_numbers(tp_text))
                signal_data['tp_levels'] = tp_levels
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ SL
            sl_match = self.sl_pattern.search(text)
            if sl_match:
                sl_numbers = self._parse_numbers(sl_match.group(1))
                if sl_numbers:
                    signal_data['sl_level'] = sl_numbers[0]
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–ª–µ—á–∞
            leverage_match = self.leverage_pattern.search(text)
            if leverage_match:
                signal_data['leverage'] = int(leverage_match.group(1))
            
            # –†–∞—Å—á—ë—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
            confidence = self._calculate_confidence(signal_data)
            signal_data['confidence'] = confidence
            
            return signal_data if confidence >= 0.5 else None
            
        except Exception as e:
            logger.error(f"Error parsing signal: {e}")
            return None
    
    def _parse_numbers(self, text: str) -> List[float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        numbers = []
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º
        clean_text = re.sub(r'[^\d.,\-\s]', ' ', text)
        
        for num_str in clean_text.split():
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —á–∏—Å–µ–ª
                num_str = num_str.replace(',', '.')
                if '-' in num_str and num_str.count('-') == 1:
                    # –î–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5-1.6)
                    parts = num_str.split('-')
                    if len(parts) == 2:
                        numbers.append(float(parts[0]))
                        numbers.append(float(parts[1]))
                else:
                    numbers.append(float(num_str))
            except ValueError:
                continue
        
        return numbers
    
    def _calculate_confidence(self, signal_data: Dict[str, Any]) -> float:
        """–†–∞—Å—á—ë—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–∏–≥–Ω–∞–ª–µ"""
        score = 0.0
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'symbol' in signal_data:
            score += 0.3
        if 'direction' in signal_data:
            score += 0.3
        
        # –ñ–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'entry_zone' in signal_data and signal_data['entry_zone']:
            score += 0.2
        if 'tp_levels' in signal_data and signal_data['tp_levels']:
            score += 0.15
        if 'sl_level' in signal_data:
            score += 0.05
        
        return min(1.0, score)

class TelegramListener:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, config_path: str = "config/telegram_config.yaml"):
        self.config_path = config_path
        self.config = {}
        self.channels: Dict[str, ChannelConfig] = {}
        self.client: Optional[TelegramClient] = None
        self.redis: Optional[aioredis.Redis] = None
        self.db_manager: Optional[DatabaseManager] = None
        self.signal_parser = SignalParser()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'signals_found': 0,
            'signals_valid': 0,
            'signals_invalid': 0,
            'start_time': datetime.utcnow()
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.running = False
        self.last_health_check = datetime.utcnow()
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Listener"""
        logger.info("üöÄ Initializing Telegram Listener...")
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self._load_config()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
            await self._init_telegram_client()
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
            await self._init_redis()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self._init_database()
            
            logger.info("‚úÖ Telegram Listener initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Telegram Listener: {e}")
            raise
    
    async def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    self.config = yaml.safe_load(f)
            else:
                # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                self.config = self._get_default_config()
                os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
                with open(self.config_path, 'w', encoding='utf-8') as f:
                    yaml.dump(self.config, f, default_flow_style=False)
                logger.info(f"Created default config at {self.config_path}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
            for channel_data in self.config.get('channels', []):
                channel_config = ChannelConfig(**channel_data)
                self.channels[str(channel_config.id)] = channel_config
                
            logger.info(f"Loaded {len(self.channels)} channels")
            
        except Exception as e:
            logger.error(f"Failed to load config: {e}")
            raise
    
    def _get_default_config(self) -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'telegram': {
                'api_id': os.getenv('TELEGRAM_API_ID'),
                'api_hash': os.getenv('TELEGRAM_API_HASH'),
                'session_name': 'ghost_listener'
            },
            'redis': {
                'url': 'redis://localhost:6379/1',
                'enabled': True
            },
            'database': {
                'signals_table': 'trading_signals',
                'traders_table': 'trader_stats'
            },
            'channels': [
                # –ü—Ä–∏–º–µ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤ (–∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
                {
                    'id': '@example_signals',
                    'name': 'Example Signals',
                    'trader_name': 'ExampleTrader',
                    'enabled': False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    'parser_type': 'default',
                    'priority': 3
                }
            ],
            'parsing': {
                'min_confidence': 0.7,
                'save_all_signals': True,
                'save_invalid_signals': False
            }
        }
    
    async def _init_telegram_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            telegram_config = self.config['telegram']
            api_id = telegram_config['api_id']
            api_hash = telegram_config['api_hash']
            session_name = telegram_config['session_name']
            
            if not api_id or not api_hash:
                raise ValueError("TELEGRAM_API_ID and TELEGRAM_API_HASH must be set")
            
            self.client = TelegramClient(session_name, api_id, api_hash)
            await self.client.start()
            
            logger.info("‚úÖ Telegram client connected")
            
        except Exception as e:
            logger.error(f"Failed to initialize Telegram client: {e}")
            raise
    
    async def _init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis"""
        if not self.config.get('redis', {}).get('enabled', False):
            logger.info("Redis disabled in config")
            return
            
        try:
            redis_url = self.config['redis']['url']
            self.redis = await aioredis.from_url(redis_url)
            await self.redis.ping()
            logger.info("‚úÖ Redis connected")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Redis connection failed: {e}")
            self.redis = None
    
    async def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç DatabaseManager
            # self.db_manager = DatabaseManager()
            # await self.db_manager.initialize()
            logger.info("‚úÖ Database manager initialized")
        except Exception as e:
            logger.error(f"‚ùå Database initialization failed: {e}")
    
    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info("üéß Starting Telegram channels listening...")
        self.running = True
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            await self._register_event_handlers()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self._main_loop()
            
        except Exception as e:
            logger.error(f"‚ùå Listening error: {e}")
            raise
        finally:
            await self.shutdown()
    
    async def _register_event_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.client.on(events.NewMessage)
        async def handle_new_message(event):
            await self._process_message(event)
        
        logger.info("üì° Event handlers registered")
    
    async def _process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            self.stats['messages_processed'] += 1
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            chat_id = str(event.chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞–Ω–∞–ª –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
            if chat_id not in self.channels:
                return
            
            channel_config = self.channels[chat_id]
            if not channel_config.enabled:
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = event.message.message
            if not message_text:
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞
            parsed_data = self.signal_parser.parse_signal(
                message_text, 
                channel_config.name, 
                channel_config.trader_name
            )
            
            if parsed_data:
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
                signal = TradingSignal(
                    id=f"{chat_id}_{event.message.id}_{int(datetime.utcnow().timestamp())}",
                    channel_id=chat_id,
                    channel_name=channel_config.name,
                    trader_name=channel_config.trader_name,
                    message_id=event.message.id,
                    timestamp=datetime.utcnow(),
                    symbol=parsed_data['symbol'],
                    direction=parsed_data['direction'],
                    entry_zone=parsed_data.get('entry_zone', []),
                    tp_levels=parsed_data.get('tp_levels', []),
                    sl_level=parsed_data.get('sl_level'),
                    leverage=parsed_data.get('leverage'),
                    confidence=parsed_data.get('confidence', 0.0),
                    original_text=message_text,
                    parsed_data=parsed_data
                )
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                await self._validate_signal(signal)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
                await self._save_signal(signal)
                
                self.stats['signals_found'] += 1
                if signal.validation_status == 'valid':
                    self.stats['signals_valid'] += 1
                else:
                    self.stats['signals_invalid'] += 1
                
                logger.info(f"üìà Signal processed: {signal.symbol} {signal.direction} "
                           f"from {signal.trader_name} (confidence: {signal.confidence:.2f})")
            
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            logger.error(traceback.format_exc())
    
    async def _validate_signal(self, signal: TradingSignal):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not signal.symbol:
            errors.append("Missing symbol")
        if not signal.direction:
            errors.append("Missing direction")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ —Ü–µ–Ω
        if signal.entry_zone and signal.tp_levels:
            entry_avg = sum(signal.entry_zone) / len(signal.entry_zone)
            for tp in signal.tp_levels:
                if signal.direction == 'LONG' and tp <= entry_avg:
                    errors.append(f"TP {tp} should be higher than entry {entry_avg} for LONG")
                elif signal.direction == 'SHORT' and tp >= entry_avg:
                    errors.append(f"TP {tp} should be lower than entry {entry_avg} for SHORT")
        
        if signal.sl_level and signal.entry_zone:
            entry_avg = sum(signal.entry_zone) / len(signal.entry_zone)
            if signal.direction == 'LONG' and signal.sl_level >= entry_avg:
                errors.append(f"SL {signal.sl_level} should be lower than entry {entry_avg} for LONG")
            elif signal.direction == 'SHORT' and signal.sl_level <= entry_avg:
                errors.append(f"SL {signal.sl_level} should be higher than entry {entry_avg} for SHORT")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if errors:
            signal.validation_status = 'invalid'
            signal.validation_errors = errors
        else:
            signal.validation_status = 'valid'
    
    async def _save_signal(self, signal: TradingSignal):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ Redis"""
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            if self.redis:
                signal_data = asdict(signal)
                await self.redis.lpush(
                    'ghost:signals:new',
                    json.dumps(signal_data, default=str)
                )
                await self.redis.ltrim('ghost:signals:new', 0, 1000)  # –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ 1000 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à –ø–æ —Ç—Ä–µ–π–¥–µ—Ä—É
                await self.redis.lpush(
                    f'ghost:signals:trader:{signal.trader_name}',
                    json.dumps(signal_data, default=str)
                )
                await self.redis.ltrim(f'ghost:signals:trader:{signal.trader_name}', 0, 100)
            
            # –í –±—É–¥—É—â–µ–º - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL —á–µ—Ä–µ–∑ DatabaseManager
            # await self.db_manager.save_signal(signal)
            
        except Exception as e:
            logger.error(f"Failed to save signal: {e}")
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîÑ Starting main loop...")
        
        try:
            # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
            await self.client.run_until_disconnected()
        except Exception as e:
            logger.error(f"Main loop error: {e}")
            raise
    
    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram Listener"""
        uptime = (datetime.utcnow() - self.stats['start_time']).total_seconds()
        
        return {
            'status': 'running' if self.running else 'stopped',
            'uptime': uptime,
            'channels_total': len(self.channels),
            'channels_enabled': sum(1 for c in self.channels.values() if c.enabled),
            'statistics': {
                **self.stats,
                'signals_per_minute': self.stats['signals_found'] / max(uptime / 60, 1),
                'success_rate': self.stats['signals_valid'] / max(self.stats['signals_found'], 1) * 100
            },
            'last_health_check': self.last_health_check.isoformat(),
            'telegram_connected': self.client is not None and self.client.is_connected(),
            'redis_connected': self.redis is not None
        }
    
    async def shutdown(self):
        """Graceful shutdown"""
        logger.info("üõë Shutting down Telegram Listener...")
        self.running = False
        
        if self.client:
            await self.client.disconnect()
        
        if self.redis:
            await self.redis.close()
        
        logger.info("‚úÖ Telegram Listener shutdown complete")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    listener = TelegramListener()
    
    try:
        await listener.initialize()
        await listener.start_listening()
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt")
    except Exception as e:
        logger.error(f"Telegram Listener failed: {e}")
        logger.error(traceback.format_exc())
    finally:
        await listener.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
