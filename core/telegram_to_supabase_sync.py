#!/usr/bin/env python3
"""
üöÄ GHOST Telegram to Supabase Sync
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö Telegram —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ñ–æ–Ω–¥–æ–≤
"""

import asyncio
import logging
import os
import sys
import json
import re
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '.env'))

from telethon import TelegramClient, events
from telethon.tl.types import Channel, Chat
from supabase import create_client, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('../logs/telegram_supabase_sync.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('TelegramSupabaseSync')

class TelegramSupabaseSync:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Telegram —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π Supabase –±–∞–∑–æ–π"""
    
    def __init__(self):
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        
        # Supabase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
        
        # –ö–ª–∏–µ–Ω—Ç—ã
        self.telegram_client: Optional[TelegramClient] = None
        self.supabase_client: Optional[Client] = None
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitored_channels = {
            -1001288385100: {  # Whales Crypto Guide
                'source_code': 'whales_crypto_guide',
                'source_name': 'Whales Crypto Guide',
                'trader_id': 'whales_guide'
            }
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_patterns = {
            'symbol': r'[#$]?([A-Z]{2,10}USDT?)',
            'direction': r'\b(LONG|SHORT|BUY|SELL)\b',
            'entry': r'(?:Entry|–í—Ö–æ–¥|ENTRY)[\s:]*(\d+\.?\d*)',
            'stop': r'(?:Stop|–°—Ç–æ–ø|SL|STOP)[\s:]*(\d+\.?\d*)',
            'targets': r'(?:Target|TP|–¶–µ–ª—å)[\s:]*(\d+\.?\d*)',
            'leverage': r'(?:Leverage|–ü–ª–µ—á–æ)[\s:]*(\d+)x?',
            'risk': r'(?:Risk|–†–∏—Å–∫)[\s:]*(\d+\.?\d*)%?'
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_received': 0,
            'signals_parsed': 0,
            'signals_saved': 0,
            'errors': 0
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
            await self._init_telegram()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
            await self._init_supabase()
            
            logger.info("üöÄ TelegramSupabaseSync –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def _init_telegram(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.api_id or not self.api_hash:
            raise ValueError("TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        
        # –ü—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏
        session_path = os.path.join('..', 'ghost_session')
        self.telegram_client = TelegramClient(session_path, int(self.api_id), self.api_hash)
        
        await self.telegram_client.start()
        
        if await self.telegram_client.is_user_authorized():
            me = await self.telegram_client.get_me()
            logger.info(f"‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name} (@{me.username})")
        else:
            raise Exception("Telegram –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    
    async def _init_supabase(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.supabase_url or not self.supabase_key:
            raise ValueError("SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        
        self.supabase_client = create_client(self.supabase_url, self.supabase_key)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            result = self.supabase_client.table('signal_sources').select('*').limit(1).execute()
            logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Supabase: {e}")
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            await self._ensure_tables_exist()
    
    async def _ensure_tables_exist(self):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –≤ Supabase...")
        
        # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        required_tables = [
            'signal_sources',
            'signals_raw', 
            'signals_parsed',
            'instruments',
            'trades'
        ]
        
        for table in required_tables:
            try:
                self.supabase_client.table(table).select('id').limit(1).execute()
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.telegram_client:
            raise Exception("Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        logger.info(f"üì° –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self.monitored_channels)} –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        @self.telegram_client.on(events.NewMessage)
        async def handle_message(event):
            await self._process_message(event)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await self.telegram_client.run_until_disconnected()
    
    async def _process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            chat_id = event.chat_id
            if chat_id not in self.monitored_channels:
                return
            
            channel_info = self.monitored_channels[chat_id]
            message = event.message
            
            self.stats['messages_received'] += 1
            
            logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel_info['source_name']}")
            
            # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            raw_signal_id = await self._save_raw_signal(message, channel_info)
            
            # 2. –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
            parsed_signal = await self._parse_signal(message.text or "", channel_info)
            
            if parsed_signal:
                # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                parsed_signal_id = await self._save_parsed_signal(parsed_signal, raw_signal_id, channel_info)
                
                # 4. –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ —Ä—ã–Ω–∫–∞ (–µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª)
                if parsed_signal.get('symbol'):
                    await self._save_market_snapshot(parsed_signal_id, parsed_signal['symbol'])
                
                # 5. –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
                await self._create_alert(parsed_signal, parsed_signal_id)
                
                self.stats['signals_parsed'] += 1
                logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {parsed_signal.get('symbol', 'Unknown')} {parsed_signal.get('direction', 'Unknown')}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if self.stats['messages_received'] % 10 == 0:
                await self._log_stats()
                
        except Exception as e:
            self.stats['errors'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    async def _save_raw_signal(self, message, channel_info) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ signals_raw"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_result = self.supabase_client.table('signal_sources').select('id').eq('source_code', channel_info['source_code']).execute()
            source_id = source_result.data[0]['id'] if source_result.data else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            text = message.text or ""
            hashtags = re.findall(r'#(\w+)', text)
            mentions = re.findall(r'@(\w+)', text)
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ sentiment
            positive_words = ['buy', 'long', 'profit', 'target', 'bullish', 'up']
            negative_words = ['sell', 'short', 'loss', 'stop', 'bearish', 'down']
            
            text_lower = text.lower()
            pos_count = sum(1 for word in positive_words if word in text_lower)
            neg_count = sum(1 for word in negative_words if word in text_lower)
            
            sentiment_score = 0.0
            if pos_count + neg_count > 0:
                sentiment_score = (pos_count - neg_count) / (pos_count + neg_count)
            
            raw_data = {
                'source_id': source_id,
                'message_id': str(message.id),
                'channel_id': str(message.chat_id),
                'raw_text': text,
                'message_timestamp': message.date.isoformat(),
                'received_timestamp': datetime.now(timezone.utc).isoformat(),
                'sender_username': getattr(message.sender, 'username', None),
                'sender_id': str(message.sender_id) if message.sender_id else None,
                'message_type': 'text',
                'forwarded_from': str(message.forward.from_id) if message.forward else None,
                'hashtags': hashtags,
                'mentions': mentions,
                'character_count': len(text),
                'word_count': len(text.split()),
                'sentiment_score': sentiment_score,
                'urgency_indicators': [word for word in ['BREAKING', 'URGENT', 'NOW', 'ALERT'] if word in text.upper()],
                'processing_status': 'processed'
            }
            
            result = self.supabase_client.table('signals_raw').insert(raw_data).execute()
            
            if result.data:
                return result.data[0]['id']
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—ã—Ä–æ–π —Å–∏–≥–Ω–∞–ª")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—ã—Ä–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    async def _parse_signal(self, text: str, channel_info: Dict) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return None
        
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏–≥–Ω–∞–ª–∞
        parsed = {}
        
        # –°–∏–º–≤–æ–ª
        symbol_match = re.search(self.signal_patterns['symbol'], text, re.IGNORECASE)
        if symbol_match:
            parsed['symbol'] = symbol_match.group(1).upper()
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction_match = re.search(self.signal_patterns['direction'], text, re.IGNORECASE)
        if direction_match:
            parsed['direction'] = direction_match.group(1).upper()
            parsed['signal_type'] = 'LONG' if direction_match.group(1).upper() in ['LONG', 'BUY'] else 'SHORT'
        
        # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
        entry_match = re.search(self.signal_patterns['entry'], text, re.IGNORECASE)
        if entry_match:
            parsed['entry_price'] = float(entry_match.group(1))
        
        # –°—Ç–æ–ø-–ª–æ—Å—Å
        stop_match = re.search(self.signal_patterns['stop'], text, re.IGNORECASE)
        if stop_match:
            parsed['stop_loss'] = float(stop_match.group(1))
        
        # –¶–µ–ª–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏)
        targets = re.findall(self.signal_patterns['targets'], text, re.IGNORECASE)
        if targets:
            parsed['take_profit_levels'] = [float(t) for t in targets]
        
        # –ü–ª–µ—á–æ
        leverage_match = re.search(self.signal_patterns['leverage'], text, re.IGNORECASE)
        if leverage_match:
            parsed['leverage'] = int(leverage_match.group(1))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ ORDIUSDT)
        # –ò—â–µ–º —á–∏—Å–ª–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ä–æ–≤–Ω—è–º–∏ –≤—Ö–æ–¥–∞
        numbers = re.findall(r'\b\d+\.?\d*\b', text)
        if len(numbers) > 3:  # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —á–∏—Å–µ–ª, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —É—Ä–æ–≤–Ω–∏
            try:
                entry_levels = []
                for num in numbers[1:5]:  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 4 —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ
                    level = float(num)
                    if parsed.get('entry_price') and abs(level - parsed['entry_price']) / parsed['entry_price'] < 0.1:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 10%
                        entry_levels.append(level)
                if entry_levels:
                    parsed['entry_levels'] = entry_levels
            except:
                pass
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - —ç—Ç–æ —Å–∏–≥–Ω–∞–ª
        if parsed.get('symbol') and parsed.get('direction'):
            # –î–æ–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            parsed.update({
                'signal_timestamp': datetime.now(timezone.utc).isoformat(),
                'confidence_score': self._calculate_confidence(parsed, text),
                'parsing_method': 'regex',
                'parser_version': 'v1.0.0',
                'validation_status': 'valid' if self._validate_signal(parsed) else 'suspicious',
                'technical_reason': self._extract_technical_reason(text),
                'timeframe': self._extract_timeframe(text),
                'tags': self._extract_tags(text)
            })
            
            return parsed
        
        return None
    
    def _calculate_confidence(self, parsed: Dict, text: str) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        confidence = 0.5  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
        if parsed.get('entry_price'):
            confidence += 0.2
        if parsed.get('stop_loss'):
            confidence += 0.2
        if parsed.get('take_profit_levels'):
            confidence += 0.1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å —Ü–µ–Ω
        if parsed.get('entry_price') and parsed.get('stop_loss'):
            entry = parsed['entry_price']
            stop = parsed['stop_loss']
            direction = parsed.get('direction', '')
            
            if direction == 'LONG' and stop < entry:
                confidence += 0.1
            elif direction == 'SHORT' and stop > entry:
                confidence += 0.1
        
        return min(confidence, 1.0)
    
    def _validate_signal(self, parsed: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not all([parsed.get('symbol'), parsed.get('direction')]):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å —Ü–µ–Ω
            entry = parsed.get('entry_price')
            stop = parsed.get('stop_loss')
            direction = parsed.get('direction')
            
            if entry and stop and direction:
                if direction == 'LONG' and stop >= entry:
                    return False
                if direction == 'SHORT' and stop <= entry:
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –ø–ª–µ—á–∞
            leverage = parsed.get('leverage', 1)
            if leverage > 100:  # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –ø–ª–µ—á–æ
                return False
            
            return True
            
        except:
            return False
    
    def _extract_technical_reason(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞"""
        technical_indicators = ['RSI', 'MACD', 'EMA', 'SMA', 'Support', 'Resistance', 'Breakout', 'Fibonacci']
        found_indicators = [indicator for indicator in technical_indicators if indicator.lower() in text.lower()]
        
        if found_indicators:
            return f"Technical: {', '.join(found_indicators)}"
        
        return None
    
    def _extract_timeframe(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        timeframes = ['1m', '5m', '15m', '30m', '1h', '4h', '1d', '1w']
        for tf in timeframes:
            if tf in text.lower():
                return tf
        return None
    
    def _extract_tags(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        tags = []
        
        # –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        if any(word in text.lower() for word in ['scalp', 'quick']):
            tags.append('scalping')
        if any(word in text.lower() for word in ['swing', 'hold']):
            tags.append('swing')
        if any(word in text.lower() for word in ['breakout', 'break']):
            tags.append('breakout')
        if any(word in text.lower() for word in ['reversal', 'reverse']):
            tags.append('reversal')
        
        return tags
    
    async def _save_parsed_signal(self, parsed_signal: Dict, raw_signal_id: str, channel_info: Dict) -> Optional[str]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_result = self.supabase_client.table('signal_sources').select('id').eq('source_code', channel_info['source_code']).execute()
            source_id = source_result.data[0]['id'] if source_result.data else None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            instrument_id = await self._get_or_create_instrument(parsed_signal['symbol'])
            
            signal_data = {
                'raw_signal_id': raw_signal_id,
                'source_id': source_id,
                'instrument_id': instrument_id,
                'signal_type': parsed_signal.get('signal_type', 'UNKNOWN'),
                'symbol': parsed_signal['symbol'],
                'direction': parsed_signal['direction'],
                'entry_price': parsed_signal.get('entry_price'),
                'entry_levels': parsed_signal.get('entry_levels', []),
                'stop_loss': parsed_signal.get('stop_loss'),
                'take_profit_levels': parsed_signal.get('take_profit_levels', []),
                'leverage': parsed_signal.get('leverage'),
                'confidence_score': parsed_signal.get('confidence_score', 0.5),
                'signal_timestamp': parsed_signal['signal_timestamp'],
                'technical_reason': parsed_signal.get('technical_reason'),
                'timeframe': parsed_signal.get('timeframe'),
                'parsing_confidence': parsed_signal.get('confidence_score', 0.5),
                'parsing_method': parsed_signal.get('parsing_method', 'regex'),
                'parser_version': parsed_signal.get('parser_version', 'v1.0.0'),
                'validation_status': parsed_signal.get('validation_status', 'valid'),
                'tags': parsed_signal.get('tags', [])
            }
            
            result = self.supabase_client.table('signals_parsed').insert(signal_data).execute()
            
            if result.data:
                self.stats['signals_saved'] += 1
                return result.data[0]['id']
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    async def _get_or_create_instrument(self, symbol: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ instruments –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ instruments –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ —Ç–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞
            logger.info(f"‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {symbol} - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ ID (—Ç–∞–±–ª–∏—Ü–∞ instruments –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º {symbol}: {e}")
            return None
    
    async def _save_market_snapshot(self, signal_id: str, symbol: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Ä—ã–Ω–∫–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"""
        try:
            # –¢–∞–±–ª–∏—Ü–∞ market_snapshots –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            logger.info(f"‚ÑπÔ∏è –°–Ω–∏–º–æ–∫ —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol} - –ø—Ä–æ–ø—É—â–µ–Ω (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞ —Ä—ã–Ω–∫–∞: {e}")
    
    async def _create_alert(self, parsed_signal: Dict, signal_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –æ –Ω–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"""
        try:
            # –¢–∞–±–ª–∏—Ü–∞ alerts –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"üîî –ê–ª–µ—Ä—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {parsed_signal['symbol']} {parsed_signal['direction']} - —Å–æ–∑–¥–∞–Ω –≤ –ª–æ–≥–∞—Ö")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def _log_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_received']}, "
                   f"–°–∏–≥–Ω–∞–ª–æ–≤: {self.stats['signals_parsed']}, "
                   f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['signals_saved']}, "
                   f"–û—à–∏–±–æ–∫: {self.stats['errors']}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram to Supabase Sync")
    
    sync = TelegramSupabaseSync()
    
    if await sync.initialize():
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        await sync.start_monitoring()
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return 1

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
