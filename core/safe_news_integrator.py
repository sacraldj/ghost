#!/usr/bin/env python3
"""
GHOST Safe News Integrator
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤
–ù–ï –ò–ó–ú–ï–ù–Ø–ï–¢ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ hooks
"""

import os
import sys
import asyncio
import logging
from typing import Dict, List, Optional, Any, Callable
from datetime import datetime
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
try:
    from .news_signal_enhancer import get_news_enhancer, NewsContext
    from .news_statistics_tracker import get_news_stats_tracker
    from .news_noise_filter import NewsNoiseFilter, is_news_important
except ImportError:
    # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    from news_signal_enhancer import get_news_enhancer, NewsContext
    from news_statistics_tracker import get_news_stats_tracker
    from news_noise_filter import NewsNoiseFilter, is_news_important

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SafeNewsIntegrator:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ middleware - –ù–ï –ù–ê–†–£–®–ê–ï–¢ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
    """
    
    def __init__(self):
        self.enabled = self._check_if_enabled()
        self.hooks_registered = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.enabled:
            self.news_enhancer = get_news_enhancer()
            self.stats_tracker = get_news_stats_tracker()
            self.noise_filter = NewsNoiseFilter()
            logger.info("‚úÖ Safe News Integrator initialized and ENABLED")
        else:
            logger.info("‚ö™ Safe News Integrator initialized but DISABLED")
    
    def _check_if_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –Ω–æ–≤–æ—Å—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"""
        # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        return os.getenv('GHOST_NEWS_INTEGRATION_ENABLED', 'false').lower() == 'true'
    
    def register_signal_hook(self, hook_name: str, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è hook'–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if self.enabled:
            self.hooks_registered.append(hook_name)
            logger.info(f"üîó Registered news hook: {hook_name}")
    
    async def enhance_signal_safely(self, signal_data: Dict, source_config: Dict) -> Dict:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        –ù–ï –ò–ó–ú–ï–ù–Ø–ï–¢ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å–∏–≥–Ω–∞–ª–∞
        """
        if not self.enabled:
            return signal_data
        
        try:
            # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
            enhanced_signal = signal_data.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            news_context = await self.news_enhancer.enhance_signal_context(signal_data, source_config)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ù–ï –ò–ó–ú–ï–ù–Ø–ï–ú –æ—Å–Ω–æ–≤–Ω—ã–µ!)
            enhanced_signal['news_enhancement'] = {
                'enabled': True,
                'context': news_context.__dict__,
                'summary': self.news_enhancer.get_enhancement_summary(news_context),
                'confidence_suggestion': news_context.confidence_modifier,
                'entry_timing_suggestion': news_context.entry_modifier,
                'risk_suggestion': news_context.risk_modifier,
                'enhanced_at': datetime.now().isoformat()
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é)
            self._log_enhancement_stats(signal_data, news_context)
            
            return enhanced_signal
            
        except Exception as e:
            logger.error(f"‚ùå Error in safe news enhancement: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            return signal_data
    
    def _log_enhancement_stats(self, signal_data: Dict, news_context: NewsContext):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è"""
        if not self.enabled:
            return
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if news_context.has_recent_news:
                news_event = {
                    'symbol': signal_data.get('symbol', 'UNKNOWN'),
                    'sentiment': news_context.sentiment_score,
                    'market_impact': news_context.market_impact,
                    'urgency': news_context.urgency_score,
                    'is_critical': news_context.urgency_score > 0.7
                }
                self.stats_tracker.record_news_event(news_event)
                
        except Exception as e:
            logger.error(f"‚ùå Error logging enhancement stats: {e}")
    
    def filter_news_safely(self, news_data: Dict) -> Optional[Dict]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤–∞–∂–Ω–∞
        """
        if not self.enabled:
            return news_data  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        
        try:
            filter_result = self.noise_filter.filter_news(news_data)
            
            if filter_result.is_important:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                filtered_news = news_data.copy()
                filtered_news['filter_info'] = {
                    'importance_score': filter_result.importance_score,
                    'detected_categories': filter_result.detected_categories,
                    'filter_reason': filter_result.filter_reason,
                    'filtered_at': datetime.now().isoformat()
                }
                return filtered_news
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
                logger.debug(f"üîç News filtered out: {news_data.get('title', '')[:50]}... (reason: {filter_result.filter_reason})")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error in safe news filtering: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
            return news_data
    
    def get_daily_news_report(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º"""
        if not self.enabled:
            return {'enabled': False, 'message': 'News integration disabled'}
        
        try:
            return self.stats_tracker.generate_daily_report()
        except Exception as e:
            logger.error(f"‚ùå Error generating daily news report: {e}")
            return {'error': str(e)}
    
    def print_news_statistics(self):
        """–ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not self.enabled:
            print("üì∞ News integration is DISABLED")
            return
        
        try:
            self.stats_tracker.print_daily_report()
        except Exception as e:
            logger.error(f"‚ùå Error printing news statistics: {e}")
    
    def update_news_settings(self, settings: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        if not self.enabled:
            logger.warning("‚ö†Ô∏è Cannot update settings - news integration disabled")
            return
        
        try:
            if 'importance_threshold' in settings:
                self.noise_filter.update_threshold(settings['importance_threshold'])
                logger.info(f"üéØ Updated importance threshold: {settings['importance_threshold']}")
            
            if 'enhancement_enabled' in settings:
                self.news_enhancer.enabled = settings['enhancement_enabled']
                logger.info(f"üîß Updated enhancement enabled: {settings['enhancement_enabled']}")
                
        except Exception as e:
            logger.error(f"‚ùå Error updating news settings: {e}")
    
    def get_integration_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            'enabled': self.enabled,
            'components': {
                'news_enhancer': self.enabled and hasattr(self, 'news_enhancer'),
                'stats_tracker': self.enabled and hasattr(self, 'stats_tracker'),
                'noise_filter': self.enabled and hasattr(self, 'noise_filter')
            },
            'hooks_registered': len(self.hooks_registered),
            'environment_var': os.getenv('GHOST_NEWS_INTEGRATION_ENABLED', 'false'),
            'timestamp': datetime.now().isoformat()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_safe_integrator: Optional[SafeNewsIntegrator] = None

def get_safe_news_integrator() -> SafeNewsIntegrator:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞"""
    global _safe_integrator
    if _safe_integrator is None:
        _safe_integrator = SafeNewsIntegrator()
    return _safe_integrator

# Utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def safe_enhance_signal(signal_data: Dict, source_config: Dict = None) -> Dict:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
    integrator = get_safe_news_integrator()
    return await integrator.enhance_signal_safely(signal_data, source_config or {})

def safe_filter_news(news_data: Dict) -> Optional[Dict]:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    integrator = get_safe_news_integrator()
    return integrator.filter_news_safely(news_data)

def get_news_integration_status() -> Dict:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    integrator = get_safe_news_integrator()
    return integrator.get_integration_status()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def with_news_context(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    
    @with_news_context
    def process_signal(signal_data, source_config):
        # signal_data —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å news_enhancement
        return processed_signal
    """
    async def wrapper(*args, **kwargs):
        # –ò—â–µ–º signal_data –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        signal_data = None
        source_config = None
        
        if len(args) >= 1 and isinstance(args[0], dict):
            signal_data = args[0]
        if len(args) >= 2 and isinstance(args[1], dict):
            source_config = args[1]
        
        # –û–±–æ–≥–∞—â–∞–µ–º –µ—Å–ª–∏ –Ω–∞—à–ª–∏ signal_data
        if signal_data:
            enhanced_signal = await safe_enhance_signal(signal_data, source_config)
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞ –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            args = (enhanced_signal,) + args[1:]
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if asyncio.iscoroutinefunction(func):
            return await func(*args, **kwargs)
        else:
            return func(*args, **kwargs)
    
    return wrapper

if __name__ == "__main__":
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
    async def test_integrator():
        print("üß™ TESTING SAFE NEWS INTEGRATOR")
        print("=" * 50)
        
        # –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
        os.environ['GHOST_NEWS_INTEGRATION_ENABLED'] = 'true'
        
        integrator = SafeNewsIntegrator()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        test_signal = {
            'symbol': 'BTCUSDT',
            'side': 'LONG',
            'entry': 45000,
            'targets': [46000, 47000],
            'stop_loss': 44000,
            'confidence': 0.8
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
        enhanced = await integrator.enhance_signal_safely(test_signal, {})
        
        print(f"Original signal keys: {list(test_signal.keys())}")
        print(f"Enhanced signal keys: {list(enhanced.keys())}")
        
        if 'news_enhancement' in enhanced:
            print(f"News enhancement added: ‚úÖ")
            print(f"Enhancement summary: {enhanced['news_enhancement']['summary']}")
        else:
            print(f"News enhancement: ‚ùå")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        test_news = {
            'title': '–§–†–° —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç–∞–≤–∫—É –Ω–∞ 25 –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤',
            'content': '–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—ä—è–≤–∏–ª–∞ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏',
            'source': 'reuters'
        }
        
        filtered = integrator.filter_news_safely(test_news)
        print(f"News filtering result: {'‚úÖ Important' if filtered else '‚ùå Filtered out'}")
        
        # –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        status = integrator.get_integration_status()
        print(f"Integration status: {status}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_integrator())
