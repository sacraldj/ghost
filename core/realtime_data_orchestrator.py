#!/usr/bin/env python3
"""
üöÄ GHOST Real-Time Data Orchestrator
–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
"""

import asyncio
import logging
import os
import sys
import json
import time
from datetime import datetime, timezone
from typing import Dict, List, Optional
from concurrent.futures import ThreadPoolExecutor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '.env'))

try:
    from supabase import create_client, Client
    import aiohttp
    import requests
except ImportError as e:
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install supabase aiohttp requests")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('../logs/realtime_orchestrator.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('RealtimeOrchestrator')

class RealtimeDataOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self):
        # Supabase
        self.supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
        self.supabase = create_client(self.supabase_url, self.supabase_key)
        
        # API –∫–ª—é—á–∏
        self.binance_api = "https://fapi.binance.com/fapi/v1"
        self.coinapi_key = os.getenv('COINAPI_KEY', '')
        self.news_api_key = os.getenv('NEWS_API_KEY', '')
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.symbols = [
            'BTCUSDT', 'ETHUSDT', 'ORDIUSDT', 'SOLUSDT', 'ADAUSDT',
            'DOGEUSDT', 'BNBUSDT', 'XRPUSDT', 'AVAXUSDT', 'LINKUSDT'
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'updates_total': 0,
            'market_updates': 0,
            'news_updates': 0,
            'signals_processed': 0,
            'errors': 0,
            'last_update': None
        }
        
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        self.cache = {
            'market_data': {},
            'news_data': [],
            'signals_data': []
        }
    
    async def start_realtime_updates(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs('../logs', exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks = [
            asyncio.create_task(self._market_data_loop()),
            asyncio.create_task(self._news_data_loop()),
            asyncio.create_task(self._signals_processing_loop()),
            asyncio.create_task(self._analytics_loop()),
            asyncio.create_task(self._stats_logger_loop())
        ]
        
        try:
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    async def _market_data_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
        logger.info("üìä –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        while True:
            try:
                start_time = time.time()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                tasks = [self._update_market_data(symbol) for symbol in self.symbols]
                results = await asyncio.gather(*tasks, return_exceptions=True)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                successful = sum(1 for r in results if not isinstance(r, Exception))
                self.stats['market_updates'] += successful
                
                execution_time = time.time() - start_time
                logger.info(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–æ {successful}/{len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {execution_time:.2f}—Å")
                
                # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(30)
    
    async def _update_market_data(self, symbol: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance
                ticker_url = f"{self.binance_api}/ticker/24hr?symbol={symbol}"
                klines_url = f"{self.binance_api}/klines?symbol={symbol}&interval=1m&limit=100"
                
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                ticker_task = session.get(ticker_url)
                klines_task = session.get(klines_url)
                
                ticker_resp, klines_resp = await asyncio.gather(ticker_task, klines_task)
                
                if ticker_resp.status == 200 and klines_resp.status == 200:
                    ticker_data = await ticker_resp.json()
                    klines_data = await klines_resp.json()
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    market_snapshot = await self._calculate_technical_indicators(symbol, ticker_data, klines_data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
                    result = self.supabase.table('market_snapshots').insert([market_snapshot]).execute()
                    
                    if result.data:
                        self.cache['market_data'][symbol] = market_snapshot
                        return True
                
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {symbol}: {e}")
            return False
    
    async def _calculate_technical_indicators(self, symbol: str, ticker_data: dict, klines_data: list) -> dict:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            closes = [float(kline[4]) for kline in klines_data]
            volumes = [float(kline[5]) for kline in klines_data]
            
            current_price = float(ticker_data['lastPrice'])
            volume_24h = float(ticker_data['volume'])
            price_change_24h = float(ticker_data['priceChangePercent'])
            
            # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            sma_20 = sum(closes[-20:]) / 20 if len(closes) >= 20 else current_price
            sma_50 = sum(closes[-50:]) / 50 if len(closes) >= 50 else current_price
            
            # RSI —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π
            rsi_14 = await self._calculate_rsi(closes, 14)
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility_24h = abs(price_change_24h) / 100
            
            return {
                'symbol': symbol,
                'snapshot_timestamp': datetime.now(timezone.utc).isoformat(),
                'current_price': current_price,
                'open_price': float(ticker_data['openPrice']),
                'high_price': float(ticker_data['highPrice']),
                'low_price': float(ticker_data['lowPrice']),
                'close_price': current_price,
                'volume_24h': volume_24h,
                'volatility_24h': volatility_24h,
                'rsi_14': rsi_14,
                'sma_20': sma_20,
                'sma_50': sma_50,
                'price_change_24h': price_change_24h
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
            return {
                'symbol': symbol,
                'snapshot_timestamp': datetime.now(timezone.utc).isoformat(),
                'current_price': float(ticker_data.get('lastPrice', 0))
            }
    
    async def _calculate_rsi(self, prices: list, period: int = 14) -> float:
        """–†–∞—Å—á–µ—Ç RSI"""
        try:
            if len(prices) < period + 1:
                return 50.0
            
            deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
            gains = [d if d > 0 else 0 for d in deltas]
            losses = [-d if d < 0 else 0 for d in deltas]
            
            avg_gain = sum(gains[-period:]) / period
            avg_loss = sum(losses[-period:]) / period
            
            if avg_loss == 0:
                return 100.0
            
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
            
            return round(rsi, 2)
            
        except:
            return 50.0
    
    async def _news_data_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã"""
        logger.info("üì∞ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        while True:
            try:
                start_time = time.time()
                
                # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                news_sources = [
                    self._fetch_crypto_news(),
                    self._fetch_market_alerts(),
                    self._generate_price_alerts()
                ]
                
                results = await asyncio.gather(*news_sources, return_exceptions=True)
                
                total_news = 0
                for result in results:
                    if isinstance(result, list):
                        total_news += len(result)
                
                self.stats['news_updates'] += total_news
                
                execution_time = time.time() - start_time
                logger.info(f"üì∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_news} –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {execution_time:.2f}—Å")
                
                # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã
                await asyncio.sleep(120)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(120)
    
    async def _fetch_crypto_news(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            news_items = []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            for symbol in self.symbols[:5]:  # –¢–æ–ø 5 —Å–∏–º–≤–æ–ª–æ–≤
                if symbol in self.cache['market_data']:
                    market_data = self.cache['market_data'][symbol]
                    price_change = market_data.get('price_change_24h', 0)
                    
                    if abs(price_change) > 5:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                        emoji = "üìà" if price_change > 0 else "üìâ"
                        direction = "—Ä–∞—Å—Ç–µ—Ç" if price_change > 0 else "–ø–∞–¥–∞–µ—Ç"
                        
                        news_item = {
                            'title': f'{emoji} {symbol.replace("USDT", "")} {direction} –Ω–∞ {abs(price_change):.2f}%',
                            'content': f'–¶–µ–Ω–∞ {symbol} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ: {price_change:+.2f}% –∑–∞ 24 —á–∞—Å–∞. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${market_data.get("current_price", 0)}',
                            'source_name': 'GHOST Price Monitor',
                            'url': f'https://binance.com/en/futures/{symbol}',
                            'published_at': datetime.now(timezone.utc).isoformat(),
                            'category': 'price_alert',
                            'impact_score': min(abs(price_change) / 10, 1.0),
                            'is_critical': abs(price_change) > 10
                        }
                        
                        news_items.append(news_item)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
            if news_items:
                result = self.supabase.table('critical_news').insert(news_items).execute()
                if result.data:
                    logger.info(f"üì∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            return news_items
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
    
    async def _fetch_market_alerts(self) -> list:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            alerts = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ RSI
            for symbol, data in self.cache['market_data'].items():
                rsi = data.get('rsi_14', 50)
                
                if rsi > 80:
                    alerts.append({
                        'title': f'‚ö†Ô∏è {symbol}: –ó–æ–Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (RSI: {rsi})',
                        'content': f'{symbol} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏. RSI: {rsi}. –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è.',
                        'source_name': 'GHOST Technical Analysis',
                        'category': 'technical_alert',
                        'published_at': datetime.now(timezone.utc).isoformat(),
                        'impact_score': 0.7,
                        'is_critical': False
                    })
                elif rsi < 20:
                    alerts.append({
                        'title': f'‚ö†Ô∏è {symbol}: –ó–æ–Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (RSI: {rsi})',
                        'content': f'{symbol} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏. RSI: {rsi}. –í–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫.',
                        'source_name': 'GHOST Technical Analysis',
                        'category': 'technical_alert',
                        'published_at': datetime.now(timezone.utc).isoformat(),
                        'impact_score': 0.7,
                        'is_critical': False
                    })
            
            if alerts:
                result = self.supabase.table('critical_news').insert(alerts).execute()
                if result.data:
                    logger.info(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ {len(alerts)} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤")
            
            return alerts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    async def _generate_price_alerts(self) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Ü–µ–Ω"""
        try:
            alerts = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            for symbol, data in self.cache['market_data'].items():
                volatility = data.get('volatility_24h', 0)
                
                if volatility > 0.15:  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å > 15%
                    alerts.append({
                        'title': f'üå™Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {symbol}: {volatility*100:.1f}%',
                        'content': f'{symbol} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {volatility*100:.1f}% –∑–∞ 24 —á–∞—Å–∞. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏.',
                        'source_name': 'GHOST Volatility Monitor',
                        'category': 'volatility_alert',
                        'published_at': datetime.now(timezone.utc).isoformat(),
                        'impact_score': min(volatility * 2, 1.0),
                        'is_critical': volatility > 0.25
                    })
            
            if alerts:
                result = self.supabase.table('critical_news').insert(alerts).execute()
                if result.data:
                    logger.info(f"üå™Ô∏è –°–æ–∑–¥–∞–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
            
            return alerts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    async def _signals_processing_loop(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
        logger.info("üì° –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                recent_signals = self.supabase.table('signals_parsed').select('*').gte('posted_at', 
                    datetime.now(timezone.utc).replace(minute=datetime.now().minute-5).isoformat()
                ).execute()
                
                if recent_signals.data:
                    logger.info(f"üì° –ù–∞–π–¥–µ–Ω–æ {len(recent_signals.data)} –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                    self.stats['signals_processed'] += len(recent_signals.data)
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–∫–∏ —Ä—ã–Ω–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    for signal in recent_signals.data:
                        symbol = signal.get('symbol')
                        if symbol and symbol in self.cache['market_data']:
                            market_data = self.cache['market_data'][symbol].copy()
                            market_data['signal_id'] = signal.get('signal_id')
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫
                            self.supabase.table('market_snapshots').insert([market_data]).execute()
                
                await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(60)
    
    async def _analytics_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
        logger.info("üìä –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        
        while True:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                sources = self.supabase.table('signal_sources').select('*').execute()
                
                for source in sources.data:
                    source_id = source.get('source_id')
                    if source_id:
                        await self._update_source_performance(source_id)
                
                logger.info("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
                await asyncio.sleep(300)
    
    async def _update_source_performance(self, source_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            trades = self.supabase.table('trades').select('*').eq('trader_id', source_id).gte(
                'created_at', datetime.now(timezone.utc).replace(hour=datetime.now().hour-24).isoformat()
            ).execute()
            
            if trades.data:
                total_trades = len(trades.data)
                winning_trades = len([t for t in trades.data if t.get('pnl', 0) > 0])
                win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                performance_data = {
                    'entity_type': 'SIGNAL_SOURCE',
                    'entity_id': source_id,
                    'analysis_period_start': datetime.now(timezone.utc).replace(hour=datetime.now().hour-24).isoformat(),
                    'analysis_period_end': datetime.now(timezone.utc).isoformat(),
                    'total_trades': total_trades,
                    'winning_trades': winning_trades,
                    'win_rate': win_rate
                }
                
                self.supabase.table('performance_analytics').insert([performance_data]).execute()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {source_id}: {e}")
    
    async def _stats_logger_loop(self):
        """–¶–∏–∫–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
        while True:
            try:
                self.stats['last_update'] = datetime.now(timezone.utc).isoformat()
                self.stats['updates_total'] = self.stats['market_updates'] + self.stats['news_updates']
                
                logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.stats['updates_total']}, "
                           f"–†—ã–Ω–æ–∫: {self.stats['market_updates']}, "
                           f"–ù–æ–≤–æ—Å—Ç–∏: {self.stats['news_updates']}, "
                           f"–°–∏–≥–Ω–∞–ª—ã: {self.stats['signals_processed']}, "
                           f"–û—à–∏–±–∫–∏: {self.stats['errors']}")
                
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await asyncio.sleep(30)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ GHOST Real-Time Data Orchestrator")
    
    orchestrator = RealtimeDataOrchestrator()
    await orchestrator.start_realtime_updates()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
