#!/usr/bin/env python3
"""
GHOST News Signal Enhancer
–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
–ù–ï –ò–ó–ú–ï–ù–Ø–ï–¢ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É - —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
"""

import os
import sys
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
try:
    from ai_news_analyzer import analyze_news_with_ai, filter_and_cluster_news
    from context_enricher import enrich_news_context, get_market_data
    from reaction_predictor import predict_news_reaction
    NEWS_MODULES_AVAILABLE = True
except ImportError as e:
    logging.warning(f"News modules not available: {e}")
    NEWS_MODULES_AVAILABLE = False

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class NewsContext:
    """–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
    has_recent_news: bool = False
    news_count: int = 0
    sentiment_score: float = 0.0  # -1 to 1
    urgency_score: float = 0.0    # 0 to 1
    market_impact: float = 0.0    # 0 to 1
    key_events: List[str] = None
    confidence_modifier: float = 1.0  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è confidence
    entry_modifier: float = 1.0      # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è entry timing
    risk_modifier: float = 1.0       # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è risk management

    def __post_init__(self):
        if self.key_events is None:
            self.key_events = []

class NewsSignalEnhancer:
    """
    –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    –ù–µ –∏–∑–º–µ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    
    def __init__(self, enabled: bool = True):
        self.enabled = enabled
        self.news_available = NEWS_MODULES_AVAILABLE
        
        if not self.news_available:
            logger.warning("‚ö†Ô∏è News modules not available - enhancer will work in minimal mode")
        
        logger.info(f"üì∞ News Signal Enhancer initialized (enabled: {enabled}, news_modules: {self.news_available})")
    
    async def enhance_signal_context(self, signal_data: Dict, source_config: Dict) -> NewsContext:
        """
        –û–±–æ–≥–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        –ù–ï –ò–ó–ú–ï–ù–Ø–ï–¢ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª - —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        """
        if not self.enabled:
            return NewsContext()
        
        try:
            symbol = signal_data.get('symbol', 'BTCUSDT')
            logger.info(f"üì∞ Enhancing signal context for {symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            news_context = await self._get_news_context(symbol)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
            trading_impact = self._analyze_trading_impact(news_context, signal_data)
            
            # –°–æ–∑–¥–∞—ë–º –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = NewsContext(
                has_recent_news=news_context.get('has_news', False),
                news_count=news_context.get('count', 0),
                sentiment_score=news_context.get('sentiment', 0.0),
                urgency_score=news_context.get('urgency', 0.0),
                market_impact=news_context.get('market_impact', 0.0),
                key_events=news_context.get('key_events', []),
                confidence_modifier=trading_impact.get('confidence_modifier', 1.0),
                entry_modifier=trading_impact.get('entry_modifier', 1.0),
                risk_modifier=trading_impact.get('risk_modifier', 1.0)
            )
            
            logger.info(f"‚úÖ News context enhanced: sentiment={context.sentiment_score:.2f}, impact={context.market_impact:.2f}")
            return context
            
        except Exception as e:
            logger.error(f"‚ùå Error enhancing signal context: {e}")
            return NewsContext()
    
    async def _get_news_context(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not self.news_available:
            return {'has_news': False, 'count': 0}
        
        try:
            # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞
            recent_news = await self._fetch_recent_news(symbol, hours=4)
            
            if not recent_news:
                return {'has_news': False, 'count': 0}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            sentiment_scores = []
            urgency_scores = []
            impact_scores = []
            key_events = []
            
            for news in recent_news:
                # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                analysis = self._basic_news_analysis(news)
                
                sentiment_scores.append(analysis['sentiment'])
                urgency_scores.append(analysis['urgency'])
                impact_scores.append(analysis['impact'])
                
                if analysis['is_important']:
                    key_events.append(news.get('title', '')[:100])
            
            return {
                'has_news': True,
                'count': len(recent_news),
                'sentiment': sum(sentiment_scores) / len(sentiment_scores) if sentiment_scores else 0.0,
                'urgency': max(urgency_scores) if urgency_scores else 0.0,
                'market_impact': max(impact_scores) if impact_scores else 0.0,
                'key_events': key_events[:3]  # –¢–æ–ø 3 —Å–æ–±—ã—Ç–∏—è
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting news context: {e}")
            return {'has_news': False, 'count': 0}
    
    async def _fetch_recent_news(self, symbol: str, hours: int = 4) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []
    
    def _basic_news_analysis(self, news: Dict) -> Dict:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ AI"""
        title = news.get('title', '').lower()
        content = news.get('content', '').lower()
        text = f"{title} {content}"
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è sentiment
        bullish_keywords = ['—Ä–æ—Å—Ç', '–ø–æ–∫—É–ø–∫–∞', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–æ–¥–æ–±—Ä–µ–Ω–∏–µ', '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ', '–ª–∏—Å—Ç–∏–Ω–≥']
        bearish_keywords = ['–ø–∞–¥–µ–Ω–∏–µ', '–ø—Ä–æ–¥–∞–∂–∞', '–∑–∞–ø—Ä–µ—Ç', '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', '–≤–∑–ª–æ–º', '—Å–∫–∞–º']
        urgent_keywords = ['—Å—Ä–æ—á–Ω–æ', 'breaking', '—Å–µ–π—á–∞—Å', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ']
        
        # –ü–æ–¥—Å—á—ë—Ç sentiment
        bullish_count = sum(1 for word in bullish_keywords if word in text)
        bearish_count = sum(1 for word in bearish_keywords if word in text)
        
        if bullish_count > bearish_count:
            sentiment = 0.3 + (bullish_count * 0.2)
        elif bearish_count > bullish_count:
            sentiment = -0.3 - (bearish_count * 0.2)
        else:
            sentiment = 0.0
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        sentiment = max(-1.0, min(1.0, sentiment))
        
        # Urgency
        urgency = min(1.0, sum(1 for word in urgent_keywords if word in text) * 0.3)
        
        # Impact (–±–∞–∑–æ–≤—ã–π)
        impact = min(1.0, (abs(sentiment) + urgency) / 2)
        
        return {
            'sentiment': sentiment,
            'urgency': urgency,
            'impact': impact,
            'is_important': impact > 0.5
        }
    
    def _analyze_trading_impact(self, news_context: Dict, signal_data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é"""
        if not news_context.get('has_news'):
            return {'confidence_modifier': 1.0, 'entry_modifier': 1.0, 'risk_modifier': 1.0}
        
        sentiment = news_context.get('sentiment', 0.0)
        urgency = news_context.get('urgency', 0.0)
        impact = news_context.get('market_impact', 0.0)
        signal_side = signal_data.get('side', 'LONG')
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä confidence
        confidence_modifier = 1.0
        if signal_side == 'LONG' and sentiment > 0.3:
            confidence_modifier = 1.0 + (sentiment * 0.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence –¥–ª—è LONG –ø—Ä–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö
        elif signal_side == 'SHORT' and sentiment < -0.3:
            confidence_modifier = 1.0 + (abs(sentiment) * 0.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence –¥–ª—è SHORT –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö
        elif (signal_side == 'LONG' and sentiment < -0.3) or (signal_side == 'SHORT' and sentiment > 0.3):
            confidence_modifier = 1.0 - (abs(sentiment) * 0.1)  # –°–Ω–∏–∂–∞–µ–º confidence –ø—Ä–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—â–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä entry timing
        entry_modifier = 1.0
        if urgency > 0.7:
            entry_modifier = 0.7  # –£—Å–∫–æ—Ä—è–µ–º –≤—Ö–æ–¥ –ø—Ä–∏ —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö
        elif impact > 0.8:
            entry_modifier = 0.8  # –£—Å–∫–æ—Ä—è–µ–º –≤—Ö–æ–¥ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –≤–ª–∏—è–Ω–∏–∏
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä risk
        risk_modifier = 1.0
        if impact > 0.7:
            risk_modifier = 1.2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –≤–ª–∏—è–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        
        return {
            'confidence_modifier': max(0.5, min(1.5, confidence_modifier)),
            'entry_modifier': max(0.5, min(1.5, entry_modifier)),
            'risk_modifier': max(0.8, min(1.5, risk_modifier))
        }
    
    def get_enhancement_summary(self, context: NewsContext) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è"""
        if not context.has_recent_news:
            return "üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç"
        
        sentiment_emoji = "üìà" if context.sentiment_score > 0.1 else "üìâ" if context.sentiment_score < -0.1 else "‚û°Ô∏è"
        urgency_emoji = "üö®" if context.urgency_score > 0.7 else "‚è∞" if context.urgency_score > 0.3 else "üïê"
        
        return f"{sentiment_emoji} –ù–æ–≤–æ—Å—Ç–∏: {context.news_count} | Sentiment: {context.sentiment_score:.2f} | {urgency_emoji} Urgency: {context.urgency_score:.2f}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
_news_enhancer: Optional[NewsSignalEnhancer] = None

def get_news_enhancer() -> NewsSignalEnhancer:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ news enhancer"""
    global _news_enhancer
    if _news_enhancer is None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        enabled = os.getenv('NEWS_ENHANCEMENT_ENABLED', 'true').lower() == 'true'
        _news_enhancer = NewsSignalEnhancer(enabled=enabled)
    return _news_enhancer

# Utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def enhance_signal_with_news(signal_data: Dict, source_config: Dict) -> Dict:
    """
    –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª + news_context
    """
    enhancer = get_news_enhancer()
    news_context = await enhancer.enhance_signal_context(signal_data, source_config)
    
    # –ù–ï –ò–ó–ú–ï–ù–Ø–ï–ú –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
    enhanced_signal = signal_data.copy()
    enhanced_signal['news_context'] = asdict(news_context)
    enhanced_signal['news_enhancement_summary'] = enhancer.get_enhancement_summary(news_context)
    
    return enhanced_signal

if __name__ == "__main__":
    # –¢–µ—Å—Ç –º–æ–¥—É–ª—è
    async def test():
        enhancer = NewsSignalEnhancer(enabled=True)
        
        test_signal = {
            'symbol': 'BTCUSDT',
            'side': 'LONG',
            'entry': 45000,
            'targets': [46000, 47000],
            'stop_loss': 44000
        }
        
        context = await enhancer.enhance_signal_context(test_signal, {})
        print(f"News context: {context}")
        print(f"Summary: {enhancer.get_enhancement_summary(context)}")
    
    asyncio.run(test())
