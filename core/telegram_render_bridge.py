"""
Telegram ‚Üí Render ‚Üí Supabase ‚Üí Vercel Bridge
–°—É–ø–µ—Ä —Ç–æ—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import logging
import json
import os
import sys
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
import aiohttp
import time

# Telegram imports
try:
    from telethon import TelegramClient, events
    from telethon.errors import FloodWaitError
except ImportError:
    print("‚ùå Telethon not installed. Run: pip install telethon")
    sys.exit(1)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞—Ä—Å–µ—Ä–∞–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'telegram_parsers'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã
try:
    from cryptoattack24_parser import CryptoAttack24Parser
except ImportError:
    print("‚ö†Ô∏è CryptoAttack24Parser not found, using basic parser")
    CryptoAttack24Parser = None

logger = logging.getLogger(__name__)

@dataclass
class TelegramMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ telegram —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_id: int
    chat_id: int
    chat_title: str
    text: str
    date: datetime
    sender_id: Optional[int] = None
    forward_from: Optional[str] = None
    media_type: Optional[str] = None
    raw_data: Optional[Dict] = None

@dataclass
class ProcessedSignal:
    """–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª"""
    source: str
    trader_id: str
    symbol: str
    signal_type: str
    confidence: float
    raw_text: str
    processed_at: datetime
    metadata: Dict[str, Any]

class TelegramRenderBridge:
    """–ú–æ—Å—Ç Telegram ‚Üí Render –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, config_path: str = "config/telegram_channels.json"):
        self.config_path = config_path
        self.client = None
        self.channels = []
        self.parsers = {}
        self.render_webhook_url = os.getenv('RENDER_WEBHOOK_URL')
        self.supabase_url = os.getenv('SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_ANON_KEY')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_received': 0,
            'signals_parsed': 0,
            'signals_sent': 0,
            'errors': 0,
            'start_time': datetime.now()
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._load_config()
        self._init_parsers()

    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                self.channels = [ch for ch in config.get('channels', []) if ch.get('is_active', False)]
                logger.info(f"Loaded {len(self.channels)} active channels")
        except Exception as e:
            logger.error(f"Error loading config: {e}")
            self.channels = []

    def _init_parsers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤"""
        # CryptoAttack24 –ø–∞—Ä—Å–µ—Ä
        if CryptoAttack24Parser:
            self.parsers['cryptoattack24_v1'] = CryptoAttack24Parser()
            logger.info("‚úÖ CryptoAttack24 parser initialized")
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä—Å–µ—Ä—ã
        logger.info(f"Initialized {len(self.parsers)} parsers")

    async def init_telegram_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            api_id = os.getenv('TELEGRAM_API_ID')
            api_hash = os.getenv('TELEGRAM_API_HASH')
            
            if not api_id or not api_hash:
                raise ValueError("TELEGRAM_API_ID and TELEGRAM_API_HASH must be set")
            
            self.client = TelegramClient('ghost_session', int(api_id), api_hash)
            await self.client.start()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            me = await self.client.get_me()
            logger.info(f"‚úÖ Telegram client authorized as: {me.first_name}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Telegram client: {e}")
            return False

    async def setup_message_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.client:
            logger.error("Telegram client not initialized")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–æ–≤
        channel_entities = []
        for channel_config in self.channels:
            try:
                if channel_config.get('channel_id'):
                    entity = await self.client.get_entity(int(channel_config['channel_id']))
                    channel_entities.append(entity)
                    logger.info(f"‚úÖ Connected to channel: {channel_config['channel_name']}")
                else:
                    logger.warning(f"‚ö†Ô∏è No channel_id for: {channel_config['channel_name']}")
            except Exception as e:
                logger.error(f"‚ùå Failed to connect to {channel_config['channel_name']}: {e}")
        
        if not channel_entities:
            logger.error("‚ùå No channels connected!")
            return
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.client.on(events.NewMessage(chats=channel_entities))
        async def handle_new_message(event):
            await self._process_telegram_message(event)
        
        logger.info(f"‚úÖ Message handlers set up for {len(channel_entities)} channels")

    async def _process_telegram_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram"""
        try:
            self.stats['messages_received'] += 1
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = TelegramMessage(
                message_id=event.message.id,
                chat_id=event.chat_id,
                chat_title=getattr(event.chat, 'title', 'Unknown'),
                text=event.message.text or '',
                date=event.message.date,
                sender_id=event.sender_id,
                raw_data=event.message.to_dict()
            )
            
            logger.info(f"üì® New message from {message.chat_title}: {message.text[:50]}...")
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞
            channel_config = self._find_channel_config(message.chat_id)
            if not channel_config:
                logger.debug(f"No config found for chat_id: {message.chat_id}")
                return
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            signals = await self._parse_message(message, channel_config)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            for signal in signals:
                await self._send_to_render(signal)
                await self._save_to_supabase(signal)
                self.stats['signals_sent'] += 1
            
        except Exception as e:
            self.stats['errors'] += 1
            logger.error(f"Error processing message: {e}")

    def _find_channel_config(self, chat_id: int) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ –ø–æ chat_id"""
        chat_id_str = str(chat_id)
        for config in self.channels:
            if config.get('channel_id') == chat_id_str:
                return config
        return None

    async def _parse_message(self, message: TelegramMessage, channel_config: Dict) -> List[ProcessedSignal]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        signals = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞
            parsing_profile = channel_config.get('parsing_profile', 'default')
            parser = self.parsers.get(parsing_profile)
            
            if not parser:
                logger.warning(f"No parser found for profile: {parsing_profile}")
                return signals
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if hasattr(parser, 'parse_message'):
                result = parser.parse_message(message.text, message.date)
                
                if result:
                    signal = ProcessedSignal(
                        source=f"telegram:{channel_config['trader_id']}",
                        trader_id=channel_config['trader_id'],
                        symbol=result.symbol,
                        signal_type=result.action,
                        confidence=result.confidence,
                        raw_text=message.text,
                        processed_at=datetime.now(),
                        metadata={
                            'chat_id': message.chat_id,
                            'chat_title': message.chat_title,
                            'message_id': message.message_id,
                            'price_movement': getattr(result, 'price_movement', None),
                            'exchange': getattr(result, 'exchange', None),
                            'sector': getattr(result, 'sector', None),
                            'parsing_profile': parsing_profile
                        }
                    )
                    signals.append(signal)
                    self.stats['signals_parsed'] += 1
                    logger.info(f"‚úÖ Parsed signal: {signal.symbol} {signal.signal_type} (confidence: {signal.confidence:.2f})")
            
        except Exception as e:
            logger.error(f"Error parsing message: {e}")
        
        return signals

    async def _send_to_render(self, signal: ProcessedSignal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ Render webhook"""
        if not self.render_webhook_url:
            logger.debug("No Render webhook URL configured")
            return
        
        try:
            payload = {
                'type': 'telegram_signal',
                'timestamp': signal.processed_at.isoformat(),
                'data': asdict(signal)
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.render_webhook_url,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        logger.debug(f"‚úÖ Signal sent to Render: {signal.symbol}")
                    else:
                        logger.error(f"‚ùå Render webhook error: {response.status}")
                        
        except Exception as e:
            logger.error(f"Error sending to Render: {e}")

    async def _save_to_supabase(self, signal: ProcessedSignal):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ Supabase"""
        if not self.supabase_url or not self.supabase_key:
            logger.debug("No Supabase credentials configured")
            return
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            signal_data = {
                'id': f"{signal.trader_id}_{int(time.time() * 1000)}",
                'received_at': int(signal.processed_at.timestamp() * 1000),
                'source_name': signal.trader_id,
                'raw_text': signal.raw_text,
                'symbol_raw': signal.symbol,
                'symbol': signal.symbol,
                'side': 'Buy',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'entry_low': 0.0,
                'entry_high': 0.0,
                'targets_json': '[]',
                'stoploss': 0.0,
                'parse_version': '1.0',
                'parsed_ok': 1 if signal.confidence > 0.7 else 0
            }
            
            headers = {
                'apikey': self.supabase_key,
                'Authorization': f'Bearer {self.supabase_key}',
                'Content-Type': 'application/json'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.supabase_url}/rest/v1/signals",
                    json=signal_data,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status in [200, 201]:
                        logger.debug(f"‚úÖ Signal saved to Supabase: {signal.symbol}")
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå Supabase error: {response.status} - {error_text}")
                        
        except Exception as e:
            logger.error(f"Error saving to Supabase: {e}")

    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info("üöÄ Starting Telegram ‚Üí Render ‚Üí Supabase bridge...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        if not await self.init_telegram_client():
            return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        await self.setup_message_handlers()
        
        # –ó–∞–ø—É—Å–∫
        logger.info("‚úÖ Bridge is running! Listening for messages...")
        await self.client.run_until_disconnected()

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        uptime = datetime.now() - self.stats['start_time']
        return {
            **self.stats,
            'uptime_seconds': int(uptime.total_seconds()),
            'channels_count': len(self.channels),
            'parsers_count': len(self.parsers)
        }

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Å—Ç–∞"""
        if self.client:
            await self.client.disconnect()
        logger.info("üõë Bridge stopped")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH']
    missing = [var for var in required_env if not os.getenv(var)]
    
    if missing:
        logger.error(f"‚ùå Missing environment variables: {', '.join(missing)}")
        logger.info("Please set them in your .env file:")
        for var in missing:
            logger.info(f"  {var}=your_value_here")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ—Å—Ç
    bridge = TelegramRenderBridge()
    
    try:
        await bridge.start_listening()
    except KeyboardInterrupt:
        logger.info("üëã Shutting down...")
        await bridge.stop()
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")
        await bridge.stop()

if __name__ == "__main__":
    asyncio.run(main())
