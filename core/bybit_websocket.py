"""
Bybit WebSocket Client –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 1-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import websockets
import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Optional, Callable
from dataclasses import dataclass
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class CandleData:
    """–î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏"""
    symbol: str
    timestamp: int  # unix timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    open: float
    high: float
    low: float
    close: float
    volume: float
    quote_volume: float = 0.0

class BybitWebSocketClient:
    """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è Bybit API"""
    
    def __init__(self):
        # Bybit WebSocket URLs
        self.ws_url_public = "wss://stream.bybit.com/v5/public/linear"
        self.ws_url_private = "wss://stream.bybit.com/v5/private"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∏
        self.connections: Dict[str, websockets.WebSocketServerProtocol] = {}
        self.subscriptions: Dict[str, List[str]] = {}  # symbol -> [callbacks]
        self.active_symbols: set = set()
        
        # Callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self.candle_callbacks: List[Callable[[CandleData], None]] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_candles': 0,
            'symbols_tracked': 0,
            'last_candle_time': None,
            'start_time': time.time()
        }
        
        logger.info("BybitWebSocketClient initialized")
    
    def add_candle_callback(self, callback: Callable[[CandleData], None]):
        """–î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–µ–π"""
        self.candle_callbacks.append(callback)
        logger.info(f"Added candle callback: {callback.__name__}")
    
    async def subscribe_to_klines(self, symbol: str, interval: str = "1"):
        """
        –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π (klines) –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        interval: 1, 3, 5, 15, 30, 60, 120, 240, 360, 720, D, M, W
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º topic –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            topic = f"kline.{interval}.{symbol}"
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
            if symbol not in self.connections:
                ws = await websockets.connect(self.ws_url_public)
                self.connections[symbol] = ws
                logger.info(f"‚úÖ Connected to Bybit WebSocket for {symbol}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
                asyncio.create_task(self._handle_messages(symbol, ws))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
            subscribe_msg = {
                "op": "subscribe",
                "args": [topic]
            }
            
            await self.connections[symbol].send(json.dumps(subscribe_msg))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            if symbol not in self.subscriptions:
                self.subscriptions[symbol] = []
            self.subscriptions[symbol].append(topic)
            self.active_symbols.add(symbol)
            
            logger.info(f"‚úÖ Subscribed to {topic}")
            self.stats['symbols_tracked'] = len(self.active_symbols)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error subscribing to {symbol}: {e}")
            return False
    
    async def unsubscribe_from_klines(self, symbol: str, interval: str = "1"):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            topic = f"kline.{interval}.{symbol}"
            
            if symbol in self.connections and symbol in self.subscriptions:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø–∏—Å–∫—É
                unsubscribe_msg = {
                    "op": "unsubscribe", 
                    "args": [topic]
                }
                
                await self.connections[symbol].send(json.dumps(unsubscribe_msg))
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
                if topic in self.subscriptions[symbol]:
                    self.subscriptions[symbol].remove(topic)
                
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Å–∏–º–≤–æ–ª–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if not self.subscriptions[symbol]:
                    await self.connections[symbol].close()
                    del self.connections[symbol]
                    del self.subscriptions[symbol]
                    self.active_symbols.discard(symbol)
                
                logger.info(f"‚úÖ Unsubscribed from {topic}")
                self.stats['symbols_tracked'] = len(self.active_symbols)
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error unsubscribing from {symbol}: {e}")
            return False
    
    async def _handle_messages(self, symbol: str, websocket):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            async for message in websocket:
                try:
                    data = json.loads(message)
                    await self._process_message(symbol, data)
                    
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå JSON decode error for {symbol}: {e}")
                except Exception as e:
                    logger.error(f"‚ùå Error processing message for {symbol}: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            logger.warning(f"‚ö†Ô∏è WebSocket connection closed for {symbol}")
        except Exception as e:
            logger.error(f"‚ùå WebSocket error for {symbol}: {e}")
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if symbol in self.connections:
                del self.connections[symbol]
            if symbol in self.subscriptions:
                del self.subscriptions[symbol]
            self.active_symbols.discard(symbol)
    
    async def _process_message(self, symbol: str, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if data.get("topic", "").startswith("kline"):
                # –≠—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
                kline_data = data.get("data", [])
                
                for kline in kline_data:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
                    candle = CandleData(
                        symbol=kline.get("symbol", symbol),
                        timestamp=int(kline.get("start", 0)) // 1000,  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
                        open=float(kline.get("open", 0)),
                        high=float(kline.get("high", 0)),
                        low=float(kline.get("low", 0)),
                        close=float(kline.get("close", 0)),
                        volume=float(kline.get("volume", 0)),
                        quote_volume=float(kline.get("turnover", 0))
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.stats['total_candles'] += 1
                    self.stats['last_candle_time'] = datetime.fromtimestamp(candle.timestamp)
                    
                    # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ callbacks
                    for callback in self.candle_callbacks:
                        try:
                            await callback(candle) if asyncio.iscoroutinefunction(callback) else callback(candle)
                        except Exception as e:
                            logger.error(f"‚ùå Error in candle callback {callback.__name__}: {e}")
                    
                    logger.debug(f"üìä New candle: {symbol} @ {candle.close} (vol: {candle.volume})")
            
            elif "success" in data:
                # –û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É/–æ—Ç–ø–∏—Å–∫—É
                if data["success"]:
                    logger.debug(f"‚úÖ Operation successful for {symbol}: {data}")
                else:
                    logger.error(f"‚ùå Operation failed for {symbol}: {data}")
            
        except Exception as e:
            logger.error(f"‚ùå Error processing message: {e}")
    
    async def get_symbol_info(self, symbol: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ —á–µ—Ä–µ–∑ REST API"""
        try:
            import aiohttp
            
            url = "https://api.bybit.com/v5/market/instruments-info"
            params = {
                "category": "linear",
                "symbol": symbol
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("retCode") == 0:
                            instruments = data.get("result", {}).get("list", [])
                            if instruments:
                                return instruments[0]
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error getting symbol info for {symbol}: {e}")
            return None
    
    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
        uptime = time.time() - self.stats['start_time']
        
        return {
            **self.stats,
            'active_symbols': list(self.active_symbols),
            'active_connections': len(self.connections),
            'uptime_seconds': round(uptime),
            'candles_per_second': round(self.stats['total_candles'] / max(uptime, 1), 2)
        }
    
    async def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        logger.info("üõë Stopping all WebSocket connections...")
        
        for symbol in list(self.active_symbols):
            try:
                await self.unsubscribe_from_klines(symbol)
            except Exception as e:
                logger.error(f"Error stopping {symbol}: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for ws in self.connections.values():
            try:
                await ws.close()
            except Exception:
                pass
        
        self.connections.clear()
        self.subscriptions.clear()
        self.active_symbols.clear()
        
        logger.info("‚úÖ All WebSocket connections stopped")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
_bybit_client = None

def get_bybit_client() -> BybitWebSocketClient:
    """–ü–æ–ª—É—á–∏—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä Bybit WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
    global _bybit_client
    if _bybit_client is None:
        _bybit_client = BybitWebSocketClient()
    return _bybit_client

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def test_bybit_websocket():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit"""
    print("üß™ Testing Bybit WebSocket...")
    
    client = get_bybit_client()
    
    # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    def print_candle(candle: CandleData):
        print(f"üìä {candle.symbol}: {candle.close} @ {datetime.fromtimestamp(candle.timestamp)}")
    
    client.add_candle_callback(print_candle)
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ BTCUSDT
    success = await client.subscribe_to_klines("BTCUSDT", "1")
    
    if success:
        print("‚úÖ Subscribed to BTCUSDT 1-second klines")
        print("‚è±Ô∏è Listening for 30 seconds...")
        
        # –°–ª—É—à–∞–µ–º 30 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(30)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = client.get_statistics()
        print(f"üìà Statistics: {stats}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await client.stop_all()
        print("‚úÖ Test completed")
    else:
        print("‚ùå Failed to subscribe")

if __name__ == "__main__":
    asyncio.run(test_bybit_websocket())
