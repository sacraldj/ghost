#!/usr/bin/env python3
"""
üîß GHOST Supabase Auto Migrator
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
"""

import os
import sys
import json
import logging
from typing import Dict, List, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '.env'))

try:
    from supabase import create_client, Client
except ImportError:
    print("‚ùå Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install supabase")
    sys.exit(1)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('SupabaseMigrator')

class SupabaseMigrator:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∏–≥—Ä–∞—Ç–æ—Ä –¥–ª—è Supabase"""
    
    def __init__(self):
        self.supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
        
        if not self.supabase_url or not self.supabase_key:
            raise ValueError("SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        
        self.supabase = create_client(self.supabase_url, self.supabase_key)
        
        # –°—Ö–µ–º–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
        self.tables_schema = {
            'signal_sources': {
                'columns': [
                    {'name': 'id', 'type': 'uuid', 'default': 'gen_random_uuid()', 'primary': True},
                    {'name': 'source_code', 'type': 'text', 'unique': True, 'required': True},
                    {'name': 'source_name', 'type': 'text', 'required': True},
                    {'name': 'source_type', 'type': 'text', 'required': True},
                    {'name': 'channel_id', 'type': 'text'},
                    {'name': 'trader_id', 'type': 'text'},
                    {'name': 'reliability_score', 'type': 'decimal(3,2)', 'default': '0.5'},
                    {'name': 'win_rate', 'type': 'decimal(5,2)'},
                    {'name': 'avg_roi', 'type': 'decimal(10,4)'},
                    {'name': 'total_signals', 'type': 'integer', 'default': '0'},
                    {'name': 'successful_signals', 'type': 'integer', 'default': '0'},
                    {'name': 'is_active', 'type': 'boolean', 'default': 'true'},
                    {'name': 'created_at', 'type': 'timestamp', 'default': 'NOW()'},
                    {'name': 'updated_at', 'type': 'timestamp', 'default': 'NOW()'}
                ]
            },
            
            'instruments': {
                'columns': [
                    {'name': 'id', 'type': 'uuid', 'default': 'gen_random_uuid()', 'primary': True},
                    {'name': 'ticker_symbol', 'type': 'text', 'unique': True, 'required': True},
                    {'name': 'instrument_name', 'type': 'text'},
                    {'name': 'instrument_type', 'type': 'text', 'required': True},
                    {'name': 'sector', 'type': 'text'},
                    {'name': 'industry', 'type': 'text'},
                    {'name': 'base_currency', 'type': 'text'},
                    {'name': 'quote_currency', 'type': 'text'},
                    {'name': 'settlement_currency', 'type': 'text'},
                    {'name': 'exchange_code', 'type': 'text', 'required': True},
                    {'name': 'tick_size', 'type': 'decimal(20,8)'},
                    {'name': 'contract_size', 'type': 'decimal(20,8)'},
                    {'name': 'multiplier', 'type': 'integer', 'default': '1'},
                    {'name': 'is_active', 'type': 'boolean', 'default': 'true'},
                    {'name': 'created_at', 'type': 'timestamp', 'default': 'NOW()'},
                    {'name': 'updated_at', 'type': 'timestamp', 'default': 'NOW()'}
                ]
            },
            
            'exchanges': {
                'columns': [
                    {'name': 'id', 'type': 'uuid', 'default': 'gen_random_uuid()', 'primary': True},
                    {'name': 'exchange_code', 'type': 'text', 'unique': True, 'required': True},
                    {'name': 'exchange_name', 'type': 'text', 'required': True},
                    {'name': 'timezone', 'type': 'text', 'default': "'UTC'"},
                    {'name': 'trading_hours', 'type': 'jsonb'},
                    {'name': 'api_endpoints', 'type': 'jsonb'},
                    {'name': 'fees_structure', 'type': 'jsonb'},
                    {'name': 'created_at', 'type': 'timestamp', 'default': 'NOW()'}
                ]
            },
            
            'market_snapshots': {
                'columns': [
                    {'name': 'id', 'type': 'uuid', 'default': 'gen_random_uuid()', 'primary': True},
                    {'name': 'signal_id', 'type': 'uuid', 'foreign_key': 'signals_parsed(id)'},
                    {'name': 'instrument_id', 'type': 'uuid', 'foreign_key': 'instruments(id)'},
                    {'name': 'snapshot_timestamp', 'type': 'timestamp', 'required': True},
                    {'name': 'current_price', 'type': 'decimal(20,8)'},
                    {'name': 'open_price', 'type': 'decimal(20,8)'},
                    {'name': 'high_price', 'type': 'decimal(20,8)'},
                    {'name': 'low_price', 'type': 'decimal(20,8)'},
                    {'name': 'close_price', 'type': 'decimal(20,8)'},
                    {'name': 'volume_24h', 'type': 'decimal(30,8)'},
                    {'name': 'volume_1h', 'type': 'decimal(30,8)'},
                    {'name': 'bid_price', 'type': 'decimal(20,8)'},
                    {'name': 'ask_price', 'type': 'decimal(20,8)'},
                    {'name': 'spread_percent', 'type': 'decimal(10,6)'},
                    {'name': 'volatility_1h', 'type': 'decimal(10,6)'},
                    {'name': 'volatility_24h', 'type': 'decimal(10,6)'},
                    {'name': 'rsi_14', 'type': 'decimal(5,2)'},
                    {'name': 'macd_line', 'type': 'decimal(20,8)'},
                    {'name': 'macd_signal', 'type': 'decimal(20,8)'},
                    {'name': 'sma_20', 'type': 'decimal(20,8)'},
                    {'name': 'sma_50', 'type': 'decimal(20,8)'},
                    {'name': 'ema_12', 'type': 'decimal(20,8)'},
                    {'name': 'ema_26', 'type': 'decimal(20,8)'},
                    {'name': 'created_at', 'type': 'timestamp', 'default': 'NOW()'}
                ]
            },
            
            'fundamental_data': {
                'columns': [
                    {'name': 'id', 'type': 'uuid', 'default': 'gen_random_uuid()', 'primary': True},
                    {'name': 'signal_id', 'type': 'uuid', 'foreign_key': 'signals_parsed(id)'},
                    {'name': 'instrument_id', 'type': 'uuid', 'foreign_key': 'instruments(id)'},
                    {'name': 'data_timestamp', 'type': 'timestamp', 'required': True},
                    {'name': 'market_cap', 'type': 'decimal(30,2)'},
                    {'name': 'circulating_supply', 'type': 'decimal(30,8)'},
                    {'name': 'active_addresses_24h', 'type': 'integer'},
                    {'name': 'transaction_count_24h', 'type': 'integer'},
                    {'name': 'whale_transactions_24h', 'type': 'integer'},
                    {'name': 'exchange_inflows_24h', 'type': 'decimal(30,8)'},
                    {'name': 'exchange_outflows_24h', 'type': 'decimal(30,8)'},
                    {'name': 'fear_greed_index', 'type': 'integer'},
                    {'name': 'social_sentiment_score', 'type': 'decimal(3,2)'},
                    {'name': 'news_sentiment_score', 'type': 'decimal(3,2)'},
                    {'name': 'google_trends_score', 'type': 'integer'},
                    {'name': 'created_at', 'type': 'timestamp', 'default': 'NOW()'}
                ]
            },
            
            'performance_analytics': {
                'columns': [
                    {'name': 'id', 'type': 'uuid', 'default': 'gen_random_uuid()', 'primary': True},
                    {'name': 'entity_type', 'type': 'text', 'required': True},
                    {'name': 'entity_id', 'type': 'uuid', 'required': True},
                    {'name': 'analysis_period_start', 'type': 'timestamp', 'required': True},
                    {'name': 'analysis_period_end', 'type': 'timestamp', 'required': True},
                    {'name': 'total_trades', 'type': 'integer'},
                    {'name': 'winning_trades', 'type': 'integer'},
                    {'name': 'losing_trades', 'type': 'integer'},
                    {'name': 'win_rate', 'type': 'decimal(5,2)'},
                    {'name': 'total_pnl', 'type': 'decimal(20,8)'},
                    {'name': 'avg_win', 'type': 'decimal(20,8)'},
                    {'name': 'avg_loss', 'type': 'decimal(20,8)'},
                    {'name': 'sharpe_ratio', 'type': 'decimal(10,6)'},
                    {'name': 'max_drawdown', 'type': 'decimal(10,4)'},
                    {'name': 'created_at', 'type': 'timestamp', 'default': 'NOW()'}
                ]
            },
            
            'alerts': {
                'columns': [
                    {'name': 'id', 'type': 'uuid', 'default': 'gen_random_uuid()', 'primary': True},
                    {'name': 'alert_type', 'type': 'text', 'required': True},
                    {'name': 'priority', 'type': 'text', 'default': "'MEDIUM'"},
                    {'name': 'title', 'type': 'text', 'required': True},
                    {'name': 'message', 'type': 'text', 'required': True},
                    {'name': 'signal_id', 'type': 'uuid', 'foreign_key': 'signals_parsed(id)'},
                    {'name': 'trade_id', 'type': 'uuid', 'foreign_key': 'trades(id)'},
                    {'name': 'source_id', 'type': 'uuid', 'foreign_key': 'signal_sources(id)'},
                    {'name': 'status', 'type': 'text', 'default': "'PENDING'"},
                    {'name': 'delivery_channels', 'type': 'text[]'},
                    {'name': 'created_at', 'type': 'timestamp', 'default': 'NOW()'},
                    {'name': 'processed_at', 'type': 'timestamp'},
                    {'name': 'delivered_at', 'type': 'timestamp'}
                ]
            }
        }
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.initial_data = {
            'exchanges': [
                {
                    'exchange_code': 'BINANCE',
                    'exchange_name': 'Binance Futures',
                    'timezone': 'UTC',
                    'trading_hours': {'24_7': True},
                    'api_endpoints': {'rest': 'fapi.binance.com', 'ws': 'fstream.binance.com'},
                    'fees_structure': {'maker': 0.0002, 'taker': 0.0004}
                },
                {
                    'exchange_code': 'BYBIT',
                    'exchange_name': 'Bybit Derivatives',
                    'timezone': 'UTC',
                    'trading_hours': {'24_7': True},
                    'api_endpoints': {'rest': 'api.bybit.com', 'ws': 'stream.bybit.com'},
                    'fees_structure': {'maker': 0.0001, 'taker': 0.0006}
                }
            ],
            
            'signal_sources': [
                {
                    'source_code': 'whales_crypto_guide',
                    'source_name': 'Whales Crypto Guide',
                    'source_type': 'telegram',
                    'channel_id': '-1001288385100',
                    'trader_id': 'whales_guide',
                    'reliability_score': 0.75,
                    'is_active': True
                }
            ],
            
            'instruments': [
                {
                    'ticker_symbol': 'ORDIUSDT',
                    'instrument_name': 'Ordinals USDT Perpetual',
                    'instrument_type': 'Crypto',
                    'sector': 'Cryptocurrency',
                    'industry': 'Bitcoin Layer 2',
                    'base_currency': 'ORDI',
                    'quote_currency': 'USDT',
                    'settlement_currency': 'USDT',
                    'exchange_code': 'BINANCE',
                    'tick_size': 0.001,
                    'contract_size': 1.0,
                    'is_active': True
                },
                {
                    'ticker_symbol': 'BTCUSDT',
                    'instrument_name': 'Bitcoin USDT Perpetual',
                    'instrument_type': 'Crypto',
                    'sector': 'Cryptocurrency',
                    'industry': 'Digital Currency',
                    'base_currency': 'BTC',
                    'quote_currency': 'USDT',
                    'settlement_currency': 'USDT',
                    'exchange_code': 'BINANCE',
                    'tick_size': 0.1,
                    'contract_size': 1.0,
                    'is_active': True
                }
            ]
        }
    
    def check_table_exists(self, table_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            result = self.supabase.table(table_name).select('*').limit(1).execute()
            return True
        except Exception:
            return False
    
    def create_table_if_not_exists(self, table_name: str, schema: Dict) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            if self.check_table_exists(table_name):
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ Supabase REST API
            # –ü–æ—Å–∫–æ–ª—å–∫—É –ø—Ä—è–º–æ–≥–æ SQL –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ –≤—Å—Ç–∞–≤–∫—É –ø—É—Å—Ç–æ–π –∑–∞–ø–∏—Å–∏
            logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
            
            # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ upsert
            if table_name in ['signal_sources', 'instruments', 'exchanges']:
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å —á—Ç–æ–±—ã —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
                minimal_record = self._create_minimal_record(table_name, schema)
                if minimal_record:
                    result = self.supabase.table(table_name).upsert([minimal_record]).execute()
                    if result.data:
                        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å—å—é")
                        return True
            
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É {table_name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            return False
    
    def _create_minimal_record(self, table_name: str, schema: Dict) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        record = {}
        
        for column in schema['columns']:
            name = column['name']
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è
            if column.get('default') and ('gen_random_uuid()' in str(column['default']) or 'NOW()' in str(column['default'])):
                continue
            
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if column.get('required'):
                if name == 'source_code' and table_name == 'signal_sources':
                    record[name] = 'test_source'
                elif name == 'source_name' and table_name == 'signal_sources':
                    record[name] = 'Test Source'
                elif name == 'source_type' and table_name == 'signal_sources':
                    record[name] = 'test'
                elif name == 'ticker_symbol' and table_name == 'instruments':
                    record[name] = 'TEST'
                elif name == 'instrument_type' and table_name == 'instruments':
                    record[name] = 'Test'
                elif name == 'exchange_code':
                    record[name] = 'TEST'
                elif name == 'exchange_name' and table_name == 'exchanges':
                    record[name] = 'Test Exchange'
                else:
                    record[name] = 'test'
        
        return record if record else None
    
    def populate_initial_data(self, table_name: str) -> bool:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            if table_name not in self.initial_data:
                return True
            
            data = self.initial_data[table_name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            existing = self.supabase.table(table_name).select('*').limit(1).execute()
            if existing.data:
                logger.info(f"üìä –¢–∞–±–ª–∏—Ü–∞ {table_name} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
                return True
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            result = self.supabase.table(table_name).upsert(data).execute()
            
            if result.data:
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(result.data)} –∑–∞–ø–∏—Å–µ–π –≤ {table_name}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ {table_name}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è {table_name}: {e}")
            return False
    
    def migrate_all(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é Supabase...")
        
        success_count = 0
        total_count = len(self.tables_schema)
        
        # –ü–æ—Ä—è–¥–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü (—Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        creation_order = [
            'exchanges',
            'signal_sources', 
            'instruments',
            'market_snapshots',
            'fundamental_data',
            'performance_analytics',
            'alerts'
        ]
        
        for table_name in creation_order:
            if table_name not in self.tables_schema:
                continue
                
            logger.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            if self.create_table_if_not_exists(table_name, self.tables_schema[table_name]):
                success_count += 1
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                self.populate_initial_data(table_name)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        logger.info("\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü:")
        existing_tables = []
        
        for table_name in self.tables_schema.keys():
            if self.check_table_exists(table_name):
                try:
                    count_result = self.supabase.table(table_name).select('id', count='exact').execute()
                    count = count_result.count if hasattr(count_result, 'count') else len(count_result.data or [])
                    logger.info(f"‚úÖ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                    existing_tables.append(table_name)
                except:
                    logger.info(f"‚úÖ {table_name}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    existing_tables.append(table_name)
            else:
                logger.warning(f"‚ùå {table_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        success_rate = len(existing_tables) / total_count * 100
        
        logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ: {len(existing_tables)}/{total_count} ({success_rate:.1f}%)")
        
        if success_rate >= 80:
            logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        migrator = SupabaseMigrator()
        success = migrator.migrate_all()
        
        if success:
            print("\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üéØ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        else:
            print("\n‚ö†Ô∏è –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
            print("üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è")
        
        return 0 if success else 1
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
