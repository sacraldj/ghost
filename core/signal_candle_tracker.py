"""
Signal Candle Tracker
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Å–≤–µ—á–µ–π
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set
from dataclasses import dataclass
import json
import os

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
try:
    from supabase import create_client, Client
except ImportError:
    logging.warning("‚ö†Ô∏è Supabase client not available")
    create_client = None

from core.bybit_websocket import get_bybit_client, CandleData

logger = logging.getLogger(__name__)

@dataclass
class SignalInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    signal_id: str
    symbol: str
    side: str  # LONG/SHORT
    entry_min: float
    entry_max: float
    tp1: float
    tp2: float
    sl: float
    posted_ts: int  # unix timestamp
    status: str = 'sim_open'

class SignalCandleTracker:
    """–¢—Ä–µ–∫–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Å–≤–µ—á–µ–π –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º"""
    
    def __init__(self, supabase_url: str = None, supabase_key: str = None):
        # Supabase –∫–ª–∏–µ–Ω—Ç
        self.supabase: Optional[Client] = None
        if create_client and supabase_url and supabase_key:
            self.supabase = create_client(supabase_url, supabase_key)
            logger.info("‚úÖ Supabase client initialized")
        else:
            logger.warning("‚ö†Ô∏è Supabase client not available")
        
        # Bybit WebSocket –∫–ª–∏–µ–Ω—Ç
        self.bybit_client = get_bybit_client()
        self.bybit_client.add_candle_callback(self._handle_candle_data)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã
        self.tracked_signals: Dict[str, SignalInfo] = {}  # signal_id -> SignalInfo
        self.symbol_subscriptions: Dict[str, Set[str]] = {}  # symbol -> set of signal_ids
        self.last_check_time = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_tracking_days = 7  # –º–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.check_interval = 30    # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å–µ–∫—É–Ω–¥—ã)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'signals_tracked': 0,
            'candles_saved': 0,
            'symbols_active': 0,
            'last_signal_check': None,
            'start_time': time.time()
        }
        
        logger.info("SignalCandleTracker initialized")
    
    async def start_tracking(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        logger.info("üöÄ Starting signal tracking...")
        
        try:
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                await self._check_new_signals()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                await self._cleanup_old_subscriptions()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_stats()
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                await asyncio.sleep(self.check_interval)
                
        except Exception as e:
            logger.error(f"‚ùå Error in tracking loop: {e}")
            raise
    
    async def _check_new_signals(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ v_trades"""
        if not self.supabase:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è
            current_time = int(time.time())
            cutoff_time = current_time - (self.max_tracking_days * 24 * 3600)
            
            # –ó–∞–ø—Ä–æ—Å –∫ v_trades –Ω–∞ –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            response = self.supabase.table('v_trades').select(
                'id, symbol, side, entry_min, entry_max, tp1, tp2, sl, posted_ts, status'
            ).gte('posted_ts', cutoff_time).eq('status', 'sim_open').execute()
            
            if response.data:
                for signal_data in response.data:
                    signal_id = signal_data['id']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ª–∏ —É–∂–µ
                    if signal_id not in self.tracked_signals:
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –≤–∞–ª–∏–¥–Ω—ã–π
                        symbol = signal_data['symbol']
                        if not symbol or len(symbol) < 3:
                            logger.warning(f"‚ö†Ô∏è Invalid symbol for signal {signal_id}: {symbol}")
                            continue
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞
                        signal = SignalInfo(
                            signal_id=signal_id,
                            symbol=symbol,
                            side=signal_data['side'],
                            entry_min=float(signal_data['entry_min'] or 0),
                            entry_max=float(signal_data['entry_max'] or 0), 
                            tp1=float(signal_data['tp1'] or 0),
                            tp2=float(signal_data['tp2'] or 0),
                            sl=float(signal_data['sl'] or 0),
                            posted_ts=signal_data['posted_ts'],
                            status=signal_data['status']
                        )
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                        await self._start_signal_tracking(signal)
            
            self.stats['last_signal_check'] = datetime.now()
            
        except Exception as e:
            logger.error(f"‚ùå Error checking new signals: {e}")
    
    async def _start_signal_tracking(self, signal: SignalInfo):
        """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            logger.info(f"üìä Starting tracking for signal {signal.signal_id} ({signal.symbol})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
            self.tracked_signals[signal.signal_id] = signal
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
            await self._create_subscription_record(signal)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ WebSocket –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
            if signal.symbol not in self.symbol_subscriptions:
                self.symbol_subscriptions[signal.symbol] = set()
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ 1-—Å–µ–∫—É–Ω–¥–Ω—ã–µ —Å–≤–µ—á–∏
                success = await self.bybit_client.subscribe_to_klines(signal.symbol, "1")
                if success:
                    logger.info(f"‚úÖ Subscribed to {signal.symbol} klines")
                else:
                    logger.error(f"‚ùå Failed to subscribe to {signal.symbol}")
                    return
            
            # –î–æ–±–∞–≤–ª—è–µ–º signal_id –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º —Å–∏–º–≤–æ–ª–∞
            self.symbol_subscriptions[signal.symbol].add(signal.signal_id)
            
            self.stats['signals_tracked'] += 1
            self.stats['symbols_active'] = len(self.symbol_subscriptions)
            
        except Exception as e:
            logger.error(f"‚ùå Error starting tracking for {signal.signal_id}: {e}")
    
    async def _create_subscription_record(self, signal: SignalInfo):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î"""
        if not self.supabase:
            return
        
        try:
            subscription_data = {
                'signal_id': signal.signal_id,
                'symbol': signal.symbol,
                'start_time': int(time.time()),
                'status': 'active',
                'candles_collected': 0
            }
            
            response = self.supabase.table('signal_websocket_subscriptions').insert(subscription_data).execute()
            
            if response.data:
                logger.debug(f"‚úÖ Created subscription record for {signal.signal_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Error creating subscription record: {e}")
    
    async def _handle_candle_data(self, candle: CandleData):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
        try:
            # –ù–∞–π–¥–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª
            if candle.symbol in self.symbol_subscriptions:
                signal_ids = self.symbol_subscriptions[candle.symbol]
                
                for signal_id in signal_ids:
                    await self._save_candle_for_signal(signal_id, candle)
            
        except Exception as e:
            logger.error(f"‚ùå Error handling candle data: {e}")
    
    async def _save_candle_for_signal(self, signal_id: str, candle: CandleData):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if not self.supabase:
            return
        
        try:
            candle_data = {
                'signal_id': signal_id,
                'symbol': candle.symbol,
                'timestamp': candle.timestamp,
                'open': candle.open,
                'high': candle.high,
                'low': candle.low,
                'close': candle.close,
                'volume': candle.volume,
                'quote_volume': candle.quote_volume
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–µ–π
            response = self.supabase.table('signal_candles_1s').upsert(candle_data).execute()
            
            if response.data:
                self.stats['candles_saved'] += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–≤–µ—á–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–µ
                await self._update_subscription_stats(signal_id)
                
            logger.debug(f"üíæ Saved candle for {signal_id}: {candle.symbol} @ {candle.close}")
            
        except Exception as e:
            logger.error(f"‚ùå Error saving candle for {signal_id}: {e}")
    
    async def _update_subscription_stats(self, signal_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if not self.supabase:
            return
        
        try:
            current_time = int(time.time())
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            response = self.supabase.table('signal_websocket_subscriptions').select('candles_collected').eq('signal_id', signal_id).single().execute()
            
            current_count = 0
            if response.data:
                current_count = response.data.get('candles_collected', 0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º
            update_response = self.supabase.table('signal_websocket_subscriptions').update({
                'candles_collected': current_count + 1,
                'last_candle_time': current_time,
                'updated_at': datetime.now().isoformat()
            }).eq('signal_id', signal_id).execute()
            
        except Exception as e:
            logger.debug(f"Error updating subscription stats: {e}")  # debug level, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    async def _cleanup_old_subscriptions(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            current_time = time.time()
            cutoff_time = current_time - (self.max_tracking_days * 24 * 3600)
            
            # –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            signals_to_remove = []
            
            for signal_id, signal in self.tracked_signals.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
                if signal.posted_ts < cutoff_time:
                    signals_to_remove.append(signal_id)
                    logger.info(f"üßπ Removing old signal {signal_id} (age: {current_time - signal.posted_ts}s)")
            
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            for signal_id in signals_to_remove:
                await self._stop_signal_tracking(signal_id)
            
        except Exception as e:
            logger.error(f"‚ùå Error in cleanup: {e}")
    
    async def _stop_signal_tracking(self, signal_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            if signal_id not in self.tracked_signals:
                return
            
            signal = self.tracked_signals[signal_id]
            symbol = signal.symbol
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–∞
            if symbol in self.symbol_subscriptions:
                self.symbol_subscriptions[symbol].discard(signal_id)
                
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç WebSocket
                if not self.symbol_subscriptions[symbol]:
                    await self.bybit_client.unsubscribe_from_klines(symbol, "1")
                    del self.symbol_subscriptions[symbol]
                    logger.info(f"üõë Unsubscribed from {symbol} klines")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
            await self._complete_subscription(signal_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
            del self.tracked_signals[signal_id]
            
            self.stats['symbols_active'] = len(self.symbol_subscriptions)
            
            logger.info(f"‚úÖ Stopped tracking signal {signal_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Error stopping signal tracking: {e}")
    
    async def _complete_subscription(self, signal_id: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î"""
        if not self.supabase:
            return
        
        try:
            response = self.supabase.table('signal_websocket_subscriptions').update({
                'status': 'completed',
                'end_time': int(time.time()),
                'updated_at': datetime.now().isoformat()
            }).eq('signal_id', signal_id).execute()
            
        except Exception as e:
            logger.error(f"‚ùå Error completing subscription: {e}")
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats['signals_tracked'] = len(self.tracked_signals)
        self.stats['symbols_active'] = len(self.symbol_subscriptions)
    
    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞"""
        uptime = time.time() - self.stats['start_time']
        
        return {
            **self.stats,
            'tracked_signals': list(self.tracked_signals.keys()),
            'active_symbols': list(self.symbol_subscriptions.keys()),
            'uptime_seconds': round(uptime),
            'candles_per_hour': round(self.stats['candles_saved'] / max(uptime / 3600, 1))
        }
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞"""
        logger.info("üõë Stopping Signal Candle Tracker...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal_id in list(self.tracked_signals.keys()):
            await self._stop_signal_tracking(signal_id)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Bybit –∫–ª–∏–µ–Ω—Ç
        await self.bybit_client.stop_all()
        
        logger.info("‚úÖ Signal Candle Tracker stopped")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
_signal_tracker = None

def get_signal_tracker() -> SignalCandleTracker:
    """–ü–æ–ª—É—á–∏—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞"""
    global _signal_tracker
    if _signal_tracker is None:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
        supabase_key = os.getenv('SUPABASE_SECRET_KEY')
        
        _signal_tracker = SignalCandleTracker(supabase_url, supabase_key)
    return _signal_tracker

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def test_signal_tracker():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"""
    print("üß™ Testing Signal Candle Tracker...")
    
    tracker = get_signal_tracker()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –≤ —Ñ–æ–Ω–µ
    tracking_task = asyncio.create_task(tracker.start_tracking())
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await asyncio.sleep(10)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = tracker.get_statistics()
    print(f"üìà Tracker stats: {json.dumps(stats, indent=2)}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    tracking_task.cancel()
    await tracker.stop()
    
    print("‚úÖ Test completed")

if __name__ == "__main__":
    asyncio.run(test_signal_tracker())
