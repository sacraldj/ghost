"""
GHOST Telegram Rate Limiter
–ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç FloodWaitError –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

import json
import logging
import os
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict

logger = logging.getLogger(__name__)

@dataclass
class AuthAttempt:
    """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    timestamp: float
    phone: str
    success: bool
    error_type: Optional[str] = None
    wait_time: Optional[int] = None  # —Å–µ–∫—É–Ω–¥—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å

class TelegramRateLimiter:
    """–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —á–∞—Å—Ç–æ—Ç—ã –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram"""
    
    def __init__(self, config_file: str = "logs/telegram_auth_attempts.json"):
        self.config_file = config_file
        self.max_attempts_per_day = 3  # –ú–ê–ö–°–ò–ú–£–ú 3 –ø–æ–ø—ã—Ç–∫–∏ –≤ –¥–µ–Ω—å
        self.max_attempts_per_hour = 2  # –ú–ê–ö–°–ò–ú–£–ú 2 –ø–æ–ø—ã—Ç–∫–∏ –≤ —á–∞—Å
        self.cooldown_period = 3600  # 1 —á–∞—Å –ø–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫
        self.attempts = self._load_attempts()
        
        logger.info(f"TelegramRateLimiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –õ–∏–º–∏—Ç: {self.max_attempts_per_day} –ø–æ–ø—ã—Ç–æ–∫/–¥–µ–Ω—å")

    def _load_attempts(self) -> List[AuthAttempt]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    attempts = []
                    for item in data:
                        attempts.append(AuthAttempt(**item))
                    
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
                    current_time = time.time()
                    attempts = [a for a in attempts if (current_time - a.timestamp) < 86400]
                    
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(attempts)} –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")
                    return attempts
            else:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                os.makedirs(os.path.dirname(self.config_file), exist_ok=True)
                return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫: {e}")
            return []

    def _save_attempts(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                data = [asdict(attempt) for attempt in self.attempts]
                json.dump(data, f, indent=2, ensure_ascii=False)
            logger.debug("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫: {e}")

    def can_attempt_auth(self, phone: str) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Returns:
            tuple: (–º–æ–∂–Ω–æ_–ª–∏_–ø–æ–ø—ã—Ç–∞—Ç—å—Å—è, –ø—Ä–∏—á–∏–Ω–∞_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏_–µ—Å–ª–∏_–Ω–µ–ª—å–∑—è)
        """
        current_time = time.time()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        phone_attempts = [a for a in self.attempts if a.phone == phone]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        day_attempts = [a for a in phone_attempts if (current_time - a.timestamp) < 86400]
        
        if len(day_attempts) >= self.max_attempts_per_day:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ({self.max_attempts_per_day}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        hour_attempts = [a for a in phone_attempts if (current_time - a.timestamp) < 3600]
        
        if len(hour_attempts) >= self.max_attempts_per_hour:
            next_attempt_time = datetime.fromtimestamp(hour_attempts[-1].timestamp + 3600)
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({self.max_attempts_per_hour}). –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞: {next_attempt_time.strftime('%H:%M')}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö FloodWaitError
        active_blocks = [a for a in phone_attempts if a.wait_time and (current_time - a.timestamp) < a.wait_time]
        
        if active_blocks:
            block = active_blocks[-1]
            unblock_time = datetime.fromtimestamp(block.timestamp + block.wait_time)
            remaining_seconds = int(block.timestamp + block.wait_time - current_time)
            hours = remaining_seconds // 3600
            minutes = (remaining_seconds % 3600) // 60
            
            return False, f"–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {unblock_time.strftime('%H:%M:%S')} (–æ—Å—Ç–∞–ª–æ—Å—å {hours}—á {minutes}–º)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        recent_failures = [a for a in phone_attempts if not a.success and (current_time - a.timestamp) < self.cooldown_period]
        
        if recent_failures:
            cooldown_end = datetime.fromtimestamp(recent_failures[-1].timestamp + self.cooldown_period)
            return False, f"–ü–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ {cooldown_end.strftime('%H:%M')}"
        
        return True, ""

    def record_attempt(self, phone: str, success: bool, error_type: str = None, wait_time: int = None):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            phone: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            success: —É—Å–ø–µ—à–Ω–∞ –ª–∏ –ø–æ–ø—ã—Ç–∫–∞
            error_type: —Ç–∏–ø –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            wait_time: –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –µ—Å–ª–∏ FloodWaitError
        """
        attempt = AuthAttempt(
            timestamp=time.time(),
            phone=phone,
            success=success,
            error_type=error_type,
            wait_time=wait_time
        )
        
        self.attempts.append(attempt)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        current_time = time.time()
        self.attempts = [a for a in self.attempts if (current_time - a.timestamp) < 86400]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self._save_attempts()
        
        status = "‚úÖ —É—Å–ø–µ—à–Ω–æ" if success else "‚ùå –Ω–µ—É–¥–∞—á–Ω–æ"
        logger.info(f"–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {phone}: {status}")
        
        if wait_time:
            hours = wait_time // 3600
            minutes = (wait_time % 3600) // 60
            logger.warning(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ {hours}—á {minutes}–º")

    def get_stats(self, phone: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        current_time = time.time()
        phone_attempts = [a for a in self.attempts if a.phone == phone]
        
        day_attempts = [a for a in phone_attempts if (current_time - a.timestamp) < 86400]
        hour_attempts = [a for a in phone_attempts if (current_time - a.timestamp) < 3600]
        successful_attempts = [a for a in day_attempts if a.success]
        failed_attempts = [a for a in day_attempts if not a.success]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        active_blocks = [a for a in phone_attempts if a.wait_time and (current_time - a.timestamp) < a.wait_time]
        
        stats = {
            'phone': phone,
            'attempts_today': len(day_attempts),
            'max_attempts_per_day': self.max_attempts_per_day,
            'attempts_this_hour': len(hour_attempts),
            'max_attempts_per_hour': self.max_attempts_per_hour,
            'successful_today': len(successful_attempts),
            'failed_today': len(failed_attempts),
            'remaining_attempts_today': max(0, self.max_attempts_per_day - len(day_attempts)),
            'remaining_attempts_hour': max(0, self.max_attempts_per_hour - len(hour_attempts)),
            'is_blocked': len(active_blocks) > 0
        }
        
        if active_blocks:
            block = active_blocks[-1]
            remaining_block_time = int(block.timestamp + block.wait_time - current_time)
            stats['block_remaining_seconds'] = remaining_block_time
        
        return stats

    def reset_attempts(self, phone: str = None):
        """–°–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)"""
        if phone:
            self.attempts = [a for a in self.attempts if a.phone != phone]
            logger.info(f"–°–±—Ä–æ—à–µ–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
        else:
            self.attempts = []
            logger.info("–°–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        self._save_attempts()

    def show_protection_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã"""
        print("üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ì–û–ö–†–ê–¢–ù–´–• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô")
        print("=" * 45)
        print(f"üìä –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤ –¥–µ–Ω—å: {self.max_attempts_per_day}")
        print(f"üìä –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤ —á–∞—Å: {self.max_attempts_per_hour}")
        print(f"‚è∞ –ü–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è: {self.cooldown_period // 60} –º–∏–Ω—É—Ç")
        print(f"üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.attempts)}")
        
        if self.attempts:
            unique_phones = set(a.phone for a in self.attempts)
            print(f"üì± –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞: {len(unique_phones)}")
            
            for phone in unique_phones:
                stats = self.get_stats(phone)
                print(f"\nüìû {phone}:")
                print(f"   –ü–æ–ø—ã—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {stats['attempts_today']}/{stats['max_attempts_per_day']}")
                print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_today']}, –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed_today']}")
                if stats['is_blocked']:
                    hours = stats['block_remaining_seconds'] // 3600
                    minutes = (stats['block_remaining_seconds'] % 3600) // 60
                    print(f"   üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù (–æ—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º)")
        else:
            print("üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
