#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ trader_registry - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
"""

import asyncio
import logging
import os
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def fix_trader_registry():
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –≤ trader_registry"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TRADER_REGISTRY")
    print("=" * 50)
    
    try:
        from supabase import create_client, Client
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase
        supabase_url = os.getenv("NEXT_PUBLIC_SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        
        if not supabase_url or not supabase_key:
            print("‚ùå Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        supabase: Client = create_client(supabase_url, supabase_key)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Supabase")
        
        # –¢—Ä–µ–π–¥–µ—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        traders_to_add = [
            {
                "trader_id": "whales_guide_main",
                "name": "Whales Crypto Guide",
                "source_type": "telegram",
                "source_id": "-1001288385100",  # –†–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
                "source_handle": "@Whalesguide",
                "mode": "observe",
                "risk_profile": {
                    "size_usd": 100,
                    "leverage": 10,
                    "max_concurrent": 3,
                    "sl_cap": 5
                },
                "parsing_profile": "whales_universal",
                "is_active": True,
                "notes": "Main Whales Guide channel for crypto signals"
            },
            {
                "trader_id": "2trade_slivaem",
                "name": "2Trade - slivaeminfo",
                "source_type": "telegram",
                "source_id": "-1001234567890",
                "source_handle": "@2trade_slivaem",
                "mode": "observe",
                "risk_profile": {
                    "size_usd": 100,
                    "leverage": 8,
                    "max_concurrent": 2,
                    "sl_cap": 3
                },
                "parsing_profile": "2trade_parser",
                "is_active": True,
                "notes": "2Trade slivaem channel"
            },
            {
                "trader_id": "crypto_hub_vip",
                "name": "Crypto Hub VIP",
                "source_type": "telegram",
                "source_id": "-1001234567891",
                "source_handle": "@crypto_hub_vip",
                "mode": "observe",
                "risk_profile": {
                    "size_usd": 150,
                    "leverage": 12,
                    "max_concurrent": 4,
                    "sl_cap": 7
                },
                "parsing_profile": "vip_signals_parser",
                "is_active": True,
                "notes": "Crypto Hub VIP signals"
            },
            {
                "trader_id": "coinpulse_signals",
                "name": "CoinPulse Signals",
                "source_type": "telegram",
                "source_id": "-1001234567892",
                "source_handle": "@coinpulse_signals",
                "mode": "observe",
                "risk_profile": {
                    "size_usd": 120,
                    "leverage": 9,
                    "max_concurrent": 3,
                    "sl_cap": 4
                },
                "parsing_profile": "standard_v1",
                "is_active": True,
                "notes": "CoinPulse signals channel"
            }
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç—Ä–µ–π–¥–µ—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        existing_result = supabase.table('trader_registry').select('trader_id').execute()
        existing_ids = {row['trader_id'] for row in existing_result.data}
        
        print(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {len(existing_ids)}")
        if existing_ids:
            print(f"   {', '.join(existing_ids)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö
        added_count = 0
        for trader in traders_to_add:
            if trader['trader_id'] not in existing_ids:
                try:
                    result = supabase.table('trader_registry').insert(trader).execute()
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–π–¥–µ—Ä: {trader['trader_id']}")
                    added_count += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {trader['trader_id']}: {e}")
            else:
                print(f"‚ö™ –¢—Ä–µ–π–¥–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {trader['trader_id']}")
        
        print(f"\nüéâ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {added_count}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    success = await fix_trader_registry()
    
    if success:
        print("\n‚úÖ TRADER_REGISTRY –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –≤ Supabase")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ")

if __name__ == "__main__":
    asyncio.run(main())
