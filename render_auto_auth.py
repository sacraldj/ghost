#!/usr/bin/env python3
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ß–ï–†–ï–ó RENDER API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –Ω–∞ Render –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import os
import requests
import logging
from datetime import datetime
from typing import Optional
from telethon import TelegramClient
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class RenderAutoAuth:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Render"""
    
    def __init__(self):
        self.api_id = int(os.getenv('TELEGRAM_API_ID'))
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        self.render_url = "https://ghost-kuxh.onrender.com"  # –¢–≤–æ–π –¥–æ–º–µ–Ω
    
    async def authorize_via_render(self, session_name: str = 'ghost_session') -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Render API"""
        logger.info(f"üåê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ß–ï–†–ï–ó RENDER: {session_name}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏
        if await self._check_local_session(session_name):
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ")
            return True
        
        # 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Render
        try:
            logger.info("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ Render...")
            
            response = requests.post(
                f"{self.render_url}/api/telegram/auto-auth",
                json={
                    "phone": self.phone,
                    "session_name": session_name
                },
                timeout=60  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    logger.info("‚úÖ Render –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                    
                    # 3. –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    return await self._wait_for_auth_result(session_name)
                else:
                    logger.error(f"‚ùå Render –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å: {data.get('error')}")
                    return False
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Render: {e}")
            return False
    
    async def _check_local_session(self, session_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é"""
        try:
            client = TelegramClient(session_name, self.api_id, self.api_hash)
            await client.connect()
            
            is_auth = await client.is_user_authorized()
            await client.disconnect()
            
            return is_auth
            
        except Exception:
            return False
    
    async def _wait_for_auth_result(self, session_name: str, max_wait: int = 120) -> bool:
        """–ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info(f"‚è∞ –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏ {session_name} (–¥–æ {max_wait}—Å)...")
        
        for attempt in range(max_wait // 10):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            if await self._check_local_session(session_name):
                logger.info(f"üéâ –°–µ—Å—Å–∏—è {session_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞!")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
            try:
                response = requests.get(
                    f"{self.render_url}/api/telegram/auto-auth",
                    params={"session": session_name},
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    status = data.get('status', 'unknown')
                    logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
                    
                    if status == 'completed':
                        return True
                    elif status == 'failed':
                        logger.error("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –Ω–∞ Render")
                        return False
                        
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            # –ñ–¥–µ–º
            if attempt < (max_wait // 10) - 1:
                await asyncio.sleep(10)
        
        logger.error("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False


async def auto_auth_via_render(session_name: str = 'ghost_session') -> bool:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Render"""
    auth = RenderAutoAuth()
    return await auth.authorize_via_render(session_name)


if __name__ == "__main__":
    import sys
    
    session_name = sys.argv[1] if len(sys.argv) > 1 else 'ghost_session'
    
    async def main():
        logger.info("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ß–ï–†–ï–ó RENDER")
        logger.info("=" * 50)
        
        success = await auto_auth_via_render(session_name)
        
        if success:
            print(f"\nüéâ –£–°–ü–ï–•! –°–µ—Å—Å–∏—è {session_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ Render!")
        else:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê! –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å {session_name}")
        
        logger.info("=" * 50)
    
    asyncio.run(main())
