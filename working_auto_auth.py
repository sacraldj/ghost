#!/usr/bin/env python3
"""
–†–ê–ë–û–ß–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
–ë–µ—Ä–µ–º –ü–û–°–õ–ï–î–ù–ò–ô –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–¥ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
"""

import asyncio
import os
import re
import logging
from typing import Optional
from telethon import TelegramClient
from telethon.errors import PhoneCodeInvalidError, SessionPasswordNeededError
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class WorkingAutoAuth:
    """–†–∞–±–æ—á–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    
    def __init__(self):
        self.api_id = int(os.getenv('TELEGRAM_API_ID'))
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        self.reader_session = 'ghost_code_reader'
    
    async def auto_auth(self, target_session: str) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        logger.info(f"ü§ñ –†–ê–ë–û–ß–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: {target_session}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º target
        if await self._check_session(target_session):
            logger.info(f"‚úÖ {target_session} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            return True
        
        return await self._working_auth_process(target_session)
    
    async def _working_auth_process(self, target_session: str) -> bool:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        target_client = TelegramClient(target_session, self.api_id, self.api_hash)
        reader_client = TelegramClient(self.reader_session, self.api_id, self.api_hash)
        
        try:
            await target_client.connect()
            
            # –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è reader —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GHOST_READER_SESSION_B64...")
            if self._try_restore_reader_session():
                logger.info("‚úÖ Reader —Å–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ reader —Å–µ—Å—Å–∏—è
            reader_available = False
            try:
                await reader_client.connect()
                if await reader_client.is_user_authorized():
                    reader_available = True
                    logger.info("‚úÖ Reader —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    logger.warning("‚ö†Ô∏è Reader —Å–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Reader —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
            if not reader_available:
                logger.info("üîÑ –†–∞–±–æ—Ç–∞–µ–º –ë–ï–ó reader —Å–µ—Å—Å–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._fallback_auth_process(target_client)
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–¥ –°–ù–ê–ß–ê–õ–ê
            old_code = await self._get_latest_code(reader_client)
            if old_code:
                logger.info(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥ –¥–æ –∑–∞–ø—Ä–æ—Å–∞: {old_code}")
            
            # 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
            logger.info("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ù–û–í–û–ì–û –∫–æ–¥–∞...")
            await target_client.send_code_request(self.phone)
            
            # 3. –ñ–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥—ã
            for attempt in range(6):
                logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–¥–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/6...")
                
                # –°–Ω–∞—á–∞–ª–∞ –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                await asyncio.sleep(5)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥
                current_code = await self._get_latest_code(reader_client)
                
                if current_code and current_code != old_code:
                    logger.info(f"üÜï –ù–û–í–´–ô –ö–û–î –ù–ê–ô–î–ï–ù: {current_code}")
                    code_to_try = current_code
                elif current_code:
                    logger.info(f"üîÑ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–°–õ–ï–î–ù–ò–ô –ö–û–î: {current_code}")
                    code_to_try = current_code
                else:
                    logger.warning("‚ùå –ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    continue
                
                # –ü—Ä–æ–±—É–µ–º –∫–æ–¥
                try:
                    await target_client.sign_in(self.phone, code_to_try)
                    logger.info("‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
                    
                    me = await target_client.get_me()
                    logger.info(f"üéâ {me.first_name} (@{me.username})")
                    return True
                    
                except PhoneCodeInvalidError:
                    logger.warning(f"‚ùå –ö–æ–¥ {code_to_try} –Ω–µ –ø–æ–¥–æ—à–µ–ª")
                    old_code = current_code  # –û–±–Ω–æ–≤–ª—è–µ–º —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                    
                except SessionPasswordNeededError:
                    logger.error("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA")
                    return False
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
            
        finally:
            await target_client.disconnect()
            await reader_client.disconnect()
    
    async def _get_latest_code(self, client: TelegramClient) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ–º –ü–û–°–õ–ï–î–ù–ò–ô –∫–æ–¥ –∏–∑ Telegram Service"""
        try:
            entity = await client.get_entity(777000)
            
            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
            async for message in client.iter_messages(entity, limit=10):
                if not message.message:
                    continue
                
                code = self._extract_code(message.message)
                if code:
                    logger.debug(f"üì± –ù–∞–π–¥–µ–Ω –∫–æ–¥: {code} –æ—Ç {message.date}")
                    return code
            
            return None
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            return None
    
    def _extract_code(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text or "login code" not in text.lower():
            return None
        
        match = re.search(r'Login code:\s*(\d{5,6})', text, re.IGNORECASE)
        
        if match:
            code = match.group(1)
            if code.isdigit() and 4 <= len(code) <= 6:
                return code
        
        return None
    
    async def _check_session(self, session_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é"""
        try:
            client = TelegramClient(session_name, self.api_id, self.api_hash)
            await client.connect()
            
            is_auth = await client.is_user_authorized()
            await client.disconnect()
            return is_auth
            
        except Exception:
            return False
    
    def _try_restore_reader_session(self) -> bool:
        """–ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å reader —Å–µ—Å—Å–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            import base64
            
            # –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å base64 –¥–∞–Ω–Ω—ã–º–∏
            env_var = 'GHOST_READER_SESSION_B64'
            session_data_b64 = os.getenv(env_var)
            
            logger.info(f"üîç –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {env_var}...")
            if not session_data_b64:
                logger.warning(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {env_var} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
                return False
            
            logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {env_var} –Ω–∞–π–¥–µ–Ω–∞! –†–∞–∑–º–µ—Ä: {len(session_data_b64)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º reader —Å–µ—Å—Å–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            session_data = base64.b64decode(session_data_b64)
            logger.info(f"‚úÖ Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {len(session_data)} –±–∞–π—Ç")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            session_file = f'{self.reader_session}.session'
            logger.info(f"üìÅ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª: {session_file}")
            with open(session_file, 'wb') as f:
                f.write(session_data)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            os.chmod(session_file, 0o600)
            
            logger.info(f"‚úÖ Reader —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {len(session_data)} –±–∞–π—Ç")
            return True
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è reader —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    async def _fallback_auth_process(self, target_client: TelegramClient) -> bool:
        """Fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ë–ï–ó reader —Å–µ—Å—Å–∏–∏"""
        logger.info("üÜò FALLBACK: –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±–µ–∑ reader —Å–µ—Å—Å–∏–∏")
        
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥
            logger.info("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞...")
            await target_client.send_code_request(self.phone)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞–º—É target —Å–µ—Å—Å–∏—é –¥–ª—è —á—Ç–µ–Ω–∏—è
            await asyncio.sleep(3)
            
            # –ï—Å–ª–∏ target —Å–µ—Å—Å–∏—è —Ö–æ—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞, –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–∏—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—ë
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π reader –∏–∑ target...")
            
            # –ü—Ä–æ—Å—Ç–æ–π fallback - –ø—Ä–æ—Å–∏–º –∫–æ–¥ –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            logger.error("‚ö†Ô∏è –ù–£–ñ–ï–ù READER SESSION!")
            logger.error("‚ö†Ô∏è –°–æ–∑–¥–∞–π—Ç–µ ghost_code_reader.session –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            logger.error("‚ö†Ô∏è –ò–ª–∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤")
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Fallback –æ—à–∏–±–∫–∞: {e}")
            return False


async def working_auth_session(session_name: str) -> bool:
    """–†–∞–±–æ—á–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    auth = WorkingAutoAuth()
    return await auth.auto_auth(session_name)


if __name__ == "__main__":
    import sys
    
    session_name = sys.argv[1] if len(sys.argv) > 1 else 'test_working_session'
    
    async def main():
        print("üí™ –†–ê–ë–û–ß–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
        print("=" * 50)
        
        success = await working_auth_session(session_name)
        
        if success:
            print(f"\nüéâ –£–°–ü–ï–•! {session_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞!")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {session_name}")
        
        print("=" * 50)
    
    asyncio.run(main())
