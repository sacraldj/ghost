#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π live —Å–∏—Å—Ç–µ–º—ã –¥–ª—è unified signal processing
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ChannelManager + UnifiedParser + LiveProcessor + Supabase
"""

import asyncio
import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from core.live_signal_processor import LiveSignalProcessor, get_live_processor
from signals.unified_signal_system import get_unified_parser, test_unified_parser
from core.channel_manager import ChannelManager
from signals.ai_fallback_parser import get_ai_parser
from core.candle_websocket import get_candle_collector, CandleData
from core.signal_analyzer import get_signal_analyzer, SignalAnalysis
from supabase import create_client, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/live_system.log', mode='a')
    ]
)
logger = logging.getLogger(__name__)

class LiveSystemOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π live —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        supabase_url = os.getenv("NEXT_PUBLIC_SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        
        self.supabase = None
        if supabase_url and supabase_key:
            try:
                self.supabase = create_client(supabase_url, supabase_key)
                print("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
                print("üîÑ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
                self.supabase = None
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.live_processor = get_live_processor()
        self.unified_parser = get_unified_parser()
        self.ai_parser = get_ai_parser()
        self.channel_manager = ChannelManager()
        
        # –ù–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –¥–ª—è —á–µ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∫ —É –î–∞—Ä–µ–Ω–∞
        self.candle_collector = get_candle_collector(self.supabase) if self.supabase else None
        self.signal_analyzer = get_signal_analyzer(self.supabase) if self.supabase else None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        self.system_stats = {
            "started_at": None,
            "uptime_seconds": 0,
            "total_messages": 0,
            "total_signals": 0,
            "analyzed_signals": 0,
            "live_candles": 0,
            "components_status": {}
        }
        
        logger.info("Live System Orchestrator initialized with full analysis stack")
    
    async def check_prerequisites(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        logger.info("üîç Checking system prerequisites...")
        
        issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_env_vars = [
            "NEXT_PUBLIC_SUPABASE_URL",
            "SUPABASE_SERVICE_ROLE_KEY"
        ]
        
        for var in required_env_vars:
            if not os.getenv(var):
                issues.append(f"Missing environment variable: {var}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
        if self.live_processor.supabase is None:
            issues.append("Supabase client not initialized")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        active_sources = self.channel_manager.get_active_sources()
        if not active_sources:
            issues.append("No active signal sources configured")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–µ—Ä—ã
        parser_stats = self.unified_parser.get_stats()
        if not parser_stats:
            issues.append("Unified parser not properly initialized")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        ai_availability = self.ai_parser.is_available()
        if not ai_availability["any_available"]:
            logger.warning("‚ö†Ô∏è No AI parsers available (OpenAI/Gemini not configured)")
        
        if issues:
            logger.error("‚ùå Prerequisites check failed:")
            for issue in issues:
                logger.error(f"   ‚Ä¢ {issue}")
            return False
        
        logger.info("‚úÖ All prerequisites satisfied")
        return True
    
    async def start_system(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ STARTING GHOST LIVE SIGNAL SYSTEM")
        logger.info("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if not await self.check_prerequisites():
            logger.error("‚ùå Cannot start system - prerequisites not met")
            return False
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
            self.system_stats["started_at"] = datetime.now()
            
            # 1. –ó–∞–ø—É—Å–∫–∞–µ–º live processor
            logger.info("üìä Starting Live Signal Processor...")
            await self.live_processor.start_processing()
            self.system_stats["components_status"]["live_processor"] = "running"
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º Live Candle Collector (–∫–∞–∫ —É –î–∞—Ä–µ–Ω–∞)
            logger.info("üìà Starting Live Candle Collector...")
            await self.candle_collector.start()
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            popular_symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "XRPUSDT", "SOLUSDT"]
            for symbol in popular_symbols:
                await self.candle_collector.subscribe_to_symbol(symbol, ["1m", "5m"])
            
            self.system_stats["components_status"]["candle_collector"] = "running"
            
            # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Signal Analyzer callbacks
            logger.info("üéØ Setting up Signal Analysis callbacks...")
            self._setup_signal_analysis_callbacks()
            self.system_stats["components_status"]["signal_analyzer"] = "running"
            
            # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
            logger.info("üìà Starting System Monitor...")
            asyncio.create_task(self._monitor_system())
            self.system_stats["components_status"]["system_monitor"] = "running"
            
            # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            logger.info("‚è∞ Starting Periodic Tasks...")
            asyncio.create_task(self._periodic_tasks())
            self.system_stats["components_status"]["periodic_tasks"] = "running"
            
            logger.info("‚úÖ LIVE SYSTEM STARTED SUCCESSFULLY!")
            logger.info("üîç Monitoring active sources:")
            
            for source in self.channel_manager.get_active_sources():
                logger.info(f"   üì° {source.name} ({source.source_type})")
            
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–∞–±–æ—Ç–µ
            await self._keep_running()
            
        except Exception as e:
            logger.error(f"‚ùå Error starting system: {e}")
            return False
    
    def _setup_signal_analysis_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
            async def on_new_candle(candle: CandleData):
                self.system_stats["live_candles"] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                if self.supabase:
                    result = self.supabase.table("signals_parsed") \
                        .select("signal_id, trader_id") \
                        .eq("symbol", candle.symbol) \
                        .eq("is_active", True) \
                        .execute()
                    
                    active_signals = result.data or []
                    
                    if active_signals:
                        logger.debug(f"üìä New candle for {len(active_signals)} active signals: {candle.symbol} @ {candle.close_price}")
            
            # Callback –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            async def on_new_signal(signal_data: dict):
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –∫–∞–∫ —É –î–∞—Ä–µ–Ω–∞
                    analysis = await self.signal_analyzer.analyze_signal(signal_data)
                    self.system_stats["analyzed_signals"] += 1
                    
                    logger.info(f"üéØ Signal analyzed: {analysis.signal_id}")
                    logger.info(f"   TP1 Probability: {analysis.tp1_probability}%")
                    logger.info(f"   Confidence: {analysis.confidence_score}")
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–≤–µ—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
                    await self.candle_collector.subscribe_to_symbol(signal_data.get("symbol", ""), ["1m"])
                    
                except Exception as e:
                    logger.error(f"‚ùå Error analyzing signal: {e}")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callbacks
            self.candle_collector.add_callback(on_new_candle)
            
            # –ó–¥–µ—Å—å –±—ã –¥–æ–±–∞–≤–∏—Ç—å callback –≤ live_processor –¥–ª—è –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            # self.live_processor.add_signal_callback(on_new_signal)
            
            logger.info("‚úÖ Signal analysis callbacks configured")
            
        except Exception as e:
            logger.error(f"‚ùå Error setting up signal analysis callbacks: {e}")
    
    async def _monitor_system(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        while True:
            try:
                await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                # –û–±–Ω–æ–≤–ª—è–µ–º uptime
                if self.system_stats["started_at"]:
                    uptime = datetime.now() - self.system_stats["started_at"]
                    self.system_stats["uptime_seconds"] = int(uptime.total_seconds())
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                processor_stats = self.live_processor.get_stats()
                parser_stats = self.unified_parser.get_stats()
                ai_stats = self.ai_parser.get_ai_stats()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.system_stats["total_messages"] = processor_stats.get("messages_received", 0)
                self.system_stats["total_signals"] = processor_stats.get("signals_parsed", 0)
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                logger.info(f"üìä System Status - Uptime: {self.system_stats['uptime_seconds']}s, Messages: {self.system_stats['total_messages']}, Signals: {self.system_stats['total_signals']}")
                
            except Exception as e:
                logger.error(f"‚ùå Error in system monitor: {e}")
    
    async def _periodic_tasks(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        while True:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–æ–≤
                await self._update_parser_statistics()
                
                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
                await self._health_check()
                
                # 3. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–∞–∑ –≤ —á–∞—Å)
                current_minute = datetime.now().minute
                if current_minute == 0:  # –ö–∞–∂–¥—ã–π —á–∞—Å
                    await self._cleanup_old_data()
                
            except Exception as e:
                logger.error(f"‚ùå Error in periodic tasks: {e}")
    
    async def _update_parser_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤"""
        try:
            parser_stats = self.unified_parser.get_stats()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –µ—Å–ª–∏ –µ—Å—Ç—å Supabase
            if self.live_processor.supabase:
                stats_data = {
                    "parser_type": "unified_system",
                    "date": datetime.now().date().isoformat(),
                    "total_attempts": parser_stats.get("total_signals", 0),
                    "successful_parses": parser_stats.get("parsed_by_rules", 0) + parser_stats.get("parsed_by_ai", 0),
                    "failed_parses": parser_stats.get("failed_parsing", 0),
                    "ai_fallback_used": parser_stats.get("parsed_by_ai", 0),
                    "avg_confidence": parser_stats.get("avg_confidence", 0),
                    "sources_processed": [],
                    "traders_detected": []
                }
                
                # Upsert —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                result = self.live_processor.supabase.table("parser_stats").upsert(
                    stats_data,
                    on_conflict="parser_type,date"
                ).execute()
                
                logger.debug("üìä Parser statistics updated")
                
        except Exception as e:
            logger.error(f"‚ùå Error updating parser statistics: {e}")
    
    async def _health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_status = {
                "live_processor": "healthy",
                "unified_parser": "healthy", 
                "ai_parser": "healthy",
                "channel_manager": "healthy",
                "supabase": "healthy"
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            try:
                processor_stats = self.live_processor.get_stats()
                if processor_stats.get("errors", 0) > 100:  # –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
                    health_status["live_processor"] = "degraded"
            except:
                health_status["live_processor"] = "unhealthy"
            
            try:
                ai_availability = self.ai_parser.is_available()
                if not ai_availability["any_available"]:
                    health_status["ai_parser"] = "unavailable"
            except:
                health_status["ai_parser"] = "unhealthy"
            
            try:
                if not self.live_processor.supabase:
                    health_status["supabase"] = "unavailable"
            except:
                health_status["supabase"] = "unhealthy"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            unhealthy_components = [k for k, v in health_status.items() if v != "healthy"]
            if unhealthy_components:
                logger.warning(f"‚ö†Ô∏è Health issues detected: {unhealthy_components}")
            
        except Exception as e:
            logger.error(f"‚ùå Error in health check: {e}")
    
    async def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üßπ Running cleanup tasks...")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –≤ live processor
            cache_size = len(self.live_processor.processed_messages)
            if cache_size > 5000:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2500
                recent_messages = list(self.live_processor.processed_messages)[-2500:]
                self.live_processor.processed_messages = set(recent_messages)
                logger.info(f"üßπ Cleaned message cache: {cache_size} -> {len(recent_messages)}")
            
        except Exception as e:
            logger.error(f"‚ùå Error in cleanup: {e}")
    
    async def _keep_running(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            while True:
                await asyncio.sleep(30)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
                if not all(status == "running" for status in self.system_stats["components_status"].values()):
                    logger.warning("‚ö†Ô∏è Some components not running properly")
                
        except KeyboardInterrupt:
            logger.info("üì¢ Received shutdown signal")
            await self.stop_system()
        except Exception as e:
            logger.error(f"‚ùå Error in main loop: {e}")
            await self.stop_system()
    
    async def stop_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë Stopping Live Signal System...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º live processor
            await self.live_processor.stop_processing()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.live_processor.supabase:
                final_stats = {
                    "timestamp": datetime.now().isoformat(),
                    "component": "system_shutdown",
                    "stats": self.system_stats,
                    "active_sources": len(self.channel_manager.get_active_sources()),
                    "recent_traders": len(self.live_processor.recent_signals)
                }
                
                if self.supabase:
                    try:
                        self.supabase.table("system_stats").insert(final_stats).execute()
                        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                else:
                    print("‚ÑπÔ∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            logger.info("‚úÖ System stopped gracefully")
            
        except Exception as e:
            logger.error(f"‚ùå Error stopping system: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ GHOST LIVE SIGNAL SYSTEM")
    print("=" * 60)
    print("üöÄ Unified Signal Processing with AI Fallback")
    print("üì± Telegram + Discord + RSS Integration") 
    print("ü§ñ OpenAI + Gemini AI Parsing")
    print("üìä Real-time Statistics & Monitoring")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º orchestrator
    orchestrator = LiveSystemOrchestrator()
    
    try:
        await orchestrator.start_system()
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
    except Exception as e:
        print(f"\n‚ùå Fatal error: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("logs", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
