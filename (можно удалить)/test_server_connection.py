#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –î–∞—Ä—ç–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import paramiko
import sqlite3
import os
from datetime import datetime

def test_connection():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"""
    
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –î–∞—Ä—ç–Ω–∞...")
    
    hostname = "138.199.226.247"
    username = "root"
    password = "Twiister1"
    remote_db_path = "/root/ghost_system_final/ghost_system_final_146/ghost.db"
    
    try:
        # SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {hostname}...")
        ssh.connect(hostname, username=username, password=password, timeout=10)
        print("‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        stdin, stdout, stderr = ssh.exec_command("ls -la /root/ghost_system_final/ghost_system_final_146/")
        files = stdout.read().decode()
        
        if "ghost.db" in files:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ghost.db –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            stdin, stdout, stderr = ssh.exec_command(f"ls -lh {remote_db_path}")
            file_info = stdout.read().decode()
            print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file_info.strip()}")
            
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ghost.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            print(files)
            return False
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        local_db_path = "./ghost_server_real.db"
        
        sftp = ssh.open_sftp()
        sftp.get(remote_db_path, local_db_path)
        sftp.close()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞—á–∞–Ω–∞: {local_db_path}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
        with sqlite3.connect(local_db_path) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã trades
            cursor.execute("PRAGMA table_info(trades)")
            columns = cursor.fetchall()
            print(f"üìã –ö–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ trades: {len(columns)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            print("üè∑Ô∏è  –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
            for col in columns[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –∫–æ–ª–æ–Ω–æ–∫
                print(f"  ‚Ä¢ {col[1]} ({col[2]})")
            
            if len(columns) > 10:
                print(f"  ... –∏ –µ—â–µ {len(columns) - 10} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –°—á–∏—Ç–∞–µ–º —Ç—Ä–µ–π–¥—ã
            cursor.execute("SELECT COUNT(*) FROM trades")
            total_trades = cursor.fetchone()[0]
            print(f"\nüìà –í—Å–µ–≥–æ —Ç—Ä–µ–π–¥–æ–≤: {total_trades}")
            
            if total_trades > 0:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–µ–π–¥–∞
                cursor.execute("""
                    SELECT symbol, side, entry_price, opened_at 
                    FROM trades 
                    WHERE symbol IS NOT NULL
                    ORDER BY opened_at DESC 
                    LIMIT 3
                """)
                recent_trades = cursor.fetchall()
                
                print("üî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–π–¥—ã:")
                for trade in recent_trades:
                    symbol, side, price, time = trade
                    print(f"  ‚Ä¢ {symbol} {side} @ {price} ({time})")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                cursor.execute("""
                    SELECT symbol, COUNT(*) as count 
                    FROM trades 
                    WHERE symbol IS NOT NULL
                    GROUP BY symbol 
                    ORDER BY count DESC 
                    LIMIT 5
                """)
                symbols = cursor.fetchall()
                
                print("\nüìä –¢–æ–ø —Å–∏–º–≤–æ–ª—ã:")
                for symbol, count in symbols:
                    print(f"  ‚Ä¢ {symbol}: {count} —Ç—Ä–µ–π–¥–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        print(f"\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API...")
        create_test_api_data(local_db_path)
        
        ssh.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def create_test_api_data(db_path):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î"""
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–π–¥—ã
            cursor.execute("""
                SELECT 
                    id, symbol, side, entry_price, exit_price,
                    pnl_net, roi_percent, opened_at, closed_at
                FROM trades 
                WHERE symbol IS NOT NULL
                ORDER BY opened_at DESC 
                LIMIT 10
            """)
            trades = cursor.fetchall()
            
            # –°–æ–∑–¥–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
            api_data = []
            for trade in trades:
                trade_data = {
                    "trade_id": trade[0],
                    "symbol": trade[1],
                    "side": trade[2],
                    "entry_price": trade[3],
                    "exit_price": trade[4],
                    "pnl": trade[5],
                    "roi": trade[6],
                    "opened_at": trade[7],
                    "closed_at": trade[8],
                    "synced_at": datetime.now().isoformat()
                }
                api_data.append(trade_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
            import json
            os.makedirs("news_engine/output", exist_ok=True)
            
            with open("news_engine/output/real_trades.json", "w") as f:
                json.dump(api_data, f, indent=2, default=str)
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(api_data)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è API")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ GHOST - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –î–∞—Ä—ç–Ω–∞")
    print("=" * 50)
    
    success = test_connection()
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Supabase –∫–ª—é—á–∏")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

if __name__ == "__main__":
    main()
