"""
GHOST Live Candle WebSocket Collector
–°–æ–±–∏—Ä–∞–µ—Ç live —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ WebSocket –∫–∞–∫ —É –î–∞—Ä–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import json
import websockets
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, asdict
import aiohttp
from supabase import create_client, Client

logger = logging.getLogger(__name__)

@dataclass
class CandleData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤–µ—á–∏"""
    symbol: str
    timeframe: str
    open_time: datetime
    close_time: datetime
    open_price: float
    high_price: float
    low_price: float
    close_price: float
    volume: float
    trades_count: int
    vwap: Optional[float] = None

class LiveCandleCollector:
    """–°–±–æ—Ä—â–∏–∫ live —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ WebSocket"""
    
    def __init__(self, supabase_client: Optional[Client] = None):
        self.supabase = supabase_client
        self.active_subscriptions: Dict[str, Dict[str, Any]] = {}
        self.callback_handlers: List[Callable] = []
        self.is_running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
        self.bybit_ws_url = "wss://stream.bybit.com/v5/public/spot"
        self.binance_ws_url = "wss://stream.binance.com:9443/ws/"
        
        # –ë—É—Ñ–µ—Ä –¥–ª—è —Å–≤–µ—á–µ–π
        self.candle_buffer: Dict[str, CandleData] = {}
        
        logger.info("Live Candle Collector initialized")
    
    def add_callback(self, callback: Callable[[CandleData], None]):
        """–î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π"""
        self.callback_handlers.append(callback)
    
    async def subscribe_to_symbol(self, symbol: str, timeframes: List[str] = ["1m", "5m", "15m"]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ live —Å–≤–µ—á–∏ —Å–∏–º–≤–æ–ª–∞"""
        try:
            normalized_symbol = symbol.upper()
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Bybit (Binance –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω HTTP 451)
            await self._subscribe_bybit(normalized_symbol, timeframes)
            
            logger.info(f"‚úÖ Subscribed to {normalized_symbol} on Bybit, timeframes: {timeframes}")
            
        except Exception as e:
            logger.error(f"‚ùå Error subscribing to {symbol}: {e}")
    
    async def _subscribe_bybit(self, symbol: str, timeframes: List[str]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Bybit WebSocket"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            task = asyncio.create_task(self._bybit_websocket_handler(symbol, timeframes))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription_key = f"bybit_{symbol}"
            self.active_subscriptions[subscription_key] = {
                "exchange": "bybit",
                "symbol": symbol,
                "timeframes": timeframes,
                "task": task,
                "status": "connecting"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error setting up Bybit subscription for {symbol}: {e}")
    
    async def _bybit_websocket_handler(self, symbol: str, timeframes: List[str]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Bybit WebSocket"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
            topics = [f"kline.{tf}.{symbol}" for tf in timeframes]
            subscribe_message = {
                "op": "subscribe",
                "args": topics
            }
            
            async with websockets.connect(self.bybit_ws_url) as websocket:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                await websocket.send(json.dumps(subscribe_message))
                logger.info(f"üì° Bybit WebSocket connected for {symbol}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                subscription_key = f"bybit_{symbol}"
                if subscription_key in self.active_subscriptions:
                    self.active_subscriptions[subscription_key]["status"] = "connected"
                
                # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                async for message in websocket:
                    try:
                        data = json.loads(message)
                        await self._process_bybit_message(data, symbol)
                    except Exception as e:
                        logger.error(f"‚ùå Error processing Bybit message: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå Bybit WebSocket error for {symbol}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            subscription_key = f"bybit_{symbol}"
            if subscription_key in self.active_subscriptions:
                self.active_subscriptions[subscription_key]["status"] = "error"
    
    async def _process_bybit_message(self, data: Dict[str, Any], symbol: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Bybit"""
        try:
            if data.get("topic", "").startswith("kline"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
                kline_data = data.get("data", [])
                
                for kline in kline_data:
                    candle = await self._parse_bybit_candle(kline, symbol)
                    if candle:
                        await self._process_new_candle(candle)
                        
        except Exception as e:
            logger.error(f"‚ùå Error processing Bybit message: {e}")
    
    async def _parse_bybit_candle(self, kline: Dict[str, Any], symbol: str) -> Optional[CandleData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–≤–µ—á–∏ –æ—Ç Bybit"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timeframe –∏–∑ topic
            timeframe = kline.get("interval", "1m")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp
            open_time = datetime.fromtimestamp(int(kline["start"]) / 1000)
            close_time = datetime.fromtimestamp(int(kline["end"]) / 1000)
            
            return CandleData(
                symbol=symbol,
                timeframe=timeframe,
                open_time=open_time,
                close_time=close_time,
                open_price=float(kline["open"]),
                high_price=float(kline["high"]),
                low_price=float(kline["low"]),
                close_price=float(kline["close"]),
                volume=float(kline["volume"]),
                trades_count=int(kline.get("count", 0))
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error parsing Bybit candle: {e}")
            return None
    
    async def _subscribe_binance(self, symbol: str, timeframes: List[str]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Binance WebSocket (—Ä–µ–∑–µ—Ä–≤)"""
        try:
            # Binance –∏—Å–ø–æ–ª—å–∑—É–µ—Ç lowercase
            binance_symbol = symbol.lower()
            
            task = asyncio.create_task(self._binance_websocket_handler(binance_symbol, timeframes))
            
            subscription_key = f"binance_{symbol}"
            self.active_subscriptions[subscription_key] = {
                "exchange": "binance",
                "symbol": symbol,
                "timeframes": timeframes,
                "task": task,
                "status": "connecting"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error setting up Binance subscription for {symbol}: {e}")
    
    async def _binance_websocket_handler(self, symbol: str, timeframes: List[str]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Binance WebSocket"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º streams –¥–ª—è Binance
            streams = [f"{symbol}@kline_{tf}" for tf in timeframes]
            stream_url = f"{self.binance_ws_url}{'/'.join(streams)}"
            
            async with websockets.connect(stream_url) as websocket:
                logger.info(f"üì° Binance WebSocket connected for {symbol}")
                
                subscription_key = f"binance_{symbol.upper()}"
                if subscription_key in self.active_subscriptions:
                    self.active_subscriptions[subscription_key]["status"] = "connected"
                
                async for message in websocket:
                    try:
                        data = json.loads(message)
                        await self._process_binance_message(data, symbol.upper())
                    except Exception as e:
                        logger.error(f"‚ùå Error processing Binance message: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå Binance WebSocket error for {symbol}: {e}")
            
            subscription_key = f"binance_{symbol.upper()}"
            if subscription_key in self.active_subscriptions:
                self.active_subscriptions[subscription_key]["status"] = "error"
    
    async def _process_binance_message(self, data: Dict[str, Any], symbol: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Binance"""
        try:
            if "k" in data:  # Kline data
                kline = data["k"]
                
                candle = await self._parse_binance_candle(kline, symbol)
                if candle:
                    await self._process_new_candle(candle)
                    
        except Exception as e:
            logger.error(f"‚ùå Error processing Binance message: {e}")
    
    async def _parse_binance_candle(self, kline: Dict[str, Any], symbol: str) -> Optional[CandleData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–≤–µ—á–∏ –æ—Ç Binance"""
        try:
            open_time = datetime.fromtimestamp(int(kline["t"]) / 1000)
            close_time = datetime.fromtimestamp(int(kline["T"]) / 1000)
            
            return CandleData(
                symbol=symbol,
                timeframe=kline["i"],  # interval
                open_time=open_time,
                close_time=close_time,
                open_price=float(kline["o"]),
                high_price=float(kline["h"]),
                low_price=float(kline["l"]),
                close_price=float(kline["c"]),
                volume=float(kline["v"]),
                trades_count=int(kline["n"])
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error parsing Binance candle: {e}")
            return None
    
    async def _process_new_candle(self, candle: CandleData):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å–≤–µ—á–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–≤–µ—á–∏
            candle_key = f"{candle.symbol}_{candle.timeframe}_{candle.open_time.isoformat()}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä
            self.candle_buffer[candle_key] = candle
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            if self.supabase:
                await self._save_candle_to_db(candle)
            
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.callback_handlers:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(candle)
                    else:
                        callback(candle)
                except Exception as e:
                    logger.error(f"‚ùå Error in callback: {e}")
            
            logger.debug(f"üìä New candle: {candle.symbol} {candle.timeframe} @ {candle.close_price}")
            
        except Exception as e:
            logger.error(f"‚ùå Error processing new candle: {e}")
    
    async def _save_candle_to_db(self, candle: CandleData):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            candle_data = {
                "symbol": candle.symbol,
                "timeframe": candle.timeframe,
                "open_time": candle.open_time.isoformat(),
                "open_price": candle.open_price,
                "high_price": candle.high_price,
                "low_price": candle.low_price,
                "close_price": candle.close_price,
                "volume": candle.volume,
                "trades_count": candle.trades_count,
                "vwap": candle.vwap,
                "updated_at": datetime.now().isoformat()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π
            result = self.supabase.table("trader_candles").upsert(
                candle_data,
                on_conflict="symbol,timeframe,open_time"
            ).execute()
            
            if result.data:
                logger.debug(f"üíæ Candle saved: {candle.symbol} {candle.timeframe}")
            
        except Exception as e:
            logger.error(f"‚ùå Error saving candle to DB: {e}")
    
    async def get_recent_candles(self, symbol: str, timeframe: str = "1m", limit: int = 100) -> List[CandleData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –∏–∑ –±–∞–∑—ã"""
        try:
            if not self.supabase:
                return []
            
            result = self.supabase.table("trader_candles") \
                .select("*") \
                .eq("symbol", symbol) \
                .eq("timeframe", timeframe) \
                .order("open_time", desc=True) \
                .limit(limit) \
                .execute()
            
            candles = []
            for row in result.data:
                candle = CandleData(
                    symbol=row["symbol"],
                    timeframe=row["timeframe"],
                    open_time=datetime.fromisoformat(row["open_time"]),
                    close_time=datetime.fromisoformat(row["open_time"]) + timedelta(minutes=1),  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
                    open_price=float(row["open_price"]),
                    high_price=float(row["high_price"]),
                    low_price=float(row["low_price"]),
                    close_price=float(row["close_price"]),
                    volume=float(row["volume"]),
                    trades_count=int(row["trades_count"]),
                    vwap=float(row["vwap"]) if row["vwap"] else None
                )
                candles.append(candle)
            
            return candles
            
        except Exception as e:
            logger.error(f"‚ùå Error getting recent candles: {e}")
            return []
    
    def get_subscription_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        status = {
            "total_subscriptions": len(self.active_subscriptions),
            "active_subscriptions": 0,
            "error_subscriptions": 0,
            "connecting_subscriptions": 0,
            "subscriptions": {}
        }
        
        for key, sub in self.active_subscriptions.items():
            status["subscriptions"][key] = {
                "exchange": sub["exchange"],
                "symbol": sub["symbol"],
                "timeframes": sub["timeframes"],
                "status": sub["status"]
            }
            
            if sub["status"] == "connected":
                status["active_subscriptions"] += 1
            elif sub["status"] == "error":
                status["error_subscriptions"] += 1
            elif sub["status"] == "connecting":
                status["connecting_subscriptions"] += 1
        
        return status
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ —Å–≤–µ—á–µ–π"""
        self.is_running = True
        logger.info("üöÄ Live Candle Collector started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ —Å–≤–µ—á–µ–π"""
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for key, subscription in self.active_subscriptions.items():
            try:
                if "task" in subscription:
                    subscription["task"].cancel()
            except Exception as e:
                logger.error(f"‚ùå Error stopping subscription {key}: {e}")
        
        self.active_subscriptions.clear()
        logger.info("üõë Live Candle Collector stopped")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
candle_collector = None

def get_candle_collector(supabase_client: Optional[Client] = None) -> LiveCandleCollector:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–±–æ—Ä—â–∏–∫–∞ —Å–≤–µ—á–µ–π"""
    global candle_collector
    if candle_collector is None:
        candle_collector = LiveCandleCollector(supabase_client)
    return candle_collector


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def test_candle_collector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä—â–∏–∫–∞ —Å–≤–µ—á–µ–π"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LIVE CANDLE COLLECTOR")
    print("=" * 60)
    
    collector = get_candle_collector()
    
    # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def on_new_candle(candle: CandleData):
        print(f"üìä New candle: {candle.symbol} {candle.timeframe} @ {candle.close_price}")
    
    collector.add_callback(on_new_candle)
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ BTCUSDT
    await collector.subscribe_to_symbol("BTCUSDT", ["1m"])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    await collector.start()
    
    print("üîÑ Listening for candles for 30 seconds...")
    await asyncio.sleep(30)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    status = collector.get_subscription_status()
    print(f"üìä Subscription status: {status}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    await collector.stop()
    
    print("‚úÖ Test completed!")


if __name__ == "__main__":
    asyncio.run(test_candle_collector())
