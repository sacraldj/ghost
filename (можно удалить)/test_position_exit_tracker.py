# === GHOST-META ===
# üìÇ –ü—É—Ç—å: test_position_exit_tracker.py
# üì¶ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è position_exit_tracker —Å –º–æ–∫–∞–º–∏
# üîí –°—Ç–∞—Ç—É—Å: ‚úÖ —Ç–µ—Å—Ç–æ–≤—ã–π (v2.0)

import json
import sys
import os
from datetime import datetime
from typing import Dict, Any, List, Tuple, Optional

# –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
class MockSession:
    def get_executions(self, **kwargs):
        return {"result": {"list": []}}
    
    def get_closed_pnl(self, **kwargs):
        return {"result": {"list": []}}
    
    def cancel_all_orders(self, **kwargs):
        return {"result": {"list": []}}

class MockTrace:
    def __call__(self, code, data, where):
        print(f"[TRACE] {code}: {data}")

class MockLogQueue:
    def __call__(self, event, message):
        print(f"[LOG] {event}: {message}")

# –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª–∏
sys.modules['pybit.unified_trading'] = type('MockPybit', (), {'HTTP': MockSession})()
sys.modules['core.ghost_bybit_position'] = type('MockCore', (), {'get_position': lambda x: {"size": 0, "lastPrice": 1000}})()
sys.modules['ghost_write_safe'] = type('MockGhost', (), {'ghost_write_safe': lambda x, y: None})()
sys.modules['utils.ghost_trace_logger'] = type('MockUtils', (), {'trace': MockTrace()})()
sys.modules['utils.send_to_queue'] = type('MockQueue', (), {'log_to_queue': MockLogQueue()})()
sys.modules['utils.get_last_fill_price'] = type('MockFill', (), {'get_last_exit_fill_price_safe': lambda x: None})()
sys.modules['leverage_parser'] = type('MockLeverage', (), {'get_leverage': lambda x, **kwargs: 20})()

# –°–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
os.makedirs("config", exist_ok=True)
with open("config/api_keys.yaml", "w") as f:
    f.write("""
bybit:
  api_key: "test_key"
  api_secret: "test_secret"
""")

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
from position_exit_tracker import _signed_profit, _vwap_qty_fee, _split_fills_by_legs, _calc_from_fills, _fallback_calc

def test_signed_profit():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞ PnL —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º _signed_profit...")
    
    # LONG –ø–æ–∑–∏—Ü–∏—è
    assert _signed_profit(1000, 1100, 100, "Buy") == 10000  # +10000
    assert _signed_profit(1000, 900, 100, "Buy") == -10000   # -10000
    
    # SHORT –ø–æ–∑–∏—Ü–∏—è
    assert _signed_profit(1000, 900, 100, "Sell") == 10000   # +10000
    assert _signed_profit(1000, 1100, 100, "Sell") == -10000 # -10000
    
    print("‚úÖ _signed_profit —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_vwap_qty_fee():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞ VWAP, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∫–æ–º–∏—Å—Å–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º _vwap_qty_fee...")
    
    fills = [
        {"execPrice": "1000", "execQty": "50", "execFee": "2.75"},
        {"execPrice": "1100", "execQty": "50", "execFee": "3.025"}
    ]
    
    vwap, qty, fee = _vwap_qty_fee(fills)
    
    assert abs(vwap - 1050) < 0.01  # (1000*50 + 1100*50) / 100 = 1050
    assert qty == 100
    assert abs(fee - 5.775) < 0.01  # 2.75 + 3.025
    
    print("‚úÖ _vwap_qty_fee —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_split_fills_by_legs():
    """–¢–µ—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è fills –Ω–∞ –Ω–æ–≥–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º _split_fills_by_legs...")
    
    # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    fills = [
        {"side": "Sell", "execPrice": "1020", "execQty": "50", "execFee": "2.805", "execTime": "1000"},
        {"side": "Sell", "execPrice": "1000.2", "execQty": "50", "execFee": "2.755", "execTime": "2000"}
    ]
    
    leg_tp1, leg_rest = _split_fills_by_legs(fills, 100, "Buy")
    
    assert len(leg_tp1) == 1
    assert len(leg_rest) == 1
    assert float(leg_tp1[0]["execQty"]) == 50
    assert float(leg_rest[0]["execQty"]) == 50
    
    # –¢–µ—Å—Ç 2: Overfill –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
    fills_overfill = [
        {"side": "Sell", "execPrice": "1020", "execQty": "60", "execFee": "3.366", "execTime": "1000"}
    ]
    
    leg_tp1, leg_rest = _split_fills_by_legs(fills_overfill, 100, "Buy")
    
    assert len(leg_tp1) == 1
    assert len(leg_rest) == 1
    assert float(leg_tp1[0]["execQty"]) == 50
    assert float(leg_rest[0]["execQty"]) == 10
    
    print("‚úÖ _split_fills_by_legs —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_calc_from_fills():
    """–¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ PnL/ROI –Ω–∞ –æ—Å–Ω–æ–≤–µ fills"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º _calc_from_fills...")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞
    trade = {
        "symbol": "BTCUSDT",
        "side": "Buy",
        "real_entry_price": 1000,
        "position_qty": 100,
        "margin_used": 5000,
        "tp2_price": 1100
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ fills
    fills = [
        {"side": "Sell", "execPrice": "1020", "execQty": "50", "execFee": "2.805", "execTime": "1000"},
        {"side": "Sell", "execPrice": "1000.2", "execQty": "50", "execFee": "2.755", "execTime": "2000"}
    ]
    
    result = _calc_from_fills(trade, fills)
    
    assert result["roi_calc_note"] == "ok"
    assert result["roi_source"] == "fills"
    assert result["pnl_source"] == "fills"
    assert result["tp1_hit"] == True
    assert result["tp2_hit"] == False
    assert "tp1@50.0 + be@50.0" in result["exit_detail"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PnL TP1 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, –∞ –æ—Å—Ç–∞—Ç–∫–∞ ‚âà -–∫–æ–º–∏—Å—Å–∏—è
    assert result["pnl_tp1_net"] > 0
    assert abs(result["pnl_rest_net"] + result["bybit_fee_close"]) < 1  # ‚âà -–∫–æ–º–∏—Å—Å–∏—è
    
    print("‚úÖ _calc_from_fills —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_fallback_calc():
    """–¢–µ—Å—Ç fallback —Ä–∞—Å—á—ë—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º _fallback_calc...")
    
    trade = {
        "real_entry_price": 1000,
        "position_qty": 100,
        "margin_used": 5000,
        "tp1_price": 1020,
        "tp2_price": 1100,
        "tp2_hit": False
    }
    
    result = _fallback_calc(trade, 1000.2)
    
    assert result["roi_source"] == "fallback"
    assert result["pnl_source"] == "fallback"
    assert result["roi_calc_note"] == "fallback"
    assert "tp1@50% + be@50%" in result["exit_detail"]
    
    print("‚úÖ _fallback_calc —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏...")
    
    # –ü—É—Å—Ç—ã–µ fills
    trade = {"real_entry_price": 1000, "position_qty": 100, "margin_used": 5000}
    result = _calc_from_fills(trade, [])
    assert result.get("roi_calc_note") == "skip_calc: no closing fills"
    
    # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    trade = {"real_entry_price": 0, "position_qty": 100, "margin_used": 5000}
    result = _calc_from_fills(trade, [])
    assert "missing entry/qty/margin" in result.get("roi_calc_note", "")
    
    # SHORT –ø–æ–∑–∏—Ü–∏—è
    trade = {
        "symbol": "BTCUSDT",
        "side": "Sell",
        "real_entry_price": 1000,
        "position_qty": 100,
        "margin_used": 5000
    }
    fills = [
        {"side": "Buy", "execPrice": "980", "execQty": "50", "execFee": "2.695", "execTime": "1000"},
        {"side": "Buy", "execPrice": "999.8", "execQty": "50", "execFee": "2.749", "execTime": "2000"}
    ]
    
    result = _calc_from_fills(trade, fills)
    assert result["roi_calc_note"] == "ok"
    assert result["pnl_tp1_net"] > 0  # SHORT: (1000 - 980) * 50 - –∫–æ–º–∏—Å—Å–∏–∏
    
    print("‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")

def run_integration_test():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É LONG —Å TP1 –∏ BE
    trade = {
        "symbol": "BTCUSDT",
        "side": "Buy",
        "real_entry_price": 1000,
        "position_qty": 100,
        "margin_used": 5000,
        "tp1_price": 1020,
        "tp2_price": 1100,
        "tp1_hit": True,
        "tp2_hit": False,
        "sl_hit": False
    }
    
    # Fills: TP1 –ø–æ 1020, –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ 1000.2 (BE)
    fills = [
        {"side": "Sell", "execPrice": "1020", "execQty": "50", "execFee": "2.805", "execTime": "1000"},
        {"side": "Sell", "execPrice": "1000.2", "execQty": "50", "execFee": "2.755", "execTime": "2000"}
    ]
    
    result = _calc_from_fills(trade, fills)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert result["exit_reason"] == "tp1_be"
    assert result["tp1_hit"] == True
    assert result["tp2_hit"] == False
    assert result["sl_hit"] == False
    assert "tp1@50.0 + be@50.0" in result["exit_detail"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PnL
    pnl_tp1_expected = (1020 - 1000) * 50 - (1000 * 50 * 0.00055) - (1020 * 50 * 0.00055)
    pnl_rest_expected = (1000.2 - 1000) * 50 - (1000 * 50 * 0.00055) - (1000.2 * 50 * 0.00055)
    
    assert abs(result["pnl_tp1_net"] - pnl_tp1_expected) < 0.01
    assert abs(result["pnl_rest_net"] - pnl_rest_expected) < 0.01
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: TP1 PnL = {result['pnl_tp1_net']:.2f}, Rest PnL = {result['pnl_rest_net']:.2f}")
    print(f"üìà –§–∏–Ω–∞–ª—å–Ω—ã–π ROI = {result['roi_final_real']:.2f}%")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ fills-first –ª–æ–≥–∏–∫–∏ v2.0")
    print("=" * 50)
    
    try:
        test_signed_profit()
        test_vwap_qty_fee()
        test_split_fills_by_legs()
        test_calc_from_fills()
        test_fallback_calc()
        test_edge_cases()
        run_integration_test()
        
        print("=" * 50)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Fills-first –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        raise

if __name__ == "__main__":
    main()
