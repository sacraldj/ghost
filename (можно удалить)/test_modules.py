#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π GHOST —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import subprocess
import traceback
from pathlib import Path

def test_module(name, script_path, working_dir=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
    print(f"\nüß™ Testing module: {name}")
    print(f"   Script: {script_path}")
    print(f"   Working dir: {working_dir or 'current'}")
    
    if not os.path.exists(script_path):
        print(f"‚ùå Script not found: {script_path}")
        return False
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç
        cmd = [sys.executable, "-c", f"import sys; sys.path.append('{os.getcwd()}'); exec(open('{script_path}').read())"]
        
        if working_dir:
            original_cwd = os.getcwd()
            os.chdir(working_dir)
        
        result = subprocess.run(
            [sys.executable, script_path, "--test"], 
            capture_output=True, 
            text=True, 
            timeout=5
        )
        
        if working_dir:
            os.chdir(original_cwd)
        
        if result.returncode == 0:
            print(f"‚úÖ Module {name} - OK")
            return True
        else:
            print(f"‚ùå Module {name} - FAILED")
            print(f"   STDOUT: {result.stdout[:200]}")
            print(f"   STDERR: {result.stderr[:200]}")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ Module {name} - TIMEOUT (this might be normal for listeners)")
        return True
    except Exception as e:
        print(f"‚ùå Module {name} - ERROR: {e}")
        print(f"   Traceback: {traceback.format_exc()[:200]}")
        return False

def main():
    print("üöÄ GHOST Modules Test Suite")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\nüì¶ Checking dependencies...")
    
    try:
        import telethon
        print("‚úÖ telethon - OK")
    except ImportError:
        print("‚ùå telethon - MISSING")
    
    try:
        from supabase import create_client
        print("‚úÖ supabase - OK")
    except ImportError:
        print("‚ùå supabase - MISSING")
    
    try:
        import aiohttp
        print("‚úÖ aiohttp - OK")
    except ImportError:
        print("‚ùå aiohttp - MISSING")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
    modules_to_test = [
        ("news_engine", "news_engine/enhanced_news_engine.py", "news_engine"),
        ("price_feed", "news_engine/price_feed_engine.py", "news_engine"),
        ("telegram_listener", "core/telegram_listener.py", "core"),
        ("signal_processor", "signals/signal_orchestrator_with_supabase.py", None),
    ]
    
    results = {}
    for name, script, working_dir in modules_to_test:
        results[name] = test_module(name, script, working_dir)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä Test Results:")
    print("=" * 30)
    
    for name, success in results.items():
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{name:20} {status}")
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    print(f"\nüéØ Summary: {passed_tests}/{total_tests} modules passed")
    
    if passed_tests == total_tests:
        print("üéâ All modules are ready!")
    else:
        print("‚ö†Ô∏è Some modules need attention")

if __name__ == "__main__":
    main()
