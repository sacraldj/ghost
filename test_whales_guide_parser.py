#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Whales Guide
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –ø–∞—Ä—Å—è—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
"""

import sys
import os
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_whales_guide_parsing():
    print("üß™ –¢–ï–°–¢ –ü–ê–†–°–ï–†–ê WHALES GUIDE")
    print("=" * 60)
    
    try:
        from signals.unified_signal_system import UnifiedSignalParser, SignalSource
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ enums
        class SourceType:
            TELEGRAM_CHANNEL = "telegram_channel"
            
        class SourceStatus:
            ACTIVE = "active"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = UnifiedSignalParser()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ Whales Guide
        test_messages = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            {
                "text": """Longing #BTCUSDT Here

Long (5x - 10x)

Entry: $45000 - $44500

Targets: $46000, $47000, $48000

Stoploss: $43000

Reason: Chart looks bullish with strong support levels""",
                "expected": "trading_signal"
            },
            
            # Spot –ø–æ–∫—É–ø–∫–∞
            {
                "text": """Buying #ETH Here in spot

You can long in 4x leverage, too.

Entry: 2800-2850$

Targets: 2900$, 3000$

Stoploss: 2750$

Reason: Worth buying for quick profits""",
                "expected": "trading_signal"
            },
            
            # –ö–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑
            {
                "text": """#BTC looking bullish here. Strong support at 44k level. Could see a pump to 47k soon.""",
                "expected": "market_analysis"
            },
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –∏ —Å–ª–æ–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            {
                "text": """üöÄ #SOLUSDT 

üìà LONG SIGNAL

üí∞ Entry Zone: $95.50 - $96.20
üéØ TP1: $98.00
üéØ TP2: $100.50  
üéØ TP3: $103.00
üõë SL: $93.80

‚ö° Leverage: 5x-10x
üìä Strong breakout pattern forming""",
                "expected": "trading_signal"
            },
            
            # –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            {
                "text": """–ü–æ–∫—É–ø–∞–µ–º #BTC –∑–¥–µ—Å—å
–í—Ö–æ–¥: 45000-44500
–¶–µ–ª–∏: 46000, 47000
–°—Ç–æ–ø: 43000""",
                "expected": "trading_signal"
            },
            
            # –ù–æ–≤–æ—Å—Ç—å/–∞–Ω–∞–ª–∏–∑
            {
                "text": """Market update: Bitcoin dominance increasing. Alt season might be delayed. Keep an eye on BTC levels.""",
                "expected": None  # –ù–µ –¥–æ–ª–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å—Å—è –∫–∞–∫ —Å–∏–≥–Ω–∞–ª
            },
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º/–≥—Ä–∞—Ñ–∏–∫–æ–º
            {
                "text": """#ETHUSDT Technical Analysis

Looking at the 4H chart, we can see:
- Strong resistance at $2850
- Support holding at $2750  
- RSI showing oversold conditions

Expecting bounce to $2900 level.""",
                "expected": "market_analysis"
            }
        ]
        
        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...\n")
        
        success_count = 0
        total_count = len(test_messages)
        
        for i, test in enumerate(test_messages, 1):
            print(f"üîç –¢–ï–°–¢ {i}:")
            print(f"   –¢–µ–∫—Å—Ç: {test['text'][:80]}...")
            print(f"   –û–∂–∏–¥–∞–µ–º: {test['expected']}")
            
            try:
                # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                unified_signal = await parser.parse_signal(
                    raw_text=test['text'],
                    source=SignalSource.TELEGRAM_WHALESGUIDE,
                    trader_id=f"test_trader_{i}",
                    message_id=f"test_msg_{i}"
                )
                
                if unified_signal:
                    print(f"   ‚úÖ –†–ê–°–ü–û–ó–ù–ê–ù:")
                    print(f"      Symbol: {unified_signal.symbol}")
                    print(f"      Side: {unified_signal.side}")
                    print(f"      Entry Min: {unified_signal.entry_min}")
                    print(f"      Entry Max: {unified_signal.entry_max}")
                    print(f"      Targets: {unified_signal.targets}")
                    print(f"      Stop Loss: {unified_signal.sl}")
                    print(f"      Leverage: {unified_signal.leverage}")
                    print(f"      Type: {getattr(unified_signal, 'message_type', 'unknown')}")
                    print(f"      Confidence: {unified_signal.confidence:.2f}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
                    if test['expected']:
                        success_count += 1
                        print(f"   ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
                    else:
                        print(f"   ‚ö†Ô∏è  –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ –æ–∂–∏–¥–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥, –Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª")
                else:
                    print(f"   ‚ùå –ù–ï –†–ê–°–ü–û–ó–ù–ê–ù")
                    if test['expected']:
                        print(f"   ‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –û–∂–∏–¥–∞–ª–∏ {test['expected']}, –Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                    else:
                        success_count += 1
                        print(f"   ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                
            except Exception as e:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
            
            print()
        
        print("=" * 60)
        print(f"üìà –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)")
        
        if success_count == total_count:
            print("   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        elif success_count >= total_count * 0.8:
            print("   ‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
        else:
            print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞")
        
        return success_count / total_count
        
    except ImportError as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥—É–ª–∏ signals/ –¥–æ—Å—Ç—É–ø–Ω—ã")
        return 0.0
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()
        return 0.0

async def test_current_system_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´:")
    print("-" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from core.live_signal_processor import get_live_processor
        from core.channel_manager import ChannelManager
        from core.telegram_listener import TelegramListener
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        channel_manager = ChannelManager()
        sources = channel_manager.get_active_sources()
        
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
        
        whales_guide = None
        for source in sources:
            if source.source_id == "whales_guide_main":
                whales_guide = source
                break
        
        if whales_guide:
            print(f"‚úÖ Whales Guide –Ω–∞–π–¥–µ–Ω:")
            print(f"   ID: {whales_guide.source_id}")
            print(f"   Parser: {whales_guide.parser_type}")
            print(f"   Active: {whales_guide.is_active}")
            print(f"   Channel ID: {whales_guide.connection_params.get('channel_id', 'N/A')}")
        else:
            print("‚ùå Whales Guide –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        telegram_api_id = os.getenv('TELEGRAM_API_ID')
        telegram_api_hash = os.getenv('TELEGRAM_API_HASH')
        telegram_phone = os.getenv('TELEGRAM_PHONE')
        
        print(f"‚úÖ TELEGRAM_API_ID: {'‚úì' if telegram_api_id else '‚ùå'}")
        print(f"‚úÖ TELEGRAM_API_HASH: {'‚úì' if telegram_api_hash else '‚ùå'}")
        print(f"‚úÖ TELEGRAM_PHONE: {'‚úì' if telegram_phone else '‚ùå'}")
        
    except ImportError as e:
        print(f"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

async def main():
    print("üöÄ GHOST WHALES GUIDE PARSER TEST")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    await test_current_system_status()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    success_rate = await test_whales_guide_parsing()
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if success_rate >= 0.9:
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        print("üì° –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω")
    elif success_rate >= 0.7:
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    else:
        print("‚ö†Ô∏è  –ü–∞—Ä—Å–µ—Ä —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π")
        print("üîß –ù—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    
    print("\nüìñ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ Render –∑–∞–ø—É—â–µ–Ω–∞")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Supabase")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

if __name__ == "__main__":
    asyncio.run(main())
