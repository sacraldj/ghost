#!/usr/bin/env python3
"""
–ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
–ë–µ—Ä–µ–º –°–ê–ú–´–ô –°–í–ï–ñ–ò–ô –∫–æ–¥ –∏–∑ Telegram Service
"""

import asyncio
import os
import re
from datetime import datetime
from telethon import TelegramClient
from telethon.errors import PhoneCodeInvalidError
from dotenv import load_dotenv

load_dotenv()

async def simple_auto_auth():
    api_id = int(os.getenv('TELEGRAM_API_ID'))
    api_hash = os.getenv('TELEGRAM_API_HASH')
    phone = os.getenv('TELEGRAM_PHONE')
    
    reader_session = 'ghost_code_reader'
    target_session = 'test_simple_auth'
    
    print("ü§ñ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
    print("=" * 50)
    
    # –ö–ª–∏–µ–Ω—Ç—ã
    reader_client = TelegramClient(reader_session, api_id, api_hash)
    target_client = TelegramClient(target_session, api_id, api_hash)
    
    try:
        await reader_client.connect()
        await target_client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º reader
        if not await reader_client.is_user_authorized():
            print("‚ùå Reader –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º target
        if await target_client.is_user_authorized():
            print("‚úÖ Target —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return
        
        print("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞...")
        await target_client.send_code_request(phone)
        
        print("‚è∞ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞...")
        await asyncio.sleep(3)
        
        # –ë–µ—Ä–µ–º –°–ê–ú–´–ô –°–í–ï–ñ–ò–ô –∫–æ–¥
        print("üîç –ò—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –∫–æ–¥...")
        entity = await reader_client.get_entity(777000)
        
        latest_code = None
        async for message in reader_client.iter_messages(entity, limit=3):
            if message.message and "Login code:" in message.message:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
                match = re.search(r'Login code:\s*(\d{5,6})', message.message)
                if match:
                    code = match.group(1)
                    print(f"üìÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ {code} –æ—Ç {message.date}")
                    latest_code = code
                    break  # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
        
        if latest_code:
            print(f"üéØ –ü–†–û–ë–£–ï–ú –ö–û–î: {latest_code}")
            try:
                await target_client.sign_in(phone, latest_code)
                me = await target_client.get_me()
                print(f"üéâ –£–°–ü–ï–•! –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name}")
                return True
                
            except PhoneCodeInvalidError:
                print(f"‚ùå –ö–æ–¥ {latest_code} –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫")
                return False
        else:
            print("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    finally:
        await reader_client.disconnect()
        await target_client.disconnect()

if __name__ == "__main__":
    asyncio.run(simple_auto_auth())
