#!/usr/bin/env python3
"""
GHOST Unified Live System Launcher - –£–ü–†–û–©–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ SignalOrchestratorWithSupabase —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º TelegramListener
"""

import asyncio
import logging
import os
import sys
import signal
import threading
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/ghost_simple_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SimpleSystemManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ unified —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.running = True
        self.system_task = None
        self.http_server = None
        
    async def start_live_system(self):
        """–ó–∞–ø—É—Å–∫ live —Å–∏—Å—Ç–µ–º—ã —Å SignalOrchestratorWithSupabase"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ GHOST System —Å Supabase...")
            
            from signals.signal_orchestrator_with_supabase import orchestrator_with_supabase
            logger.info("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º SignalOrchestratorWithSupabase...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
            if await orchestrator_with_supabase.test_supabase_connection():
                logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                test_signal = "üöÄüî• #ALPINE –∑–∞–ø–∞–º–ø–∏–ª–∏ –Ω–∞ +57% —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞"
                result = await orchestrator_with_supabase.process_raw_signal(test_signal, "cryptoattack24", "cryptoattack24")
                
                if result:
                    logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result.symbol}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                stats = await orchestrator_with_supabase.get_stats()
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {stats['signals_processed']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {stats['supabase_saves']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ Telegram
                telegram_started = await orchestrator_with_supabase.start_telegram_listening()
                if telegram_started:
                    logger.info("‚úÖ Telegram –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                else:
                    logger.warning("‚ö†Ô∏è Telegram –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
                await self.run_orchestrator_loop(orchestrator_with_supabase)
            else:
                logger.error("‚ùå Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                raise Exception("Supabase connection failed")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Live System: {e}")
            import traceback
            logger.error(traceback.format_exc())
            raise e
    
    async def run_orchestrator_loop(self, orchestrator):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            logger.info("‚úÖ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ SignalOrchestratorWithSupabase...")
            
            # –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            while self.running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                    stats = await orchestrator.get_stats()
                    
                    if stats['signals_processed'] % 10 == 0 and stats['signals_processed'] > 0:
                        logger.info(
                            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['signals_processed']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, "
                            f"{stats['supabase_saves']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"
                        )
                    
                    # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(30)
                    
                except asyncio.CancelledError:
                    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                    await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    def start_health_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks"""
        try:
            class HealthHandler(BaseHTTPRequestHandler):
                def do_GET(self):
                    if self.path == '/health':
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        response = {'status': 'healthy', 'service': 'ghost-system'}
                        self.wfile.write(str(response).encode('utf-8'))
                    else:
                        self.send_response(404)
                        self.end_headers()
                        
                def log_message(self, format, *args):
                    pass  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_server():
                try:
                    server = HTTPServer(('0.0.0.0', 8080), HealthHandler)
                    server.serve_forever()
                except Exception as e:
                    logger.error(f"Health server error: {e}")
            
            health_thread = threading.Thread(target=run_server, daemon=True)
            health_thread.start()
            
            logger.info("‚úÖ Health server started on port 8080")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ health server: {e}")
    
    async def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ GHOST –°–ò–°–¢–ï–ú–ê - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø")
        logger.info("=" * 60)
        
        try:
            # 1. –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
            self.start_health_server()
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ SignalOrchestratorWithSupabase...")
            self.system_task = asyncio.create_task(self.start_live_system())
            
            logger.info("‚è≥ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            
            # –¶–∏–∫–ª –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render
            while self.running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                    if self.system_task.done():
                        logger.warning("‚ö†Ô∏è System task –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                        self.system_task = asyncio.create_task(self.start_live_system())
                    
                    await asyncio.sleep(30)
                    
                except asyncio.CancelledError:
                    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã...")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    await asyncio.sleep(30)
                    
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    async def shutdown(self):
        """Graceful shutdown"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        
        if self.system_task and not self.system_task.done():
            self.system_task.cancel()
            try:
                await self.system_task
            except asyncio.CancelledError:
                pass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã
manager = SimpleSystemManager()

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    asyncio.create_task(manager.shutdown())

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    await manager.start_all()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
