#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import os
import json
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

try:
    from telethon import TelegramClient
    from supabase import create_client, Client
except ImportError as e:
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon supabase")
    exit(1)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–∏–º –º–æ–¥—É–ª—è–º
sys.path.append('.')
sys.path.append('signals')
sys.path.append('core')

try:
    from signals.unified_signal_system import UnifiedSignalParser, SignalSource
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä: {e}")
    print("–ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥")

class ChannelHistoryParser:
    """–ü–∞—Ä—Å–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        
        # Supabase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
        
        # –ö–ª–∏–µ–Ω—Ç—ã
        self.telegram_client = None
        self.supabase_client = None
        self.signal_parser = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'signals_found': 0,
            'signals_saved': 0,
            'errors': 0,
            'by_channel': {}
        }
        
        # –ö–∞–Ω–∞–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.channels = {
            '-1001263635145': {
                'name': '–ö—Ä–∏–ø—Ç–æ–ê—Ç–∞–∫–∞ 24',
                'trader_id': 'cryptoattack24',
                'parser_type': 'cryptoattack24'
            },
            '-1001288385100': {
                'name': 'Whales Crypto Guide',
                'trader_id': 'whales_guide_main',
                'parser_type': 'whales_crypto_parser'
            }
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        
        # Telegram –∫–ª–∏–µ–Ω—Ç
        self.telegram_client = TelegramClient('ghost_session', self.api_id, self.api_hash)
        await self.telegram_client.start(phone=self.phone)
        
        if not await self.telegram_client.is_user_authorized():
            print("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram")
            return False
        
        # Supabase –∫–ª–∏–µ–Ω—Ç
        self.supabase_client = create_client(self.supabase_url, self.supabase_key)
        
        # –ü–∞—Ä—Å–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        try:
            self.signal_parser = UnifiedSignalParser()
            print("‚úÖ Unified Signal Parser –∑–∞–≥—Ä—É–∂–µ–Ω")
        except:
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥")
            
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
    
    async def parse_channel_history(self, channel_id: str, days_back: int = 7):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞"""
        channel_info = self.channels.get(channel_id)
        if not channel_info:
            print(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        print(f"\nüì° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_info['name']}")
        print(f"   ID: {channel_id}")
        print(f"   Trader: {channel_info['trader_id']}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_back)
        
        print(f"   –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}")
        
        try:
            entity = await self.telegram_client.get_entity(int(channel_id))
            print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É: {entity.title}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–∞
            self.stats['by_channel'][channel_id] = {
                'name': channel_info['name'],
                'messages': 0,
                'signals': 0,
                'saved': 0,
                'errors': 0
            }
            
            message_count = 0
            signals_found = 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            print(f"   üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            async for message in self.telegram_client.iter_messages(
                entity, 
                offset_date=end_date,
                reverse=True,
                limit=1000  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞
            ):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
                if message.date < start_date:
                    continue
                if message.date > end_date:
                    break
                
                message_count += 1
                self.stats['messages_processed'] += 1
                self.stats['by_channel'][channel_id]['messages'] += 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.text:
                    signal_data = await self.process_message(
                        message, 
                        channel_info
                    )
                    
                    if signal_data:
                        signals_found += 1
                        self.stats['signals_found'] += 1
                        self.stats['by_channel'][channel_id]['signals'] += 1
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                        if await self.save_signal_to_db(signal_data, message, channel_info):
                            self.stats['signals_saved'] += 1
                            self.stats['by_channel'][channel_id]['saved'] += 1
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                if message_count % 50 == 0:
                    print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ: {signals_found} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, {signals_found} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            self.stats['errors'] += 1
            if channel_id in self.stats['by_channel']:
                self.stats['by_channel'][channel_id]['errors'] += 1
    
    async def process_message(self, message, channel_info):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.text or ""
            
            # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            signal_keywords = [
                'long', 'short', 'buy', 'sell', 'entry', 'target', 'tp1', 'tp2', 'sl',
                '–∑–∞–ø–∞–º–ø–∏–ª–∏', '–∑–∞–∫—Ä–µ–ø–∏–ª—Å—è', '—Ä–æ—Å—Ç', '–ø–∞–¥–µ–Ω–∏–µ', '—Å–∏–≥–Ω–∞–ª', '–ø–æ–∫—É–ø–∫–∞', '–ø—Ä–æ–¥–∞–∂–∞'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            text_lower = text.lower()
            has_signal_words = any(keyword in text_lower for keyword in signal_keywords)
            
            if not has_signal_words:
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.signal_parser:
                try:
                    signal_source = SignalSource.TELEGRAM
                    parsed = await self.signal_parser.parse_signal(
                        raw_text=text,
                        source=signal_source,
                        trader_id=channel_info['trader_id'],
                        message_id=str(message.id)
                    )
                    
                    if parsed and parsed.status.value != 'rejected':
                        return {
                            'unified_signal': parsed,
                            'raw_text': text,
                            'message_id': message.id,
                            'timestamp': message.date
                        }
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            
            # –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∫ fallback
            return {
                'raw_text': text,
                'message_id': message.id,
                'timestamp': message.date,
                'basic_signal': True
            }
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def save_signal_to_db(self, signal_data, message, channel_info):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è signals_raw
            raw_signal = {
                'signal_id': f"{channel_info['trader_id']}_{message.id}_{int(message.date.timestamp())}",
                'trader_id': channel_info['trader_id'],
                'raw_text': signal_data['raw_text'],
                'posted_at': message.date.isoformat(),
                'source_type': 'telegram',
                'channel_id': str(message.peer_id.channel_id) if hasattr(message.peer_id, 'channel_id') else 'unknown'
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π —Å–∏–≥–Ω–∞–ª
            result = self.supabase_client.table('signals_raw').upsert(raw_signal).execute()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –µ–≥–æ
            if 'unified_signal' in signal_data:
                unified_signal = signal_data['unified_signal']
                
                parsed_signal = {
                    'signal_id': raw_signal['signal_id'],
                    'trader_id': channel_info['trader_id'],
                    'symbol': unified_signal.symbol or 'UNKNOWN',
                    'side': unified_signal.side or 'UNKNOWN',
                    'entry_price': unified_signal.entry_prices[0] if unified_signal.entry_prices else None,
                    'tp1': unified_signal.targets[0] if len(unified_signal.targets) > 0 else None,
                    'tp2': unified_signal.targets[1] if len(unified_signal.targets) > 1 else None,
                    'sl': unified_signal.stop_loss,
                    'confidence': int(unified_signal.confidence * 100) if unified_signal.confidence else 50,
                    'is_valid': unified_signal.status.value != 'rejected',
                    'posted_at': message.date.isoformat()
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                self.supabase_client.table('signals_parsed').upsert(parsed_signal).execute()
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            return False
    
    async def run_full_parsing(self, days_back: int = 7):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –ö–ê–ù–ê–õ–û–í")
        print("=" * 50)
        
        if not await self.initialize():
            return False
        
        print(f"üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(self.channels)}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for channel_id in self.channels:
            await self.parse_channel_history(channel_id, days_back)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['messages_processed']}")
        print(f"   –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {self.stats['signals_found']}")
        print(f"   –°–∏–≥–Ω–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['signals_saved']}")
        print(f"   –û—à–∏–±–æ–∫: {self.stats['errors']}")
        
        print("\nüìã –ü–û –ö–ê–ù–ê–õ–ê–ú:")
        for channel_id, stats in self.stats['by_channel'].items():
            print(f"   {stats['name']}:")
            print(f"     - –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages']}")
            print(f"     - –°–∏–≥–Ω–∞–ª–æ–≤: {stats['signals']}")
            print(f"     - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats['saved']}")
            print(f"     - –û—à–∏–±–æ–∫: {stats['errors']}")
        
        await self.telegram_client.disconnect()
        
        print("\n‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = ChannelHistoryParser()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    success = await parser.run_full_parsing(days_back=7)
    
    if success:
        print("\nüéâ –í—Å–µ –∫–∞–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö - –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–æ–≤")

if __name__ == "__main__":
    asyncio.run(main())
