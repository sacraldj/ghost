#!/usr/bin/env python3
"""
–ü–æ–ª—É—á–µ–Ω–∏–µ ID Telegram –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º
"""

import asyncio
import os
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

try:
    from telethon import TelegramClient
except ImportError:
    print("‚ùå telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
    exit(1)

async def get_channel_ids():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    phone = os.getenv('TELEGRAM_PHONE')
    
    print(f"üîç –ü–æ–∏—Å–∫ ID –∫–∞–Ω–∞–ª–æ–≤...")
    
    if not api_id or not api_hash:
        print("‚ùå TELEGRAM_API_ID –∏–ª–∏ TELEGRAM_API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        return False
        
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = TelegramClient('ghost_session', api_id, api_hash)
        
        print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
        await client.start(phone=phone)
        
        if not await client.is_user_authorized():
            print("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram")
            return False
            
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
        
        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        channels_to_find = [
            "–ö—Ä–∏–ø—Ç–æ–ê—Ç–∞–∫–∞ 24",
            "@cryptoattack24", 
            "Whales Crypto Guide",
            "@Whalesguide",
            "2Trade Premium", 
            "@2trade_slivaem",
            "CoinPulse Signals",
            "@coinpulse_signals",
            "Crypto Hub VIP",
            "@crypto_hub_vip",
            "Slivaem Info",
            "@slivaeminfo"
        ]
        
        print(f"\nüìã –ò—â–µ–º {len(channels_to_find)} –∫–∞–Ω–∞–ª–æ–≤...")
        
        found_channels = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
        print("üì• –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤...")
        async for dialog in client.iter_dialogs(limit=200):
            dialog_name = dialog.name or ""
            dialog_username = getattr(dialog.entity, 'username', None)
            dialog_id = str(dialog.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            for search_term in channels_to_find:
                if search_term.lower() in dialog_name.lower() or \
                   (dialog_username and search_term.lower().replace('@', '') == dialog_username.lower()):
                    
                    found_channels[search_term] = {
                        "id": dialog_id,
                        "name": dialog_name,
                        "username": f"@{dialog_username}" if dialog_username else None,
                        "type": "channel" if dialog.is_channel else "group"
                    }
                    
                    print(f"  ‚úÖ {search_term} ‚Üí ID: {dialog_id} ({dialog_name})")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ username
        print(f"\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ username...")
        usernames_to_search = [
            "cryptoattack24",
            "Whalesguide", 
            "2trade_slivaem",
            "coinpulse_signals",
            "crypto_hub_vip",
            "slivaeminfo"
        ]
        
        for username in usernames_to_search:
            try:
                entity = await client.get_entity(username)
                entity_id = str(entity.id)
                entity_name = getattr(entity, 'title', getattr(entity, 'first_name', username))
                
                if username not in [k.lower().replace('@', '') for k in found_channels.keys()]:
                    found_channels[f"@{username}"] = {
                        "id": entity_id,
                        "name": entity_name,
                        "username": f"@{username}",
                        "type": "channel" if hasattr(entity, 'broadcast') else "group"
                    }
                    print(f"  ‚úÖ @{username} ‚Üí ID: {entity_id} ({entity_name})")
                    
            except Exception as e:
                print(f"  ‚ùå @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(found_channels)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open('found_channel_ids.json', 'w', encoding='utf-8') as f:
            json.dump(found_channels, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ found_channel_ids.json")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        print(f"\nüìã –ù–ê–ô–î–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´:")
        print(f"{'–ù–∞–∑–≤–∞–Ω–∏–µ':<25} {'ID':<20} {'Username':<20}")
        print("-" * 65)
        
        for search_term, info in found_channels.items():
            name = info['name'][:22] + "..." if len(info['name']) > 25 else info['name']
            username = info['username'] or "N/A"
            print(f"{name:<25} {info['id']:<20} {username:<20}")
        
        await client.disconnect()
        return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(get_channel_ids())
    if success:
        print("\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤!")
