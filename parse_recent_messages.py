#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ)
"""

import asyncio
import os
import json
import sys
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

try:
    from telethon import TelegramClient
    from supabase import create_client, Client
except ImportError as e:
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {e}")
    exit(1)

async def parse_recent_messages():
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    phone = os.getenv('TELEGRAM_PHONE')
    
    supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
    
    print("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    client = TelegramClient('ghost_session', api_id, api_hash)
    await client.start(phone=phone)
    
    print("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
    supabase = create_client(supabase_url, supabase_key)
    
    # –ö–∞–Ω–∞–ª—ã
    channels = {
        '-1001263635145': 'cryptoattack24',  # –ö—Ä–∏–ø—Ç–æ–ê—Ç–∞–∫–∞ 24
        '-1001288385100': 'whales_guide_main'  # Whales Crypto Guide
    }
    
    total_messages = 0
    total_signals = 0
    
    for channel_id, trader_id in channels.items():
        print(f"\nüì° –ö–∞–Ω–∞–ª: {channel_id} ({trader_id})")
        
        try:
            entity = await client.get_entity(int(channel_id))
            print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {entity.title}")
            
            message_count = 0
            signal_count = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in client.iter_messages(entity, limit=100):
                message_count += 1
                total_messages += 1
                
                if message.text:
                    text = message.text
                    
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª
                    signal_keywords = [
                        '–∑–∞–ø–∞–º–ø–∏–ª–∏', '–∑–∞–∫—Ä–µ–ø–∏–ª—Å—è', '—Ä–æ—Å—Ç', '—Ç–æ–ø–µ', '–ø–æ–∫—É–ø–∫–∞–º',
                        'long', 'short', 'buy', 'sell', 'entry', 'target', 'tp', 'sl'
                    ]
                    
                    text_lower = text.lower()
                    is_signal = any(keyword in text_lower for keyword in signal_keywords)
                    
                    if is_signal:
                        signal_count += 1
                        total_signals += 1
                        
                        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                        signal_id = f"{trader_id}_{message.id}_{int(message.date.timestamp())}"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π —Å–∏–≥–Ω–∞–ª
                        raw_signal = {
                            'signal_id': signal_id,
                            'trader_id': trader_id,
                            'raw_text': text[:1000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                            'posted_at': message.date.isoformat(),
                            'source_type': 'telegram',
                            'channel_id': channel_id
                        }
                        
                        try:
                            result = supabase.table('signals_raw').upsert(raw_signal).execute()
                            print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal_id}")
                            
                            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è signals_parsed
                            parsed_signal = {
                                'signal_id': signal_id,
                                'trader_id': trader_id,
                                'symbol': 'UNKNOWN',
                                'side': 'UNKNOWN',
                                'confidence': 50,
                                'is_valid': True,
                                'posted_at': message.date.isoformat()
                            }
                            
                            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å–∏–º–≤–æ–ª
                            words = text.upper().split()
                            for word in words:
                                if 'USDT' in word or 'BTC' in word or 'ETH' in word:
                                    parsed_signal['symbol'] = word
                                    break
                            
                            # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                            if any(word in text_lower for word in ['long', 'buy', '–ø–æ–∫—É–ø–∫–∞', '–∑–∞–ø–∞–º–ø–∏–ª–∏']):
                                parsed_signal['side'] = 'BUY'
                            elif any(word in text_lower for word in ['short', 'sell', '–ø—Ä–æ–¥–∞–∂–∞']):
                                parsed_signal['side'] = 'SELL'
                            
                            supabase.table('signals_parsed').upsert(parsed_signal).execute()
                            
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if message_count % 20 == 0:
                    print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {message_count}, –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_count}")
            
            print(f"   ‚úÖ –ò—Ç–æ–≥–æ: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, {signal_count} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
    print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
    
    await client.disconnect()
    print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(parse_recent_messages())
