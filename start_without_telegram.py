#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ GHOST —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ Telegram listener
–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã API –∏ frontend
"""

import asyncio
import logging
import os
import sys
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
from dotenv import load_dotenv

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/ghost_no_telegram.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(b'{"status": "ok", "telegram": "disabled", "api": "active"}')
    
    def log_message(self, format, *args):
        pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞

async def main():
    print("üöÄ GHOST SYSTEM - –ë–ï–ó TELEGRAM")
    print("=" * 50)
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ")
    print("‚ùå Telegram –æ—Ç–∫–ª—é—á–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è email)")
    print("‚úÖ API –∞–∫—Ç–∏–≤–µ–Ω")
    print("‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:3000")
    print("‚úÖ Health check –Ω–∞ http://localhost:8080")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
    server = HTTPServer(('0.0.0.0', 8080), HealthHandler)
    logger.info("üåê Health server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        from signals.signal_orchestrator_with_supabase import orchestrator_with_supabase
        if await orchestrator_with_supabase.test_supabase_connection():
            logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            test_signal = "üöÄ BTCUSDT LONG - Entry: 65000, TP: 67000, SL: 63000"
            result = await orchestrator_with_supabase.process_raw_signal(
                test_signal, "demo_channel", "demo_trader"
            )
            if result:
                logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result.symbol}")
            
            stats = await orchestrator_with_supabase.get_stats()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['signals_processed']} —Å–∏–≥–Ω–∞–ª–æ–≤")
        else:
            logger.warning("‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Supabase: {e}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    try:
        while True:
            logger.info("üíì –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–±–µ–∑ Telegram)")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    finally:
        server.server_close()

if __name__ == "__main__":
    asyncio.run(main())
