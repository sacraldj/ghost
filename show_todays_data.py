#!/usr/bin/env python3
"""
–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ Supabase
"""

import asyncio
import os
import sys
from datetime import datetime
import json

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def show_all_data():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    
    from signals.signal_orchestrator_with_supabase import orchestrator_with_supabase
    
    print("üìä –î–ê–ù–ù–´–ï –ó–ê –°–ï–ì–û–î–ù–Ø –í SUPABASE")
    print("=" * 60)
    
    if not orchestrator_with_supabase.supabase:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")
        return
    
    today = datetime.now().strftime('%Y-%m-%d')
    print(f"üìÖ –î–∞—Ç–∞: {today}")
    print()
    
    try:
        # 1. –°–´–†–´–ï –°–ò–ì–ù–ê–õ–´ (signals_raw)
        print("1Ô∏è‚É£ –°–´–†–´–ï –°–û–û–ë–©–ï–ù–ò–Ø (signals_raw):")
        print("-" * 40)
        
        raw_result = orchestrator_with_supabase.supabase.table('signals_raw').select('*').gte('created_at', f'{today}T00:00:00').order('created_at').execute()
        
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(raw_result.data)}")
        
        if raw_result.data:
            for i, signal in enumerate(raw_result.data, 1):
                time = signal.get('created_at', '')[:19].replace('T', ' ')
                trader = signal.get('trader_id', 'N/A')
                text = signal.get('raw_text', '')[:100].replace('\n', ' ')
                print(f"  {i:2d}. [{time}] {trader:15s}: {text}...")
        
        print()
        
        # 2. –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´ (signals_parsed)  
        print("2Ô∏è‚É£ –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´ (signals_parsed):")
        print("-" * 40)
        
        parsed_result = orchestrator_with_supabase.supabase.table('signals_parsed').select('*').gte('created_at', f'{today}T00:00:00').order('created_at').execute()
        
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(parsed_result.data)}")
        
        if parsed_result.data:
            for i, signal in enumerate(parsed_result.data, 1):
                time = signal.get('created_at', '')[:19].replace('T', ' ')
                trader = signal.get('trader_id', 'N/A')
                symbol = signal.get('symbol', 'N/A')
                side = signal.get('side', 'N/A')
                tp1 = signal.get('tp1', 'N/A')
                sl = signal.get('sl', 'N/A')
                confidence = signal.get('confidence', 0)
                print(f"  {i:2d}. [{time}] {trader:15s}: {symbol:8s} {side:5s} TP1:{tp1} SL:{sl} ({confidence:.2f})")
        
        print()
        
        # 3. –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –°–î–ï–õ–ö–ò (v_trades)
        print("3Ô∏è‚É£ –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –°–î–ï–õ–ö–ò (v_trades):")
        print("-" * 40)
        
        try:
            trades_result = orchestrator_with_supabase.supabase.table('v_trades').select('*').gte('created_at', f'{today}T00:00:00').order('created_at').execute()
            
            print(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades_result.data)}")
            
            if trades_result.data:
                for i, trade in enumerate(trades_result.data, 1):
                    time = trade.get('created_at', '')[:19].replace('T', ' ')
                    symbol = trade.get('symbol', 'N/A')
                    side = trade.get('side', 'N/A')
                    status = trade.get('status', 'N/A')
                    print(f"  {i:2d}. [{time}] {symbol:8s} {side:5s} {status}")
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è v_trades –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
        
        print()
        
        # 4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        print("4Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 40)
        print(f"üì• –°—ã—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:     {len(raw_result.data):3d}")
        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(parsed_result.data):3d}")
        if 'trades_result' in locals():
            print(f"üí∞ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:   {len(trades_result.data):3d}")
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç—Ä–µ–π–¥–µ—Ä–∞–º
        traders = {}
        for signal in raw_result.data:
            trader = signal.get('trader_id', 'unknown')
            traders[trader] = traders.get(trader, 0) + 1
        
        print(f"\nüìä –ü–û –¢–†–ï–ô–î–ï–†–ê–ú:")
        for trader, count in sorted(traders.items()):
            print(f"  ‚Ä¢ {trader:20s}: {count:2d} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(show_all_data())
