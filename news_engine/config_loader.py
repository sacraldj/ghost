#!/usr/bin/env python3
"""
GHOST News Engine - Config Loader
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é YAML
"""

import sys
import os
import yaml
import re
from pathlib import Path
from typing import Dict, Any

class ConfigLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self, config_path: str = "news_engine_config.yaml", env_path: str = None):
        self.config_path = config_path
        
        # –ò—â–µ–º .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        if env_path is None:
            # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 2 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö –æ—Ç news_engine/ –¥–æ –∫–æ—Ä–Ω—è
            current_dir = Path(__file__).parent
            root_dir = current_dir.parent.parent
            self.env_path = root_dir / ".env"
        else:
            self.env_path = Path(env_path)
            
        self.env_vars = {}
        self.load_env_vars()
    
    def load_env_vars(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
        env_file = Path(self.env_path)
        
        if env_file.exists():
            with open(env_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        self.env_vars[key.strip()] = value.strip()
        
        # –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        for key, value in os.environ.items():
            if key not in self.env_vars:
                self.env_vars[key] = value
    
    def substitute_env_vars(self, value: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ"""
        if not isinstance(value, str):
            return value
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω ${VARIABLE_NAME}
        pattern = r'\$\{([^}]+)\}'
        
        def replace_var(match):
            var_name = match.group(1)
            return self.env_vars.get(var_name, f"${{{var_name}}}")
        
        return re.sub(pattern, replace_var, value)
    
    def process_value(self, value: Any) -> Any:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if isinstance(value, str):
            return self.substitute_env_vars(value)
        elif isinstance(value, dict):
            return {k: self.process_value(v) for k, v in value.items()}
        elif isinstance(value, list):
            return [self.process_value(item) for item in value]
        else:
            return value
    
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∑–∞–º–µ–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not Path(self.config_path).exists():
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
        
        with open(self.config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–∞–º–µ–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        processed_config = self.process_value(config)
        
        return processed_config
    
    def save_config(self, config: Dict[str, Any], output_path: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if output_path is None:
            output_path = self.config_path.replace('.yaml', '_processed.yaml')
        
        with open(output_path, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True, indent=2)
        
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_path}")
    
    def validate_config(self, config: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        required_sources = ['newsapi', 'cryptocompare']
        
        if 'sources' not in config:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'sources' –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        for source in required_sources:
            if source not in config['sources']:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")
                return False
            
            source_config = config['sources'][source]
            if not source_config.get('enabled', False):
                print(f"‚ö†Ô∏è  –ò—Å—Ç–æ—á–Ω–∏–∫ {source} –æ—Ç–∫–ª—é—á–µ–Ω")
            else:
                api_key = source_config.get('api_key', '')
                if not api_key or api_key.startswith('your_') or api_key.startswith('${'):
                    print(f"‚ö†Ô∏è  –ò—Å—Ç–æ—á–Ω–∏–∫ {source} –Ω–µ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞")
        
        return True
    
    def print_config_summary(self, config: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüìã –°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GHOST News Engine:")
        print("=" * 50)
        
        if 'sources' in config:
            print(f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(config['sources'])}")
            enabled_sources = [name for name, cfg in config['sources'].items() 
                             if cfg.get('enabled', False)]
            print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(enabled_sources)}")
        
        if 'notifications' in config:
            notif_config = config['notifications']
            if 'channels' in notif_config:
                channels = notif_config['channels']
                enabled_channels = [name for name, cfg in channels.items() 
                                  if cfg.get('enabled', False)]
                print(f"üîî –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {', '.join(enabled_channels)}")
        
        print(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.get('monitoring', {}).get('log_level', 'INFO')}")
        print("=" * 50)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        config_path = "news_engine_config.yaml"
        if len(sys.argv) > 1:
            config_path = sys.argv[1]
        
        print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑: {config_path}")
        
        loader = ConfigLoader(config_path)
        config = loader.load_config()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if loader.validate_config(config):
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            loader.print_config_summary(config)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            loader.save_config(config)
        else:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main()
