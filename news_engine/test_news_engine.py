#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è GHOST News Engine
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–≤–∏–∂–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from news_engine import NewsEngine
from influence_analyzer import InfluenceAnalyzer
from news_sources import NewsSources

async def test_news_sources():
    """–¢–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    sources = NewsSources()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    all_sources = sources.get_all_sources()
    print(f"‚úÖ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(all_sources)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã—Ö –ª–∏—Ü
    influential_people = sources.get_influential_people()
    print(f"‚úÖ –í–ª–∏—è—Ç–µ–ª—å–Ω—ã—Ö –ª–∏—Ü: {len(influential_people)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
    companies = sources.get_companies()
    print(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏–π: {len(companies)}")
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    reliable_sources = sources.get_high_reliability_sources(0.9)
    print(f"\nüèÜ –¢–æ–ø-5 –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
    for i, (name, source) in enumerate(list(reliable_sources.items())[:5], 1):
        print(f"{i}. {source.name} ({source.reliability_score:.2f})")
    
    return True

def test_influence_analyzer():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–ª–∏—è–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–ª–∏—è–Ω–∏—è...")
    
    analyzer = InfluenceAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    test_news = [
        {
            'title': 'Breaking: Bitcoin ETF Approved by SEC',
            'content': 'The Securities and Exchange Commission has approved the first Bitcoin ETF, marking a major milestone for cryptocurrency adoption.',
            'source': 'Reuters',
            'published_at': datetime.now()
        },
        {
            'title': 'Elon Musk Tweets About Bitcoin',
            'content': 'Tesla CEO Elon Musk tweeted about Bitcoin, causing a surge in the cryptocurrency market.',
            'source': 'CoinDesk',
            'published_at': datetime.now()
        },
        {
            'title': 'Federal Reserve Raises Interest Rates',
            'content': 'The Federal Reserve has announced a 0.25% increase in interest rates.',
            'source': 'Bloomberg',
            'published_at': datetime.now()
        }
    ]
    
    for i, news in enumerate(test_news, 1):
        print(f"\nüì∞ –¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å {i}: {news['title']}")
        
        influence_score = analyzer.analyze_news_influence(news)
        
        print(f"   –í–ª–∏—è–Ω–∏–µ: {influence_score.influence_score:.3f}")
        print(f"   –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫: {influence_score.market_impact:.3f}")
        print(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {influence_score.sentiment_score:.3f}")
        print(f"   –°—Ä–æ—á–Ω–æ—Å—Ç—å: {influence_score.urgency_score:.3f}")
        print(f"   –î–æ–≤–µ—Ä–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É: {influence_score.credibility_score:.3f}")
        print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(influence_score.keywords[:5])}")
    
    return True

async def test_news_engine():
    """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    engine = NewsEngine()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–ª–∏—è–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    important_news = engine.get_important_news(limit=5)
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ë–î: {len(important_news)}")
    
    return True

def test_api_clients():
    """–¢–µ—Å—Ç API –∫–ª–∏–µ–Ω—Ç–æ–≤ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    
    try:
        from news_apis import NewsAggregator, NewsAPIClient, TwitterAPIClient
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤
        aggregator = NewsAggregator()
        print("‚úÖ NewsAggregator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        news_api_key = os.getenv("NEWS_API_KEY")
        twitter_token = os.getenv("TWITTER_BEARER_TOKEN")
        
        if news_api_key:
            print("‚úÖ NewsAPI –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ö†Ô∏è  NewsAPI –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω (–¥–æ–±–∞–≤—å—Ç–µ –≤ .env)")
        
        if twitter_token:
            print("‚úÖ Twitter Bearer Token –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ö†Ô∏è  Twitter Bearer Token –Ω–µ –Ω–∞–π–¥–µ–Ω (–¥–æ–±–∞–≤—å—Ç–µ –≤ .env)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        return False

async def run_full_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GHOST News Engine")
    print("=" * 60)
    
    tests = [
        ("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π", test_news_sources),
        ("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–ª–∏—è–Ω–∏—è", lambda: test_influence_analyzer()),
        ("–ì–ª–∞–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫", test_news_engine),
        ("API –∫–ª–∏–µ–Ω—Ç—ã", lambda: test_api_clients())
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, True))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} - {test_name}")
        if success:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –î–≤–∏–∂–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    return passed == total

def show_setup_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install requests aiohttp textblob spacy numpy")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ spaCy –º–æ–¥–µ–ª—å: python -m spacy download en_core_web_sm")
    print("3. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å API –∫–ª—é—á–∞–º–∏:")
    print("   NEWS_API_KEY=your_key_here")
    print("   TWITTER_BEARER_TOKEN=your_token_here")
    print("   ALPHA_VANTAGE_API_KEY=your_key_here")
    print("4. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏:")
    print("   - NewsAPI: https://newsapi.org/")
    print("   - Twitter: https://developer.twitter.com/")
    print("   - Alpha Vantage: https://www.alphavantage.co/")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import requests
        import aiohttp
        from textblob import TextBlob
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        show_setup_instructions()
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = asyncio.run(run_full_test())
    
    if not success:
        show_setup_instructions()
    
    sys.exit(0 if success else 1)
