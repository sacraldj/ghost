#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GHOST Price Feed Engine
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥—É–ª—è —Å–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sqlite3
import time
from datetime import datetime, timezone, timedelta
from price_feed_engine import PriceFeedEngine, PriceData, Candle

async def test_price_fetch():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω"""
    print("üß™ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω...")
    
    engine = PriceFeedEngine()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        await engine._create_session()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å Binance
        print("  üìä –¢–µ—Å—Ç Binance API...")
        btc_binance = await engine._fetch_binance_price("BTC")
        if btc_binance:
            print(f"    ‚úÖ BTC Binance: ${btc_binance.price:,.2f}")
        else:
            print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC —Å Binance")
        
        eth_binance = await engine._fetch_binance_price("ETH")
        if eth_binance:
            print(f"    ‚úÖ ETH Binance: ${eth_binance.price:,.2f}")
        else:
            print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ETH —Å Binance")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å Coinbase
        print("  üìä –¢–µ—Å—Ç Coinbase API...")
        btc_coinbase = await engine._fetch_coinbase_price("BTC")
        if btc_coinbase:
            print(f"    ‚úÖ BTC Coinbase: ${btc_coinbase.price:,.2f}")
        else:
            print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC —Å Coinbase")
        
        eth_coinbase = await engine._fetch_coinbase_price("ETH")
        if eth_coinbase:
            print(f"    ‚úÖ ETH Coinbase: ${eth_coinbase.price:,.2f}")
        else:
            print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ETH —Å Coinbase")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–µ–Ω
        print("  üìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–µ–Ω...")
        all_prices = await engine._fetch_all_prices()
        print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_prices)} —Ü–µ–Ω")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
        await engine._close_session()
        
        return True
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_database_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        engine = PriceFeedEngine()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_price = PriceData(
            symbol="BTC",
            price=50000.0,
            volume=100.0,
            timestamp=datetime.now(timezone.utc),
            source="test",
            bid=49999.0,
            ask=50001.0,
            high_24h=51000.0,
            low_24h=49000.0
        )
        
        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        print("  üíæ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        if engine._save_price_data(test_price):
            print("    ‚úÖ –¶–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            print("    ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False
        
        # –¢–µ—Å—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
        print("  üì¶ –¢–µ—Å—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏...")
        engine._add_to_buffer(test_price)
        if len(engine.price_buffer["BTC"]) > 0:
            print("    ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±—É—Ñ–µ—Ä")
        else:
            print("    ‚ùå –û—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π
        print("  üïØÔ∏è  –¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π...")
        candles = engine._form_candles("BTC", "1m")
        if candles:
            print(f"    ‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π")
        else:
            print("    ‚ö†Ô∏è  –°–≤–µ—á–∏ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)")
        
        return True
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_candle_formation():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π"""
    print("üß™ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π...")
    
    try:
        engine = PriceFeedEngine()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        base_time = datetime.now(timezone.utc).replace(second=0, microsecond=0)
        
        test_prices = []
        for i in range(10):
            price_data = PriceData(
                symbol="BTC",
                price=50000.0 + i * 100,  # –†–∞–∑–Ω—ã–µ —Ü–µ–Ω—ã
                volume=100.0 + i * 10,
                timestamp=base_time + timedelta(minutes=i),
                source="test"
            )
            test_prices.append(price_data)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        for price in test_prices:
            engine._add_to_buffer(price)
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        intervals = ["1m", "5m", "15m", "1h"]
        
        for interval in intervals:
            candles = engine._form_candles("BTC", interval)
            print(f"  üìä {interval}: {len(candles)} —Å–≤–µ—á–µ–π")
            
            if candles:
                for candle in candles[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–≤–µ—á–∏
                    print(f"    üïØÔ∏è  {candle.open_time} - {candle.close_time}: "
                          f"O:{candle.open_price:.0f} H:{candle.high_price:.0f} "
                          f"L:{candle.low_price:.0f} C:{candle.close_price:.0f}")
        
        return True
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    print("üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç...")
    
    try:
        engine = PriceFeedEngine()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω
        print("  üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω...")
        latest_prices = await engine.get_latest_prices()
        for symbol, price_data in latest_prices.items():
            print(f"    ‚úÖ {symbol}: ${price_data.price:,.2f} ({price_data.source})")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π
        print("  üïØÔ∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π...")
        candles = await engine.get_candles("BTC", "1h", 5)
        print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")
        
        return True
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ GHOST Price Feed Engine\n")
    
    tests = [
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω", test_price_fetch),
        ("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î", test_database_operations),
        ("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π", test_candle_formation),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"–¢–µ—Å—Ç: {test_name}")
        print('='*50)
        
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n{'='*50}")
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(main())
