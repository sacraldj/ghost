#!/usr/bin/env python3
"""
GHOST Critical News Engine
–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π —Å–±–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
"""

import asyncio
import aiohttp
import sqlite3
import logging
import time
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('critical_news_engine.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CriticalNewsItem:
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å"""
    def __init__(self, source: str, title: str, content: str = "", url: str = ""):
        self.source = source
        self.title = title
        self.content = content
        self.url = url
        self.published_at = datetime.now()
        self.sentiment = 0.0
        self.urgency = 1.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        self.is_critical = True
        self.priority = 1  # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

class CriticalNewsEngine:
    """–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π News Engine –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self, db_path: str = "ghost_news.db"):
        self.db_path = db_path
        self.init_database()
        self.setup_critical_sources()
        self.last_critical_alert = 0
        
    def setup_critical_sources(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        self.critical_sources = {
            # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
            "binance_price": {
                "name": "Binance Price",
                "interval": 1,  # 1 —Å–µ–∫—É–Ω–¥–∞
                "url": "https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT",
                "type": "price"
            },
            "coinbase_price": {
                "name": "Coinbase Price", 
                "interval": 1,
                "url": "https://api.coinbase.com/v2/prices/BTC-USD/spot",
                "type": "price"
            },
            "breaking_news": {
                "name": "Breaking News",
                "interval": 1,
                "url": "https://api.newsapi.org/v2/everything?q=crypto&sortBy=publishedAt&apiKey=test",
                "type": "news"
            },
            "twitter_critical": {
                "name": "Twitter Critical",
                "interval": 1,
                "url": "https://api.twitter.com/2/tweets/search/recent?query=crypto",
                "type": "social"
            },
            "regulatory_alerts": {
                "name": "Regulatory Alerts",
                "interval": 1,
                "url": "https://api.sec.gov/news/pressreleases",
                "type": "regulatory"
            }
        }
        
        self.last_check = {name: 0 for name in self.critical_sources.keys()}
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS critical_news (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    source_name TEXT,
                    title TEXT,
                    content TEXT,
                    url TEXT,
                    published_at TIMESTAMP,
                    sentiment REAL DEFAULT 0.0,
                    urgency REAL DEFAULT 1.0,
                    is_critical BOOLEAN DEFAULT TRUE,
                    priority INTEGER DEFAULT 1,
                    market_impact REAL DEFAULT 0.0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS market_data (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    symbol TEXT,
                    price REAL,
                    change_24h REAL,
                    volume REAL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS critical_alerts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    alert_type TEXT,
                    message TEXT,
                    severity INTEGER DEFAULT 1,
                    is_processed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_critical_timestamp ON critical_news(published_at)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_critical_source ON critical_news(source_name)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_market_symbol ON market_data(symbol)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_market_timestamp ON market_data(timestamp)")
            
            conn.commit()
    
    async def fetch_critical_data(self, source_name: str, source_config: Dict) -> List[CriticalNewsItem]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            start_time = time.time()
            
            # –ò–º–∏—Ç–∞—Ü–∏—è —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            await asyncio.sleep(0.01)  # 10ms –∏–º–∏—Ç–∞—Ü–∏—è
            
            items = []
            
            if source_config["type"] == "price":
                # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                items = self.generate_market_data(source_name)
            elif source_config["type"] == "news":
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                items = self.generate_critical_news(source_name)
            elif source_config["type"] == "social":
                # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞
                items = self.generate_social_alerts(source_name)
            elif source_config["type"] == "regulatory":
                # –†–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
                items = self.generate_regulatory_alerts(source_name)
            
            response_time = time.time() - start_time
            logger.info(f"‚ö° {source_name}: {len(items)} items in {response_time:.3f}s")
            
            return items
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ {source_name}: {e}")
            return []
    
    def generate_market_data(self, source_name: str) -> List[CriticalNewsItem]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        import random
        
        symbols = ["BTC", "ETH", "BNB", "ADA", "SOL"]
        items = []
        
        for symbol in symbols:
            # –ò–º–∏—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            base_price = {
                "BTC": 43250,
                "ETH": 2650,
                "BNB": 320,
                "ADA": 0.45,
                "SOL": 95
            }
            
            price_change = random.uniform(-0.05, 0.05)  # ¬±5%
            current_price = base_price[symbol] * (1 + price_change)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            is_critical = abs(price_change) > 0.02  # >2% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            
            if is_critical:
                item = CriticalNewsItem(
                    source=source_name,
                    title=f"üö® {symbol} price {'üìà' if price_change > 0 else 'üìâ'} {price_change:.2%}",
                    content=f"{symbol} price changed by {price_change:.2%} to ${current_price:.2f}",
                    url=f"https://{source_name.lower()}.com/{symbol}"
                )
                item.sentiment = 0.8 if price_change > 0 else -0.8
                items.append(item)
        
        return items
    
    def generate_critical_news(self, source_name: str) -> List[CriticalNewsItem]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        critical_news = [
            {
                "title": "üö® BREAKING: Bitcoin reaches new all-time high!",
                "content": "Bitcoin has reached a new all-time high as institutional adoption accelerates.",
                "sentiment": 0.9
            },
            {
                "title": "‚ö†Ô∏è URGENT: Major exchange hack reported",
                "content": "A major cryptocurrency exchange has reported a security breach.",
                "sentiment": -0.8
            },
            {
                "title": "‚ö° FLASH: SEC approves Bitcoin ETF",
                "content": "The Securities and Exchange Commission has approved the first Bitcoin ETF.",
                "sentiment": 0.9
            },
            {
                "title": "üî• CRITICAL: Ethereum gas fees spike 500%",
                "content": "Ethereum network congestion causes gas fees to spike dramatically.",
                "sentiment": -0.6
            }
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –Ω–æ–≤–æ—Å—Ç—å
        import random
        news = random.choice(critical_news)
        
        item = CriticalNewsItem(
            source=source_name,
            title=news["title"],
            content=news["content"],
            url=f"https://{source_name.lower()}.com/breaking"
        )
        item.sentiment = news["sentiment"]
        
        return [item] if random.random() < 0.1 else []  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    
    def generate_social_alerts(self, source_name: str) -> List[CriticalNewsItem]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        social_alerts = [
            {
                "title": "üêã Elon Musk tweets about Bitcoin",
                "content": "Elon Musk just tweeted about Bitcoin adoption.",
                "sentiment": 0.7
            },
            {
                "title": "üëë Vitalik comments on Ethereum",
                "content": "Vitalik Buterin made important comments about Ethereum's future.",
                "sentiment": 0.6
            }
        ]
        
        import random
        if random.random() < 0.05:  # 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            alert = random.choice(social_alerts)
            item = CriticalNewsItem(
                source=source_name,
                title=alert["title"],
                content=alert["content"],
                url=f"https://twitter.com/crypto"
            )
            item.sentiment = alert["sentiment"]
            return [item]
        
        return []
    
    def generate_regulatory_alerts(self, source_name: str) -> List[CriticalNewsItem]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        regulatory_alerts = [
            {
                "title": "üèõÔ∏è SEC announces new crypto regulations",
                "content": "The SEC has announced new cryptocurrency regulations.",
                "sentiment": -0.3
            },
            {
                "title": "‚öñÔ∏è CFTC files charges against crypto firm",
                "content": "The CFTC has filed charges against a major cryptocurrency firm.",
                "sentiment": -0.5
            }
        ]
        
        import random
        if random.random() < 0.02:  # 2% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            alert = random.choice(regulatory_alerts)
            item = CriticalNewsItem(
                source=source_name,
                title=alert["title"],
                content=alert["content"],
                url=f"https://sec.gov/news"
            )
            item.sentiment = alert["sentiment"]
            return [item]
        
        return []
    
    def save_critical_news(self, items: List[CriticalNewsItem]) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not items:
            return 0
        
        saved_count = 0
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            for item in items:
                try:
                    cursor.execute("""
                        INSERT INTO critical_news(
                            source_name, title, content, url, published_at,
                            sentiment, urgency, is_critical, priority
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        item.source, item.title, item.content, item.url,
                        item.published_at.isoformat(), item.sentiment,
                        item.urgency, item.is_critical, item.priority
                    ))
                    
                    saved_count += 1
                    
                    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç
                    if abs(item.sentiment) > 0.7 or "BREAKING" in item.title or "URGENT" in item.title:
                        cursor.execute("""
                            INSERT INTO critical_alerts(
                                alert_type, message, severity
                            ) VALUES (?, ?, ?)
                        """, (
                            "critical_news",
                            f"{item.source}: {item.title}",
                            1 if "BREAKING" in item.title else 2
                        ))
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            
            conn.commit()
        
        return saved_count
    
    async def run_critical(self):
        """–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ GHOST Critical News Engine (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)")
        
        while True:
            try:
                current_time = time.time()
                tasks = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                for source_name, source_config in self.critical_sources.items():
                    if current_time - self.last_check[source_name] >= source_config["interval"]:
                        tasks.append(self.fetch_critical_data(source_name, source_config))
                        self.last_check[source_name] = current_time
                
                if tasks:
                    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    results = await asyncio.gather(*tasks, return_exceptions=True)
                    
                    all_items = []
                    for result in results:
                        if isinstance(result, Exception):
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {result}")
                        else:
                            all_items.extend(result)
                    
                    if all_items:
                        saved_count = self.save_critical_news(all_items)
                        
                        if saved_count > 0:
                            logger.warning(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–û–í–û–°–¢–ò: {saved_count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
                            if current_time - self.last_critical_alert > 60:  # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É
                                logger.critical("üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢: –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
                                self.last_critical_alert = current_time
                
                # –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –ø–∞—É–∑–∞ (100ms)
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(1)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    engine = CriticalNewsEngine()
    await engine.run_critical()

if __name__ == "__main__":
    asyncio.run(main())
