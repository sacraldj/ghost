#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ GHOST News Engine
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É RSS –ø–∞—Ä—Å–µ—Ä–∞ –∏ Public API –±–µ–∑ API –∫–ª—é—á–µ–π
"""

import logging
from datetime import datetime
from rss_parser import RSSParser
from public_api_client import PublicAPIClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def demo_rss_sources():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    print("üì∞ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø RSS –ò–°–¢–û–ß–ù–ò–ö–û–í")
    print("=" * 50)
    
    parser = RSSParser()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RSS feeds
    rss_feeds = [
        {
            'url': 'https://www.coindesk.com/arc/outboundfeeds/rss/',
            'max_articles': 3,
            'keywords': ['bitcoin', 'crypto', 'ethereum']
        },
        {
            'url': 'https://cointelegraph.com/rss',
            'max_articles': 3,
            'keywords': ['defi', 'nft', 'blockchain']
        },
        {
            'url': 'https://cryptonews.com/news/feed',
            'max_articles': 3,
            'keywords': ['binance', 'coinbase', 'regulation']
        }
    ]
    
    print("üîç –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS feeds...")
    articles = parser.get_multiple_feeds(rss_feeds)
    
    print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π:")
    for i, article in enumerate(articles, 1):
        print(f"\n{i}. {article['title']}")
        print(f"   üìÖ {article['published_date'].strftime('%Y-%m-%d %H:%M UTC')}")
        print(f"   üì∞ {article['source_name']}")
        print(f"   üîó {article['link']}")
        
        if article['description']:
            desc = article['description'][:100] + "..." if len(article['description']) > 100 else article['description']
            print(f"   üìù {desc}")
    
    return articles

def demo_public_apis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É Public APIs"""
    print("\n\nüåê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø PUBLIC APIs")
    print("=" * 50)
    
    client = PublicAPIClient()
    
    # 1. –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    print("üìä –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏...")
    top_coins = client.get_top_cryptocurrencies(10)
    
    print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(top_coins)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:")
    for i, coin in enumerate(top_coins[:5], 1):
        print(f"{i:2}. {coin['symbol']:8} {coin['name']:20} ${coin['current_price']:>10,.2f}")
        print(f"     MC: ${coin['market_cap']:>15,.0f} | 24h: {coin['price_change_percentage_24h']:>7.2f}%")
    
    # 2. –¶–µ–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
    print("\nüí∞ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
    popular_coins = ['bitcoin', 'ethereum', 'binancecoin', 'cardano', 'solana']
    prices = client.get_crypto_price(popular_coins)
    
    print(f"\n‚úÖ –¶–µ–Ω—ã {len(prices)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:")
    for coin, price_data in prices.items():
        price = price_data.get('usd', 'N/A')
        if price != 'N/A':
            print(f"   {coin:12}: ${price:>10,.2f}")
    
    # 3. –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BTC
    print("\nüìà –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Bitcoin...")
    btc_data = client.get_market_data("BTCUSDT")
    
    if btc_data:
        print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ BTC/USDT:")
        print(f"   üí∞ –¶–µ–Ω–∞: ${btc_data['price']:>10,.2f}")
        print(f"   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {btc_data['price_change_percent']:>7.2f}%")
        print(f"   üìà –ú–∞–∫—Å–∏–º—É–º 24—á: ${btc_data['high_24h']:>10,.2f}")
        print(f"   üìâ –ú–∏–Ω–∏–º—É–º 24—á: ${btc_data['low_24h']:>10,.2f}")
        print(f"   üíé –û–±—ä–µ–º 24—á: ${btc_data['volume_24h']:>10,.0f}")
    
    return {
        'top_coins': top_coins,
        'prices': prices,
        'btc_data': btc_data
    }

def demo_news_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("\n\nüß† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –ù–û–í–û–°–¢–ï–ô")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    parser = RSSParser()
    rss_feeds = [
        {
            'url': 'https://www.coindesk.com/arc/outboundfeeds/rss/',
            'max_articles': 5,
            'keywords': ['bitcoin', 'crypto', 'ethereum', 'defi', 'nft']
        }
    ]
    
    articles = parser.get_multiple_feeds(rss_feeds)
    
    if not articles:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print(f"üì∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(articles)} –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    keyword_stats = {}
    source_stats = {}
    
    for article in articles:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        source = article['source_name']
        source_stats[source] = source_stats.get(source, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        title_lower = article['title'].lower()
        description_lower = article.get('description', '').lower()
        text = f"{title_lower} {description_lower}"
        
        keywords = ['bitcoin', 'ethereum', 'defi', 'nft', 'binance', 'coinbase', 'regulation']
        for keyword in keywords:
            if keyword in text:
                keyword_stats[keyword] = keyword_stats.get(keyword, 0) + 1
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
    for source, count in source_stats.items():
        print(f"   {source}: {count} —Å—Ç–∞—Ç–µ–π")
    
    print(f"\nüîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:")
    for keyword, count in sorted(keyword_stats.items(), key=lambda x: x[1], reverse=True):
        if count > 0:
            print(f"   {keyword}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    if articles:
        newest = min(articles, key=lambda x: x['published_date'])
        oldest = max(articles, key=lambda x: x['published_date'])
        
        print(f"\n‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:")
        print(f"   –°–∞–º–∞—è —Å–≤–µ–∂–∞—è: {newest['published_date'].strftime('%Y-%m-%d %H:%M UTC')}")
        print(f"   –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è: {oldest['published_date'].strftime('%Y-%m-%d %H:%M UTC')}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ GHOST NEWS ENGINE - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ï–°–ü–õ–ê–¢–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –±–µ–∑ API –∫–ª—é—á–µ–π")
    print("=" * 60)
    
    try:
        # 1. RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        rss_articles = demo_rss_sources()
        
        # 2. Public APIs
        api_data = demo_public_apis()
        
        # 3. –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
        demo_news_analysis()
        
        print("\n\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        print("‚úÖ RSS –ø–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 4 –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")
        print("‚úÖ Public API –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("=" * 60)
        print("üí° –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–π –Ω–æ–≤–æ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫ –±–µ–∑ API –∫–ª—é—á–µ–π!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main()
