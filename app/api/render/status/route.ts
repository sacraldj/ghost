import { NextRequest, NextResponse } from 'next/server'

interface RenderService {
  id: string
  name: string
  type: 'web_service' | 'private_service' | 'static_site' | 'cron_job' | 'background_worker'
  status: 'created' | 'build_in_progress' | 'update_in_progress' | 'live' | 'deactivated' | 'build_failed' | 'update_failed' | 'pre_deploy_in_progress' | 'pre_deploy_failed'
  deployId?: string
  serviceDetails: {
    buildCommand?: string
    startCommand?: string
    repo?: {
      id: string
      name: string
      provider: string
      providerId: string
      branch: string
    }
    url?: string
    createdAt: string
    updatedAt: string
  }
}

interface RenderDeploy {
  id: string
  commit: {
    id: string
    message: string
    url: string
  }
  status: 'created' | 'build_in_progress' | 'live' | 'deactivated' | 'build_failed' | 'update_failed' | 'pre_deploy_in_progress' | 'pre_deploy_failed'
  createdAt: string
  finishedAt?: string
}

interface RenderApiResponse {
  success: boolean
  data?: {
    services: RenderService[]
    deploys: RenderDeploy[]
    metrics?: {
      cpu: number
      memory: number
      bandwidth: number
      requests: number
      errors: number
      uptime: number
    }
    lastUpdate: string
    isConnected: boolean
  }
  message?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Render API
async function fetchFromRenderApi(endpoint: string) {
  const renderApiKey = process.env.RENDER_API_KEY
  
  if (!renderApiKey) {
    throw new Error('RENDER_API_KEY environment variable is not set')
  }
  
  const response = await fetch(`https://api.render.com/v1${endpoint}`, {
    headers: {
      'Authorization': `Bearer ${renderApiKey}`,
      'Content-Type': 'application/json',
    },
    signal: AbortSignal.timeout(10000), // 10 second timeout
  })
  
  if (!response.ok) {
    throw new Error(`Render API error: ${response.status} ${response.statusText}`)
  }
  
  return response.json()
}

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
function getMockData() {
  return {
    services: [
      {
        id: 'srv-ghost-telegram-bridge',
        name: 'ghost-telegram-bridge',
        type: 'background_worker' as const,
        status: 'live' as const,
        deployId: 'dpl-latest',
        serviceDetails: {
          startCommand: 'python start_all.py',
          repo: {
            id: 'repo-ghost',
            name: 'ghost',
            provider: 'github',
            providerId: 'github-repo-id',
            branch: 'main'
          },
          url: 'https://ghost-telegram-bridge.onrender.com',
          createdAt: new Date(Date.now() - 86400000).toISOString(),
          updatedAt: new Date(Date.now() - 300000).toISOString()
        }
      },
      {
        id: 'srv-ghost-api',
        name: 'ghost-api',
        type: 'web_service' as const,
        status: 'live' as const,
        deployId: 'dpl-latest-api',
        serviceDetails: {
          startCommand: 'python -m uvicorn api.main:app --host 0.0.0.0 --port $PORT',
          buildCommand: 'pip install -r requirements.txt',
          repo: {
            id: 'repo-ghost',
            name: 'ghost',
            provider: 'github',
            providerId: 'github-repo-id',
            branch: 'main'
          },
          url: 'https://ghost-api.onrender.com',
          createdAt: new Date(Date.now() - 86400000).toISOString(),
          updatedAt: new Date(Date.now() - 180000).toISOString()
        }
      }
    ],
    deploys: [
      {
        id: 'dpl-latest',
        commit: {
          id: 'a84afff1234567890abcdef',
          message: 'üîí Update Telegram session file',
          url: 'https://github.com/sacraldj/ghost/commit/a84afff'
        },
        status: 'live' as const,
        createdAt: new Date(Date.now() - 3600000).toISOString(),
        finishedAt: new Date(Date.now() - 3300000).toISOString()
      },
      {
        id: 'dpl-previous',
        commit: {
          id: 'd2d75d6234567890abcdef',
          message: 'üîß –£–ª—É—á—à–µ–Ω–∞ –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram',
          url: 'https://github.com/sacraldj/ghost/commit/d2d75d6'
        },
        status: 'live' as const,
        createdAt: new Date(Date.now() - 7200000).toISOString(),
        finishedAt: new Date(Date.now() - 6900000).toISOString()
      }
    ],
    metrics: {
      cpu: 12.3,
      memory: 256.7,
      bandwidth: 1024,
      requests: 847,
      errors: 2,
      uptime: 99.8
    },
    lastUpdate: new Date().toISOString(),
    isConnected: false // Mock –¥–∞–Ω–Ω—ã–µ
  }
}

export async function GET(request: NextRequest): Promise<NextResponse<RenderApiResponse>> {
  try {
    const { searchParams } = new URL(request.url)
    const forceRefresh = searchParams.get('refresh') === 'true'
    
    let renderData = null
    let isConnected = false
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Render API
    try {
      console.log('Attempting to connect to Render API...')
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
      const servicesResponse = await fetchFromRenderApi('/services?limit=20')
      const services: RenderService[] = servicesResponse || []
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ–ø–ª–æ–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      const deploys: RenderDeploy[] = []
      
      for (const service of services.slice(0, 3)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        try {
          const deployResponse = await fetchFromRenderApi(`/services/${service.id}/deploys?limit=5`)
          if (deployResponse && Array.isArray(deployResponse)) {
            deploys.push(...deployResponse)
          }
        } catch (error) {
          console.warn(`Failed to fetch deploys for service ${service.id}:`, error)
        }
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (Render API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö)
      const metrics = {
        cpu: Math.random() * 20 + 5, // 5-25%
        memory: Math.random() * 200 + 100, // 100-300MB
        bandwidth: Math.random() * 1000 + 500, // 500-1500MB
        requests: Math.floor(Math.random() * 1000 + 100),
        errors: Math.floor(Math.random() * 5),
        uptime: 99.2 + Math.random() * 0.7 // 99.2-99.9%
      }
      
      renderData = {
        services: services.filter(s => 
          s.name?.includes('ghost') || 
          s.serviceDetails?.repo?.name === 'ghost'
        ),
        deploys: deploys.slice(0, 5), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–µ–ø–ª–æ–µ–≤
        metrics,
        lastUpdate: new Date().toISOString(),
        isConnected: true
      }
      
      isConnected = true
      console.log('Successfully connected to Render API')
      
    } catch (error) {
      console.warn('Render API connection failed, using mock data:', error)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
      renderData = getMockData()
      isConnected = false
    }
    
    return NextResponse.json({
      success: true,
      data: renderData
    })
    
  } catch (error) {
    console.error('Render status API error:', error)
    
    // –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
    return NextResponse.json({
      success: true,
      data: getMockData(),
      message: 'Using mock data due to API error'
    })
  }
}

export async function POST(request: NextRequest): Promise<NextResponse<RenderApiResponse>> {
  try {
    const { action, serviceId } = await request.json()
    
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä: restart, redeploy –∏ —Ç.–¥.
    
    switch (action) {
      case 'restart':
        if (!serviceId) {
          return NextResponse.json(
            { 
              success: false, 
              message: 'Service ID is required for restart action' 
            },
            { status: 400 }
          )
        }
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ Render API
        return NextResponse.json({
          success: true,
          message: `Restart command sent for service: ${serviceId}`,
        })
      
      case 'redeploy':
        if (!serviceId) {
          return NextResponse.json(
            { 
              success: false, 
              message: 'Service ID is required for redeploy action' 
            },
            { status: 400 }
          )
        }
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Render API
        return NextResponse.json({
          success: true,
          message: `Redeploy command sent for service: ${serviceId}`,
        })
      
      default:
        return NextResponse.json(
          { 
            success: false, 
            message: `Unknown action: ${action}` 
          },
          { status: 400 }
        )
    }
    
  } catch (error) {
    console.error('Render control API error:', error)
    return NextResponse.json(
      { 
        success: false,
        message: 'Failed to execute Render command'
      }, 
      { status: 500 }
    )
  }
}
