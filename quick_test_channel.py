#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç: –º–æ–∂–µ—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
"""

import asyncio
import logging
import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from datetime import datetime, timedelta

sys.path.append(str(Path(__file__).parent))
load_dotenv()

from telethon import TelegramClient

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_channel_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É ghostsignaltest"""
    logger.info("üß™ –¢–ï–°–¢: –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É t.me/ghostsignaltest")
    
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    sessions_to_test = [
        'ghost_session',
        'ghost_session_test', 
        'test_session_74660'
    ]
    
    test_channel_id = 2974041293  # ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    for session_name in sessions_to_test:
        try:
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é: {session_name}")
            
            client = TelegramClient(session_name, int(api_id), api_hash)
            await client.connect()
            
            if await client.is_user_authorized():
                me = await client.get_me()
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞: {me.first_name}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                try:
                    logger.info(f"üì± –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ {test_channel_id}...")
                    
                    message_count = 0
                    recent_messages = []
                    
                    async for message in client.iter_messages(test_channel_id, limit=10):
                        message_count += 1
                        if message.message:
                            recent_messages.append({
                                'id': message.id,
                                'text': message.message[:100],
                                'date': message.date
                            })
                    
                    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
                    
                    if recent_messages:
                        logger.info("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
                        for msg in recent_messages[:5]:
                            logger.info(f"   {msg['date']}: {msg['text']}...")
                        
                        logger.info(f"‚úÖ –£–°–ü–ï–•! –°–µ—Å—Å–∏—è {session_name} –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –∫–∞–Ω–∞–ª!")
                        await client.disconnect()
                        return session_name
                    else:
                        logger.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º")
                
                except Exception as channel_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {channel_error}")
            
            await client.disconnect()
            
        except Exception as e:
            logger.debug(f"–°–µ—Å—Å–∏—è {session_name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            continue
    
    logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    return None

async def main():
    working_session = await test_channel_access()
    
    if working_session:
        print(f"\nüéâ –ì–û–¢–û–í–û! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ—Å—Å–∏—é: {working_session}")
        print("üí° –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é")
        print("üì± –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∏–≥–Ω–∞–ª –≤ t.me/ghostsignaltest")
    else:
        print("\n‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π")
        print("üí° –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram (~3 —á–∞—Å–∞)")
        print("üîë –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥: TELEGRAM_CODE=–Ω–æ–≤—ã–π_–∫–æ–¥")

if __name__ == "__main__":
    asyncio.run(main())
