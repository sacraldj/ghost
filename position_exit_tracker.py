# === GHOST-META ===
# üìÇ –ü—É—Ç—å: core/position_exit_tracker.py
# üì¶ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ open_trades.json ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç exit_time, ROI, –∏ –æ—á–∏—â–∞–µ—Ç JSON
# üîÅ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ghost_bybit_position.get_position, ghost_write_safe, trace, get_last_exit_fill_price_safe
# üîí –°—Ç–∞—Ç—É—Å: ‚úÖ –±–æ–µ–≤–æ–π v1.4 (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤—Ö–æ–¥–Ω–æ–≥–æ Fill –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏)

import json
import time
import yaml
import calendar
from datetime import datetime
from pybit.unified_trading import HTTP
from core.ghost_bybit_position import get_position
from ghost_write_safe import ghost_write_safe
from utils.ghost_trace_logger import trace
from utils.send_to_queue import log_to_queue
from utils.get_last_fill_price import get_last_exit_fill_price_safe
from leverage_parser import get_leverage

# === API –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit ===
with open("config/api_keys.yaml") as f:
    keys = yaml.safe_load(f)["bybit"]

session = HTTP(api_key=keys["api_key"], api_secret=keys["api_secret"])

OPEN_TRADES_PATH = "output/open_trades.json"

def load_open_trades():
    try:
        with open(OPEN_TRADES_PATH) as f:
            return json.load(f)
    except:
        return []

def save_open_trades(data):
    with open(OPEN_TRADES_PATH, "w") as f:
        json.dump(data, f, indent=2)

def cancel_all_orders_both_idx(symbol):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è –æ–±–æ–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤)"""
    for idx in [0, 1]:
        try:
            session.cancel_all_orders(category="linear", symbol=symbol, position_idx=idx)
            log_to_queue("SL_CANCEL_IDX", f"{symbol} | cancel –ø–æ idx={idx}")
        except Exception as e:
            log_to_queue("SL_CANCEL_FAIL", f"{symbol} | idx={idx} | {e}")

def repeat_cancel_until_clean(symbol):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –æ—Ç–º–µ–Ω—É –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
    print(f"üî• –°—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
    for i in range(10):
        try:
            session.cancel_all_orders(category="linear", symbol=symbol, position_idx=0)
            session.cancel_all_orders(category="linear", symbol=symbol, position_idx=1)
            log_to_queue("SL_FORCE_LOOP", f"{symbol} | –æ—Ç–º–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä {i+1}")
            time.sleep(2)
        except Exception as e:
            print(f"‚ùå CANCEL LOOP ERROR {symbol}: {e}")
    print(f"‚úÖ –¶–∏–∫–ª –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {symbol}")

def check_and_close_positions():
    trades = load_open_trades()
    still_open = []

    for trade in trades:
        try:
            symbol = trade["symbol"]
            entry = float(trade.get("real_entry_price", 0))
            leverage = float(trade.get("real_leverage", 20))
            side = trade.get("side", "Buy")  # Long (Buy) or Short (Sell)

            pos1 = get_position(symbol)
            size1 = float(pos1.get("size", 0))
            if size1 > 0:
                # –ü–æ–∑–∏—Ü–∏—è –µ—â—ë –æ—Ç–∫—Ä—ã—Ç–∞
                still_open.append(trade)
                continue

            # –ü–æ–∑–∏—Ü–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ ‚Äì –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—É—Å—Ç—è 3 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(3)
            pos2 = get_position(symbol)
            size2 = float(pos2.get("size", 0))

            # üõ° –ù–ï –∑–∞–∫—Ä—ã–≤–∞—Ç—å, –µ—Å–ª–∏ TP1 –±—ã–ª, –∞ TP2 –∏ SL ‚Äî –Ω–µ—Ç, –∏ –ø–æ–∑–∏—Ü–∏—è –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞
            if size2 > 0 and trade.get("tp1_hit") and not trade.get("tp2_hit") and not trade.get("sl_hit"):
                log_to_queue("SKIP_EXIT_TP1_ONLY", f"{symbol} | TP1 –±—ã–ª, –Ω–æ –ø–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º")
                still_open.append(trade)
                continue

            if size2 == 0:

                # üõ° –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ TP1 —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–æ SL –µ—â—ë –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω ‚Äî –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º
                if trade.get("tp1_hit") and not trade.get("sl_be_moved"):
                    msg = f"{symbol} | TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–æ SL –≤ BE –µ—â—ë –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω ‚Üí —Å–¥–µ–ª–∫–∞ –ù–ï –∑–∞–∫—Ä—ã—Ç–∞"
                    print(f"‚ö†Ô∏è  {msg}")
                    log_to_queue("TP1_BE_HOLD", msg)
                    still_open.append(trade)
                    continue

                # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ (size=0) ‚Üí –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
                last_price = float(pos2.get("lastPrice", 0))
                qty = float(trade.get("position_qty", 0))
                if not entry or not qty:
                    log_to_queue("EXIT_SKIPPED", f"{symbol} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: entry –∏–ª–∏ qty = 0")
                    still_open.append(trade)
                    continue

                # üõ°  –ó–∞—â–∏—Ç–∞: –Ω–µ –æ—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä–∞, –µ—Å–ª–∏ SL –≤ BE –µ—â—ë –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω
                if not trade.get("sl_be_moved"):
                    msg = f"{symbol} | SL –µ—â—ë –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ BE ‚Üí –æ—Ä–¥–µ—Ä–∞ –ù–ï –æ—Ç–º–µ–Ω—è–µ–º"
                    print(f"‚ö†Ô∏è  {msg}")
                    log_to_queue("SKIP_ORDER_CANCEL", msg)
                else:
                    tp2_active = False
                    tp2_order_id = trade.get("tp2_order_id")
                    try:
                        if tp2_order_id:
                            tp2_check = session.get_open_orders(
                                category="linear",
                                symbol=symbol,
                                orderId=tp2_order_id,
                                openOnly=0
                            )
                            tp2_list = tp2_check.get("result", {}).get("list", [])
                            tp2_active = bool(tp2_list)
                            if tp2_active:
                                log_to_queue("TP2_STILL_ACTIVE", f"{symbol} | TP2 –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ —É–¥–∞–ª—è–µ–º")
                                still_open.append(trade)
                                continue
                    except Exception as e:
                        log_to_queue("TP2_CHECK_FAIL", f"{symbol} | –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TP2: {e}")

                    if not tp2_active:
                        try:
                            repeat_cancel_until_clean(symbol)
                            log_to_queue("ORDERS_CANCELED", f"{symbol} | –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã")
                        except Exception as e:
                            log_to_queue("ORDERS_CANCEL_FAIL", f"{symbol} | –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤: {e}")

                # üîÅ –í–û–ó–í–†–ê–¢ –í–°–ï–• –†–ê–°–ß–Å–¢–û–í –ü–û–ó–ò–¶–ò–ò
                position_value = entry * qty
                margin_used = position_value / leverage
                fee = position_value * 0.00055 * 2  # –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—Ö–æ–¥+–≤—ã—Ö–æ–¥ (0.055% –∫–∞–∂–¥—ã–π)

                pnl_gross = (last_price - entry) * qty
                pnl_net = pnl_gross - fee
                roi_gross = round((pnl_gross / margin_used) * 100, 2) if margin_used else 0.0
                roi_net = round((pnl_net / margin_used) * 100, 2) if margin_used else 0.0
                margin_usd = float(trade.get("margin_usd") or margin_used or 1)
                roi_plan = round((pnl_net / margin_usd) * 100, 2) if margin_usd else 0.0

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ –≤—ã—Ö–æ–¥–∞ (—Ü–µ–Ω–∞ fill)
                fill = get_last_exit_fill_price_safe(symbol)
                if fill:
                    fill_price = fill.get("price")
                    latency = fill.get("latency_ms")
                    slippage = round(fill_price - last_price, 6) if fill_price and last_price else None
                    trade["exit_price_bybit"] = fill_price
                    trade["exit_slippage"] = slippage
                    trade["exit_latency_ms"] = latency

                    if fill_price:
                        roi_bybit = round((((fill_price - entry) * qty) - fee) / margin_used * 100, 2) if margin_used else 0.0
                        trade["roi_percent_bybit"] = roi_bybit

                        # ‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π PnL (net) —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥
                        fee_open = entry * qty * 0.00055
                        fee_close = fill_price * qty * 0.00055
                        fee_total = fee_open + fee_close
                        bybit_pnl_net = (fill_price - entry) * qty - fee_total

                        trade["bybit_fee_open"] = round(fee_open, 8)
                        trade["bybit_fee_close"] = round(fee_close, 8)
                        trade["bybit_fee_total"] = round(fee_total, 8)
                        trade["bybit_pnl_net"] = round(bybit_pnl_net, 5)
                else:
                    trade["exit_price_fallback"] = last_price

                # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –∏ —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
                trade["exit_time"] = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                trade["status"] = "closed"  # üõ† [PATCH]

                # üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –≤—ã—Ö–æ–¥–∞ (TP1, TP2, SL, BE, Manual)
                try:
                    tp1_hit = trade.get("tp1_hit")
                    tp2_hit = trade.get("tp2_hit")
                    sl_hit = trade.get("sl_hit")

                    if tp2_hit:
                        exit_reason = "tp2"
                    elif tp1_hit and not tp2_hit:
                        exit_reason = "tp1_be"
                    elif sl_hit:
                        exit_reason = "sl"
                    else:
                        exit_reason = "manual"

                    trade["exit_reason"] = exit_reason

                    # ‚è±Ô∏è –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP2 / SL
                    now = datetime.utcnow()
                    if exit_reason == "tp2":
                        trade["tp2_hit_time"] = now.strftime("%Y-%m-%d %H:%M:%S")
                        if trade.get("opened_at"):
                            dt_open = datetime.strptime(trade["opened_at"], "%Y-%m-%d %H:%M:%S")
                            trade["tp2_duration_sec"] = int((now - dt_open).total_seconds())
                    elif exit_reason == "sl":
                        trade["sl_hit_time"] = now.strftime("%Y-%m-%d %H:%M:%S")
                        if trade.get("opened_at"):
                            dt_open = datetime.strptime(trade["opened_at"], "%Y-%m-%d %H:%M:%S")
                            trade["sl_duration_sec"] = int((now - dt_open).total_seconds())

                except Exception as e:
                    trade["exit_reason"] = "manual"
                    log_to_queue("EXIT_REASON_FAIL", f"{symbol} ‚Üí {e}")

                # üìä ROI-—Å–µ–≥–º–µ–Ω—Ç: —Ä–∞—Å—á–µ—Ç TP1/TP2 —Å —Ç–æ—á–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
                try:
                    tp1_price = float(trade.get("tp1_price") or 0)
                    tp2_price = float(trade.get("tp2_price") or 0)
                    sl_price = float(trade.get("sl_price") or 0)
                    entry_price = float(trade.get("real_entry_price") or 0)
                    qty = float(trade.get("position_qty") or 0)
                    fee_rate = 0.00055
                    margin_used = float(trade.get("margin_used") or 1)
                    actual_exit_price = float(trade.get("exit_price_bybit") or last_price)

                    qty_half = qty / 2

                    # TP1 - –ø–æ–ª–æ–≤–∏–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ TP1
                    profit_tp1 = (tp1_price - entry_price) * qty_half
                    fee_tp1 = (entry_price + tp1_price) * qty_half * fee_rate
                    pnl_tp1_net = profit_tp1 - fee_tp1

                    # TP2 - –æ—Å—Ç–∞–≤—à–∞—è—Å—è –ø–æ–ª–æ–≤–∏–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ TP2 –∏–ª–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ (BE)
                    tp2_hit = trade.get("tp2_hit")
                    if tp2_hit:
                        # TP2 –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ TP2
                        profit_tp2 = (tp2_price - entry_price) * qty_half
                        fee_tp2 = (entry_price + tp2_price) * qty_half * fee_rate
                        pnl_tp2_net = profit_tp2 - fee_tp2
                        exit_tp2_type = "tp2"
                    else:
                        # TP2 –Ω–µ –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ (BE)
                        profit_tp2 = (actual_exit_price - entry_price) * qty_half
                        fee_tp2 = (entry_price + actual_exit_price) * qty_half * fee_rate
                        pnl_tp2_net = profit_tp2 - fee_tp2
                        exit_tp2_type = "be"

                    pnl_final_real = round(pnl_tp1_net + pnl_tp2_net, 4)
                    roi_final_real = round((pnl_final_real / margin_used) * 100, 2)

                    # Stop Loss - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                    loss_sl = (entry_price - sl_price) * qty
                    fee_sl = (entry_price + sl_price) * qty * fee_rate
                    pnl_sl_net = loss_sl - fee_sl
                    roi_sl_real = round((pnl_sl_net / margin_used) * 100, 2)

                    trade["profit_tp1_real"] = round(profit_tp1, 4)
                    trade["profit_tp2_real"] = round(profit_tp2, 4)
                    trade["fee_tp1"] = round(fee_tp1, 4)
                    trade["fee_tp2"] = round(fee_tp2, 4)
                    trade["pnl_tp1_net"] = round(pnl_tp1_net, 4)
                    trade["pnl_tp2_net"] = round(pnl_tp2_net, 4)
                    trade["roi_tp1_real"] = round((pnl_tp1_net / margin_used) * 100, 2)
                    trade["roi_tp2_real"] = round((pnl_tp2_net / margin_used) * 100, 2)
                    trade["roi_final_real"] = roi_final_real
                    trade["pnl_final_real"] = pnl_final_real
                    trade["roi_sl_real"] = roi_sl_real
                    trade["tp2_exit_type"] = exit_tp2_type
                except Exception as e:
                    log_to_queue("TP_SEGMENT_CALC_FAIL", f"{symbol} ‚Üí {e}")

                # üìà –ü–ª–∞–Ω–æ–≤—ã–µ ROI –∏ –¥–æ—Ö–æ–¥ –ø–æ —Å–∏–≥–Ω–∞–ª—É —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ TP1/TP2 (–ø–æ–ª–æ–≤–∏–Ω–∞ –æ–±—ä–µ–º–∞)
                try:
                    lev_conf = get_leverage(trade, config_path="config/leverage_config.yaml")
                    trade["leverage_used_expected"] = lev_conf

                    tp1_price = float(trade.get("tp1_price") or 0)
                    tp2_price = float(trade.get("tp2_price") or 0)
                    sl_price = float(trade.get("sl_price") or 0)
                    entry_price = float(trade.get("real_entry_price") or 0)
                    qty = float(trade.get("position_qty") or 0)
                    margin_planned = float(trade.get("margin_usd") or trade.get("margin_used") or 1)

                    qty_half = qty / 2

                    # ROI –ø—Ä–∏ TP1 (–ø–æ–ª–æ–≤–∏–Ω–∞ –æ–±—ä–µ–º–∞)
                    roi_tp1_plan = ((tp1_price - entry_price) / entry_price) * lev_conf * 100
                    profit_tp1_plan = (tp1_price - entry_price) * qty_half

                    # ROI –ø—Ä–∏ TP2 (–æ—Å—Ç–∞–≤—à–∞—è—Å—è –ø–æ–ª–æ–≤–∏–Ω–∞)
                    roi_tp2_plan = ((tp2_price - entry_price) / entry_price) * lev_conf * 100
                    profit_tp2_plan = (tp2_price - entry_price) * qty_half

                    # –û–±—â–∞—è ROI –ø—Ä–∏ TP1+TP2 (—Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –ø–æ –æ–±—ä–µ–º—É)
                    # TP1: 50% –ø–æ–∑–∏—Ü–∏–∏, TP2: 50% –ø–æ–∑–∏—Ü–∏–∏
                    roi_both_plan = round((roi_tp1_plan * 0.5 + roi_tp2_plan * 0.5), 2)
                    profit_both_plan = round(profit_tp1_plan + profit_tp2_plan, 2)

                    # ROI –ø—Ä–∏ Stop-Loss (–Ω–∞ 100% –ø–æ–∑–∏—Ü–∏–∏)
                    roi_sl_plan = ((sl_price - entry_price) / entry_price) * lev_conf * 100
                    loss_sl_plan = (entry_price - sl_price) * qty

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                    trade["roi_planned"] = round(roi_both_plan, 2)
                    trade["roi_sl_expected"] = round(roi_sl_plan, 2)
                    trade["expected_profit_tp1"] = round(profit_tp1_plan, 2)
                    trade["expected_profit_tp2"] = round(profit_tp2_plan, 2)
                    trade["expected_profit_total"] = profit_both_plan
                    trade["expected_loss_sl"] = round(loss_sl_plan, 2)

                except Exception as e:
                    log_to_queue("PLAN_CALC_FAIL", f"{symbol} ‚Üí {e}")

                # üü° –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤—ã—Ö–æ–¥–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ PnL —á–µ—Ä–µ–∑ API
                trade["order_id_exit"] = (fill.get("orderId") if fill else None) or trade.get("order_id")

                # –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏
                try:
                    dt_open = datetime.strptime(trade["opened_at"], "%Y-%m-%d %H:%M:%S")
                    trade["weekday"] = dt_open.weekday()
                    trade["weekday_name"] = calendar.day_name[dt_open.weekday()]
                    trade["opened_at_full"] = dt_open.strftime("%Y-%m-%d %H:%M:%S")
                    try:
                        dt_close = datetime.strptime(trade["exit_time"], "%Y-%m-%d %H:%M:%S")
                        duration_sec = int((dt_close - dt_open).total_seconds())
                        trade["duration_sec"] = duration_sec
                    except Exception as e:
                        log_to_queue("DURATION_CALC_FAIL", f"{symbol} ‚Üí {e}")
                        duration_sec = None
                except Exception as e:
                    log_to_queue("WEEKDAY_FAIL", f"{symbol} | {e}")

                # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç ROI –∏ PnL (Bybit style), –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                try:
                    if all([
                        trade.get("real_entry_price"),
                        trade.get("position_qty"),
                        trade.get("exit", {}).get("price") or trade.get("exit_price_bybit")
                    ]):
                        entry_val = float(trade["real_entry_price"])
                        pos_qty = float(trade["position_qty"])
                        lev_real = float(trade.get("real_leverage") or 20)
                        fee_rate = 0.00055
                        actual_exit_price = float(trade.get("exit", {}).get("price") or trade.get("exit_price_bybit") or last_price)

                        roi_bybit_style = ((actual_exit_price - entry_val) * lev_real) / entry_val * 100 if entry_val else 0.0
                        trade["roi_bybit_style"] = round(roi_bybit_style, 2)

                        fee_open_val = entry_val * pos_qty * fee_rate
                        fee_close_val = actual_exit_price * pos_qty * fee_rate
                        fee_total_val = fee_open_val + fee_close_val
                        pnl_net_bybit = (actual_exit_price - entry_val) * pos_qty - fee_total_val

                        trade["bybit_fee_open"] = round(fee_open_val, 8)
                        trade["bybit_fee_close"] = round(fee_close_val, 8)
                        trade["bybit_fee_total"] = round(fee_total_val, 8)
                        trade["bybit_pnl_net"] = round(pnl_net_bybit, 5)

                        # –î–æ–ª—è –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã (%)
                        gross_move = pnl_net_bybit + fee_total_val
                        trade["commission_over_roi"] = round((fee_total_val / abs(gross_move)) * 100, 2) if gross_move != 0 else None

                        trade["loss_type"] = "fee_only" if trade["pnl_gross"] > 0 and trade["pnl_net"] < 0 else "price_move"

                        delta_price = abs(actual_exit_price - entry_val)
                        if roi_bybit_style == 0.0 and delta_price > entry_val * 0.001:
                            trade["anomaly_flag"] = True
                            print(f"[‚ö†Ô∏è] ANOMALY_ROI_ZERO: Œî={delta_price:.5f}")
                    else:
                        print(f"[‚õîÔ∏è] EXIT_BLOCK_SKIPPED: missing values for ROI calc")
                except Exception as e:
                    print(f"[üî•] ROI_BLOCK_FAIL: {symbol} | {e}")

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ—á–Ω—ã–π PnL –∏ –∫–æ–º–∏—Å—Å–∏–∏ —á–µ—Ä–µ–∑ API –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ Bybit
                try:
                    if trade.get("order_id"):
                        closed = session.get_closed_pnl(category="linear", symbol=symbol, limit=20)
                    else:
                        closed = {"result": {"list": []}}
                    found = False
                    for item in closed.get("result", {}).get("list", []):
                        if item.get("orderId") in [trade.get("order_id"), trade.get("order_id_exit")]:
                            trade["bybit_pnl_net_api"] = float(item.get("closedPnl", 0))
                            trade["bybit_fee_total_api"] = float(item.get("cumCommission", 0))
                            trade["bybit_avg_entry_api"] = float(item.get("avgEntryPrice", 0))
                            trade["bybit_avg_exit_api"] = float(item.get("avgExitPrice", 0))
                            trade["bybit_closed_size"] = float(item.get("closedSize", 0))
                            trade["order_id_exit"] = item.get("orderId")
                            log_to_queue("PNL_API_FETCHED", (
                                f"{symbol} | {trade.get('trade_id')} | ‚úÖ PnL fetched from Bybit API: "
                                f"{trade['bybit_pnl_net_api']} USDT | Order: {item.get('orderId')}"
                            ))
                            trace("PNL_API_FETCHED", trade, where="bybit_pnl_checker")
                            found = True
                            break
                    if not found:
                        api_list = closed.get("result", {}).get("list", [])
                        if api_list:
                            fallback = api_list[0]
                            trade["bybit_pnl_net_api"] = float(fallback.get("closedPnl", 0))
                            trade["order_id_exit"] = fallback.get("orderId")
                            log_to_queue("PNL_API_USED_FIRST", (
                                f"{symbol} | {trade.get('trade_id')} | fallback API used ‚Üí "
                                f"{fallback.get('orderId')}, pnl={trade['bybit_pnl_net_api']} USDT"
                            ))
                            trace("PNL_API_USED_FIRST", trade, where="bybit_pnl_checker")
                        else:
                            log_to_queue("PNL_NOT_FOUND", f"{symbol} | {trade.get('trade_id')} | –æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            trace("PNL_NOT_FOUND", trade, where="bybit_pnl_checker")
                except Exception as e:
                    log_to_queue("PNL_API_FAIL", f"{symbol} | {e}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π PnL –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                final_pnl = None
                pnl_source = "unknown"
                if trade.get("bybit_pnl_net_api") is not None:
                    final_pnl = trade["bybit_pnl_net_api"]
                    pnl_source = "bybit"
                elif trade.get("bybit_pnl_net_fallback") is not None:
                    final_pnl = trade["bybit_pnl_net_fallback"]
                    pnl_source = "fallback"
                elif trade.get("bybit_pnl_net") is not None:
                    final_pnl = trade["bybit_pnl_net"]
                    pnl_source = "calc"

                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –¥—É–±–ª–∏—Ä—É–µ–º order_id_exit –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                trade["order_id_exit"] = trade.get("order_id")

                # üßÆ –§–∏–Ω–∞–ª—å–Ω—ã–π ROI —Å —É—á—ë—Ç–æ–º TP1/TP2 –ª–æ–≥–∏–∫–∏
                roi_final = trade.get("roi_final_real")
                try:
                    if roi_final is not None:
                        trade["roi_percent"] = roi_final
                        trade["roi_source"] = "real_split"
                    else:
                        trade["roi_percent"] = round((final_pnl / trade["margin_used"]) * 100, 2)
                        trade["roi_source"] = pnl_source
                except Exception:
                    trade["roi_percent"] = "?"
                    trade["roi_source"] = "fail"
                trade["roi_percent_initial"] = trade["roi_percent"]

                # üéØ Hit-—Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ exit_reason ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã
                if trade.get("tp1_hit") is not True:
                    trade["tp1_hit"] = exit_reason in ["tp1_be", "tp2"]
                if trade.get("tp2_hit") is not True:
                    trade["tp2_hit"] = exit_reason == "tp2"
                if trade.get("sl_hit") is not True:
                    trade["sl_hit"] = exit_reason == "sl"

                # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback-–ø–æ–¥—Å—á—ë—Ç, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                if trade.get("bybit_pnl_net_fallback") is not None:
                    trade["pnl_net"] = trade["bybit_pnl_net_fallback"]
                    trade["roi_source"] = "fallback"
                    trade["pnl_net_initial"] = trade["pnl_net"]

                # üß† –§–∏–∫—Å–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP/SL –¥–ª—è —Å–¥–µ–ª–∫–∏ (–≤ —Ç.—á. multi-target)
                exit_price_val = float(trade.get("exit_price_bybit") or last_price)
                try:
                    if "strategy_2" in str(trade.get("strategy_id", "")):
                        # üõ† [PATCH]: –û—Ç–º–µ—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –¥–ª—è –º–Ω–æ–≥–æ—Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                        trade["tp1_hit"] = True if trade["exit_reason"] == "tp" or exit_price_val >= float(trade.get("tp1_price", 0) or 0) else False
                        trade["tp2_hit"] = True if exit_price_val >= float(trade.get("tp2_price", 0) or 0) else False
                        trade["sl_hit"] = True if trade["exit_reason"] == "sl" else False
                    else:
                        trade["tp1_hit"] = True if trade.get("tp1_price") and exit_price_val >= float(trade["tp1_price"]) else False
                        trade["tp2_hit"] = True if trade.get("tp2_price") and exit_price_val >= float(trade["tp2_price"]) else False
                        trade["sl_hit"] = True if trade.get("sl_price") and exit_price_val <= float(trade["sl_price"]) else False
                    # –§–ª–∞–≥–∏ —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞ (AI) –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
                    trade["early_exit"] = False
                    trade["early_exit_reason"] = None
                    trade["exit_explanation"] = None
                    trade["exit_ai_score"] = None
                except Exception as e:
                    log_to_queue("TP_SL_EVAL_FAIL", f"{symbol} | {e}")

                # ROI –∫–∞–∫ –≤ UI Bybit (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ –ø–æ–∑–∏—Ü–∏–∏)
                try:
                    entry_price_val = float(trade["real_entry_price"])
                    exit_price_val = float(trade.get("exit_price_bybit") or last_price)
                    leverage_val = float(trade.get("real_leverage", 20))
                    roi_ui = ((exit_price_val - entry_price_val) / entry_price_val * leverage_val * 100) if entry_price_val else 0.0
                    trade["roi_ui"] = round(roi_ui, 2)
                except Exception as e:
                    trade["roi_ui"] = None

                # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º TP/SL order_id –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É trade –ø–µ—Ä–µ–¥ –ª–æ–≥–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å—é –≤ –ë–î
                trade["tp1_order_id"] = trade.get("tp1_order_id")
                trade["tp2_order_id"] = trade.get("tp2_order_id")
                trade["sl_order_id"] = trade.get("sl_order_id")

                log_to_queue("EXIT_PREVIEW_TRIGGERED", f"{symbol} | –≥–æ—Ç–æ–≤–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏")

                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
                try:
                    def yesno(v): return "–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ" if v else "–Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ"
                    def safe(v, d="?"):
                        return v if v is not None else d

                    duration = safe(duration_sec, 0)
                    message = (
                        f"üìÑ <b>Trade Recorded: {symbol} | {trade.get('trade_id')}</b>\n"
                        f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫:          {trade.get('source_name', '‚Äî')}\n"
                        f"{'‚îÄ' * 28}\n"
                        f"üü¢ Entry Price:        {safe(entry):.5f}\n"
                        f"üî¥ Exit Price:         {safe(last_price):.5f}\n"
                        f"üì¶ Qty:                {safe(qty):.4f}\n"
                        f"‚öñÔ∏è Leverage:            {safe(trade.get('real_leverage'))}x\n"
                        f"üíµ Margin Used:        ${safe(trade.get('margin_used'))}\n"
                        f"{'‚îÄ' * 28}\n"
                        f"üìá <b>Bybit (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):</b>\n"
                        f"‚úÖ ROI (API):          {safe(trade.get('roi_percent_bybit'))}%\n"
                        f"üìâ ROI (UI):           {safe(trade.get('roi_ui'))}% | Bybit: {safe(trade.get('roi_bybit_style'))}%\n"
                        f"üí∏ –ö–æ–º–∏—Å—Å–∏—è (—Ñ–∞–∫—Ç):    {safe(trade.get('bybit_fee_total'))} USDT\n"
                        f"üì§ PnL (source):       {safe(final_pnl)} USDT ({safe(pnl_source)})\n"
                        f"{'‚îÄ' * 28}\n"
                        f"üìà <b>–û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ —Å–∏–≥–Ω–∞–ª—É:</b>\n"
                        f"‚Ä¢ TP1: {safe(trade.get('tp1_price'))} ‚Üí ROI –ø–ª–∞–Ω: {safe(trade.get('roi_planned'))}%\n"
                        f"‚Ä¢ SL:  {safe(trade.get('sl_price'))} ‚Üí ROI SL:    {safe(trade.get('roi_sl_expected'))}%\n"
                        f"üí∞ Profit @ TP1:      +{safe(trade.get('expected_profit_tp1'))} USDT\n"
                        f"üí£ Loss   @ SL:       -{safe(trade.get('expected_loss_sl'))} USDT\n"
                        f"{'‚îÄ' * 28}\n"
                        f"üìâ <b>–ü–æ–ª—É—á–µ–Ω–æ (—Ñ–∞–∫—Ç):</b>\n"
                        f"‚Ä¢ ROI (Net):           {safe(trade.get('roi_percent'))}%\n"
                        f"‚Ä¢ ROI (TP1):           {safe(trade.get('roi_tp1_real'))}%\n"
                        f"‚Ä¢ ROI (TP2):           {safe(trade.get('roi_tp2_real'))}%\n"
                        f"‚Ä¢ ROI (SL):            {safe(trade.get('roi_sl_real'))}%\n"
                        f"‚Ä¢ ROI (Final):         {safe(trade.get('roi_final_real'))}%\n"
                        f"‚è±Ô∏è Duration:            {duration // 60}m {duration % 60}s\n"
                        f"{'‚îÄ' * 28}\n"
                        f"üìå <b>–§–ò–ù–ê–õ:</b>\n"
                        f"üí• –†–ï–ó–£–õ–¨–¢–ê–¢:          {safe(final_pnl)} USDT\n"
                        f"üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:         {safe(trade.get('roi_percent'))}% –æ—Ç –º–∞—Ä–∂–∏\n"
                        f"üìÜ Day:                {safe(trade.get('weekday_name'))} ({safe(trade.get('opened_at_full'))})\n"
                        f"üö© Exit Reason:        {safe(trade.get('exit_reason'))} | TP2 type: {safe(trade.get('tp2_exit_type'))}\n"
                        f"{'‚îÄ' * 28}\n"
                        f"üìç <b>TP/SL –°—Ç–∞—Ç—É—Å:</b>\n"
                        f"‚Ä¢ TP1:  {yesno(trade.get('tp1_hit'))}\n"
                        f"‚Ä¢ TP2:  {yesno(trade.get('tp2_hit'))}\n"
                        f"‚Ä¢ SL:   {yesno(trade.get('sl_hit'))}\n"
                        f"‚Ä¢ Early Exit:         {safe(trade.get('early_exit'))}\n"
                    )

                    log_to_queue("EXIT_INSERT_PREVIEW", message)

                    try:
                        ghost_write_safe("trades", trade)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å —Å–¥–µ–ª–∫–∏ –≤ –ë–î
                        trace("EXIT_RECORDED", {"symbol": symbol, "roi": roi_net, "id": trade.get("id")}, where="position_exit_tracker")
                        log_to_queue("DEAL_CLOSED", f"{symbol} | ROI: {roi_net}%")
                        print(f"[‚úÖ] WRITE_OK ‚Üí {symbol}")
                    except Exception as e:
                        print(f"[‚ùå] FINAL_EXIT_BLOCK_FAIL ‚Üí {symbol} | {e}")
                        continue
                except Exception as e:
                    print(f"[‚ùå] EXIT_INSERT_PREVIEW_FAIL ‚Üí {symbol} | {e}")
                    continue

                # (–ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º exit_time –Ω–µ –∑–∞–¥–∞–Ω, –Ω–µ —É–¥–∞–ª—è–µ–º —Å–¥–µ–ª–∫—É –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö)
                if not trade.get("exit_time"):
                    log_to_queue("EXIT_TIME_MISSING", f"{symbol} | exit_time –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–¥–µ–ª–∫–∞ –Ω–µ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö")
                    still_open.append(trade)
        except Exception as e:
            trace("EXIT_CHECK_FAIL", {"error": str(e), "symbol": trade.get("symbol"), "id": trade.get("id")}, where="position_exit_tracker")
            log_to_queue("EXIT_EXCEPTION", f"{symbol} | –æ—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ try: {str(e)}")

    save_open_trades(still_open)

if __name__ == "__main__":
    print("üîÅ GHOST Exit Monitor –∑–∞–ø—É—â–µ–Ω...")
    while True:
        check_and_close_positions()
        time.sleep(10) 