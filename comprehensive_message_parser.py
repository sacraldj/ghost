#!/usr/bin/env python3
"""
–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –°–û–û–ë–©–ï–ù–ò–ô –ò–ó TELEGRAM –ö–ê–ù–ê–õ–û–í
–°–æ–±–∏—Ä–∞–µ—Ç –í–°–ï —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
"""

import asyncio
import os
import json
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from dotenv import load_dotenv

load_dotenv()

try:
    from telethon import TelegramClient
    from supabase import create_client, Client
    import openai
    import google.generativeai as genai
except ImportError as e:
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon supabase openai google-generativeai")
    exit(1)

@dataclass
class ParsedMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_id: str
    trader_id: str
    raw_text: str
    timestamp: datetime
    message_type: str  # 'trading_signal', 'news', 'whale_alert', 'analysis', 'other'
    
    # –¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    symbol: Optional[str] = None
    side: Optional[str] = None  # BUY/SELL/HOLD
    entry_price: Optional[float] = None
    targets: List[float] = None
    stop_loss: Optional[float] = None
    leverage: Optional[int] = None
    
    # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    news_category: Optional[str] = None  # 'regulation', 'whale_movement', 'partnership', etc.
    mentioned_tokens: List[str] = None
    sentiment: Optional[str] = None  # 'positive', 'negative', 'neutral'
    
    # Whale –¥–∞–Ω–Ω—ã–µ
    whale_action: Optional[str] = None  # 'buy', 'sell', 'transfer'
    whale_amount: Optional[float] = None
    whale_token: Optional[str] = None
    
    # AI –∞–Ω–∞–ª–∏–∑
    ai_confidence: Optional[float] = None
    ai_summary: Optional[str] = None
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    confidence: float = 0.5
    is_valid: bool = False
    parsing_method: str = "rule_based"
    
    def __post_init__(self):
        if self.targets is None:
            self.targets = []
        if self.mentioned_tokens is None:
            self.mentioned_tokens = []

class ComprehensiveMessageParser:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        # API –∫–ª—é—á–∏
        self.telegram_api_id = os.getenv('TELEGRAM_API_ID')
        self.telegram_api_hash = os.getenv('TELEGRAM_API_HASH')
        self.telegram_phone = os.getenv('TELEGRAM_PHONE')
        
        self.supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
        
        self.openai_key = os.getenv('OPENAI_API_KEY')
        self.gemini_key = os.getenv('GEMINI_API_KEY')
        
        # –ö–ª–∏–µ–Ω—Ç—ã
        self.telegram_client = None
        self.supabase_client = None
        
        # AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if self.openai_key:
            openai.api_key = self.openai_key
            print("‚úÖ OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        if self.gemini_key:
            genai.configure(api_key=self.gemini_key)
            self.gemini_model = genai.GenerativeModel('gemini-1.5-flash')
            print("‚úÖ Gemini –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.channels = {
            '-1001263635145': {
                'name': '–ö—Ä–∏–ø—Ç–æ–ê—Ç–∞–∫–∞ 24',
                'trader_id': 'cryptoattack24',
                'type': 'news_analytics'
            },
            '-1001288385100': {
                'name': 'Whales Crypto Guide', 
                'trader_id': 'whales_guide_main',
                'type': 'trading_signals'
            }
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_messages': 0,
            'by_type': {
                'trading_signal': 0,
                'news': 0,
                'whale_alert': 0,
                'analysis': 0,
                'other': 0
            },
            'saved_to_db': 0,
            'errors': 0
        }
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.patterns = {
            'crypto_symbols': r'\b([A-Z]{2,10}(?:USDT?|BTC|ETH)?)\b',
            'prices': r'\$?(\d+(?:,\d{3})*(?:\.\d{1,8})?)',
            'percentages': r'([+-]?\d+(?:\.\d+)?%)',
            'whale_amounts': r'(\d+(?:,\d{3})*(?:\.\d+)?)\s*(–º–ª–Ω|—Ç—ã—Å|K|M|B)',
            'trading_terms': r'\b(long|short|buy|sell|entry|target|tp\d*|sl|stop|leverage)\b',
            'news_keywords': r'\b(SEC|–æ–±–≤–∏–Ω—è–µ—Ç|–ø–æ–¥–∞–ª–∞ –≤ —Å—É–¥|–∫—É–ø–∏–ª–∏|–ø—Ä–æ–¥–∞–ª–∏|—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏|–∫–∏—Ç–æ–≤)\b'
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞...")
        
        # Telegram
        self.telegram_client = TelegramClient('ghost_session', self.telegram_api_id, self.telegram_api_hash)
        await self.telegram_client.start(phone=self.telegram_phone)
        
        if not await self.telegram_client.is_user_authorized():
            print("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram")
            return False
        
        # Supabase
        self.supabase_client = create_client(self.supabase_url, self.supabase_key)
        
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    
    async def parse_channel_history(self, channel_id: str, limit: int = 200):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞"""
        channel_info = self.channels.get(channel_id)
        if not channel_info:
            print(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"\nüì° –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {channel_info['name']}")
        print(f"   –¢–∏–ø: {channel_info['type']}")
        print(f"   –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {limit}")
        
        try:
            entity = await self.telegram_client.get_entity(int(channel_id))
            print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫: {entity.title}")
            
            messages_processed = 0
            messages_parsed = 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            async for message in self.telegram_client.iter_messages(entity, limit=limit):
                if not message.text:
                    continue
                
                messages_processed += 1
                self.stats['total_messages'] += 1
                
                # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                parsed = await self.parse_message(message, channel_info)
                
                if parsed:
                    messages_parsed += 1
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                    await self.save_to_database(parsed)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.stats['by_type'][parsed.message_type] += 1
                    self.stats['saved_to_db'] += 1
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                if messages_processed % 50 == 0:
                    print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {messages_processed}, —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {messages_parsed}")
            
            print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {messages_processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {messages_parsed} —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            self.stats['errors'] += 1
    
    async def parse_message(self, message, channel_info) -> Optional[ParsedMessage]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.text
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞
            message_type = self.classify_message_type(text)
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            parsed = ParsedMessage(
                message_id=f"{channel_info['trader_id']}_{message.id}",
                trader_id=channel_info['trader_id'],
                raw_text=text,
                timestamp=message.date,
                message_type=message_type,
                confidence=0.5,
                is_valid=False,
                parsing_method="rule_based"
            )
            
            # –ü–∞—Ä—Å–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if parsed.message_type == 'trading_signal':
                await self.parse_trading_signal(parsed, text)
            elif parsed.message_type == 'news':
                await self.parse_news_message(parsed, text)
            elif parsed.message_type == 'whale_alert':
                await self.parse_whale_alert(parsed, text)
            elif parsed.message_type == 'analysis':
                await self.parse_analysis_message(parsed, text)
            
            # AI –∞–Ω–∞–ª–∏–∑
            await self.ai_enhance_parsing(parsed)
            
            return parsed
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def classify_message_type(self, text: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text_lower = text.lower()
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        trading_keywords = ['long', 'short', 'buy', 'sell', 'entry', 'target', 'tp1', 'tp2', 'sl', 'leverage']
        if any(keyword in text_lower for keyword in trading_keywords):
            return 'trading_signal'
        
        # Whale alerts
        whale_keywords = ['–ø–æ—Ç—Ä–∞—Ç–∏–ª–∏', '–∫—É–ø–∏–ª–∏', '–ø—Ä–æ–¥–∞–ª–∏', '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', '–∫–∏—Ç–æ–≤', '–º–ª–Ω', '–∞–∫—Ç–∏–≤—ã']
        if any(keyword in text_lower for keyword in whale_keywords):
            return 'whale_alert'
        
        # –ù–æ–≤–æ—Å—Ç–∏
        news_keywords = ['sec', '–æ–±–≤–∏–Ω—è–µ—Ç', '–ø–æ–¥–∞–ª–∞ –≤ —Å—É–¥', '–∫–æ–º–ø–∞–Ω–∏–∏', '—Ä–µ–≥—É–ª—è—Ç–æ—Ä']
        if any(keyword in text_lower for keyword in news_keywords):
            return 'news'
        
        # –ê–Ω–∞–ª–∏–∑
        analysis_keywords = ['–∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–≥–Ω–æ–∑', '—Ç—Ä–µ–Ω–¥', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ']
        if any(keyword in text_lower for keyword in analysis_keywords):
            return 'analysis'
        
        return 'other'
    
    async def parse_trading_signal(self, parsed: ParsedMessage, text: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        # –°–∏–º–≤–æ–ª
        symbols = re.findall(self.patterns['crypto_symbols'], text.upper())
        if symbols:
            parsed.symbol = symbols[0]
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if any(word in text.lower() for word in ['long', 'buy', '–ø–æ–∫—É–ø–∫–∞']):
            parsed.side = 'BUY'
        elif any(word in text.lower() for word in ['short', 'sell', '–ø—Ä–æ–¥–∞–∂–∞']):
            parsed.side = 'SELL'
        
        # –¶–µ–Ω—ã
        prices = re.findall(self.patterns['prices'], text)
        if prices:
            try:
                parsed.entry_price = float(prices[0].replace(',', ''))
                if len(prices) > 1:
                    parsed.targets = [float(p.replace(',', '')) for p in prices[1:]]
            except:
                pass
    
    async def parse_news_message(self, parsed: ParsedMessage, text: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –£–ø–æ–º—è–Ω—É—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã
        tokens = re.findall(self.patterns['crypto_symbols'], text.upper())
        parsed.mentioned_tokens = list(set(tokens))
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–∏
        if 'sec' in text.lower() or '—Ä–µ–≥—É–ª—è—Ç–æ—Ä' in text.lower():
            parsed.news_category = 'regulation'
        elif '—Å—É–¥' in text.lower():
            parsed.news_category = 'legal'
        elif '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ' in text.lower():
            parsed.news_category = 'partnership'
        else:
            parsed.news_category = 'general'
    
    async def parse_whale_alert(self, parsed: ParsedMessage, text: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ whale alert"""
        # –î–µ–π—Å—Ç–≤–∏–µ
        if any(word in text.lower() for word in ['–∫—É–ø–∏–ª–∏', '–ø–æ–∫—É–ø–∫—É']):
            parsed.whale_action = 'buy'
        elif any(word in text.lower() for word in ['–ø—Ä–æ–¥–∞–ª–∏', '–≤—ã–≤–µ–ª–∏']):
            parsed.whale_action = 'sell'
        else:
            parsed.whale_action = 'transfer'
        
        # –°—É–º–º–∞
        amounts = re.findall(self.patterns['whale_amounts'], text)
        if amounts:
            try:
                amount, unit = amounts[0]
                multiplier = {'—Ç—ã—Å': 1000, '–º–ª–Ω': 1000000, 'K': 1000, 'M': 1000000, 'B': 1000000000}
                parsed.whale_amount = float(amount.replace(',', '')) * multiplier.get(unit, 1)
            except:
                pass
        
        # –¢–æ–∫–µ–Ω
        tokens = re.findall(r'#([A-Z]+)', text)
        if tokens:
            parsed.whale_token = tokens[0]
    
    async def parse_analysis_message(self, parsed: ParsedMessage, text: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –£–ø–æ–º—è–Ω—É—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã
        tokens = re.findall(self.patterns['crypto_symbols'], text.upper())
        parsed.mentioned_tokens = list(set(tokens))
        
        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        positive_words = ['—Ä–æ—Å—Ç', '–ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è', '–±—ã—á–∏–π', '–ø–æ–∫—É–ø–∫–∞']
        negative_words = ['–ø–∞–¥–µ–Ω–∏–µ', '—Å–Ω–∏–∂–µ–Ω–∏–µ', '–º–µ–¥–≤–µ–∂–∏–π', '–ø—Ä–æ–¥–∞–∂–∞']
        
        if any(word in text.lower() for word in positive_words):
            parsed.sentiment = 'positive'
        elif any(word in text.lower() for word in negative_words):
            parsed.sentiment = 'negative'
        else:
            parsed.sentiment = 'neutral'
    
    async def ai_enhance_parsing(self, parsed: ParsedMessage):
        """AI —É–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ OpenAI"""
        try:
            if self.openai_key:
                prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:
                
                "{parsed.raw_text}"
                
                –û–ø—Ä–µ–¥–µ–ª–∏:
                1. –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª, –Ω–æ–≤–æ—Å—Ç–∏, whale alert, –∞–Ω–∞–ª–∏–∑)
                2. –£–ø–æ–º—è–Ω—É—Ç—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                3. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ/–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ)
                4. –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
                5. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ (0-100%)
                
                –û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
                {{"type": "...", "cryptocurrencies": [...], "sentiment": "...", "summary": "...", "confidence": 85}}
                """
                
                from openai import OpenAI
                client = OpenAI(api_key=self.openai_key)
                
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=300,
                    temperature=0.3
                )
                
                try:
                    ai_result = json.loads(response.choices[0].message.content)
                    parsed.ai_confidence = ai_result.get('confidence', 50) / 100
                    parsed.ai_summary = ai_result.get('summary', '')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI
                    if ai_result.get('cryptocurrencies'):
                        parsed.mentioned_tokens = ai_result['cryptocurrencies']
                    if ai_result.get('sentiment'):
                        parsed.sentiment = ai_result['sentiment']
                        
                except Exception as parse_error:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞: {parse_error}")
                    parsed.ai_confidence = 0.5
                    parsed.ai_summary = 'AI –∞–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                    
        except Exception as e:
            print(f"   ‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            parsed.ai_confidence = 0.5
    
    async def save_to_database(self, parsed: ParsedMessage):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –§–∏–ª—å—Ç—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å —Å–∏–º–≤–æ–ª–æ–º
            is_actual_signal = (
                parsed.message_type == 'trading_signal' and 
                parsed.symbol and 
                parsed.is_valid and
                (parsed.entry_price or parsed.targets)
            )
            
            # –°—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            raw_data = {
                'trader_id': parsed.trader_id,
                'source_msg_id': parsed.message_id,
                'text': parsed.raw_text,
                'posted_at': parsed.timestamp.isoformat(),
                'meta': {
                    'source_type': 'telegram',
                    'message_type': parsed.message_type,
                    'is_actual_signal': is_actual_signal,
                    'parsing_method': parsed.parsing_method
                },
                'processed': is_actual_signal
            }
            
            raw_result = self.supabase_client.table('signals_raw').upsert(raw_data).execute()
            print(f"   ‚úÖ –°—ã—Ä–æ–π —Å–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {parsed.trader_id}")
            
            # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if is_actual_signal:
                # –ü–æ–ª—É—á–∞–µ–º raw_id –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                raw_id = raw_result.data[0]['raw_id'] if raw_result.data else None
                
                processed_data = {
                    'signal_id': f"{parsed.trader_id}_{parsed.message_id}",
                    'trader_id': parsed.trader_id,
                    'raw_id': raw_id,
                    'posted_at': parsed.timestamp.isoformat(),
                    'symbol': parsed.symbol,
                    'side': parsed.side,
                    'entry_type': 'market',
                    'entry': parsed.entry_price,
                    'range_low': None,
                    'range_high': None,
                    'tp1': parsed.targets[0] if len(parsed.targets) > 0 else None,
                    'tp2': parsed.targets[1] if len(parsed.targets) > 1 else None,
                    'tp3': parsed.targets[2] if len(parsed.targets) > 2 else None,
                    'tp4': parsed.targets[3] if len(parsed.targets) > 3 else None,
                    'sl': parsed.stop_loss,
                    'leverage_hint': parsed.leverage,
                    'confidence': parsed.confidence or 0.7,
                    'parsed_at': parsed.timestamp.isoformat(),
                    'parse_version': 'v1.0',
                    'is_valid': True
                }
                
                self.supabase_client.table('signals_parsed').upsert(processed_data).execute()
                print(f"   üéØ –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {parsed.symbol} {parsed.side}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
    
    async def run_comprehensive_parsing(self, messages_per_channel: int = 200):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 60)
        
        if not await self.initialize():
            return False
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for channel_id in self.channels:
            await self.parse_channel_history(channel_id, messages_per_channel)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['total_messages']}")
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {self.stats['saved_to_db']}")
        print(f"   –û—à–∏–±–æ–∫: {self.stats['errors']}")
        
        print("\nüìã –ü–û –¢–ò–ü–ê–ú –°–û–û–ë–©–ï–ù–ò–ô:")
        for msg_type, count in self.stats['by_type'].items():
            print(f"   {msg_type}: {count}")
        
        await self.telegram_client.disconnect()
        print("\n‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = ComprehensiveMessageParser()
    await parser.run_comprehensive_parsing(messages_per_channel=200)

if __name__ == "__main__":
    asyncio.run(main())
