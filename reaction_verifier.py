#!/usr/bin/env python3
"""
GHOST | Reaction Verifier
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ —Å —Ñ–∞–∫—Ç–æ–º (–ø–æ–ø–∞–ª/–Ω–µ –ø–æ–ø–∞–ª) –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—á–Ω–æ—Å—Ç–∏
"""

import json
import sqlite3
import time
from datetime import datetime, timedelta
from reaction_predictor import get_prediction_accuracy
from reaction_logger import get_reaction_stats

DB_PATH = "data/verification.db"

def init_verification_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS prediction_verification (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            news_id TEXT UNIQUE,
            cluster TEXT,
            predicted_reaction TEXT,
            actual_reaction TEXT,
            predicted_change REAL,
            actual_change REAL,
            direction_correct BOOLEAN,
            magnitude_error REAL,
            reaction_type_match BOOLEAN,
            accuracy_score REAL, -- 0.0 –¥–æ 1.0
            verification_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # –ò–Ω–¥–µ–∫—Å—ã
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_news_id ON prediction_verification(news_id)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_cluster ON prediction_verification(cluster)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_direction_correct ON prediction_verification(direction_correct)")
    
    conn.commit()
    conn.close()

def verify_prediction(news_id):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        accuracy = get_prediction_accuracy(news_id)
        
        if not accuracy:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {news_id}")
            return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π score —Ç–æ—á–Ω–æ—Å—Ç–∏
        accuracy_score = 0.0
        if accuracy["direction_correct"]:
            accuracy_score += 0.5
        if accuracy["reaction_type_match"]:
            accuracy_score += 0.3
        if accuracy["magnitude_error"] < 1.0:  # –û—à–∏–±–∫–∞ –º–µ–Ω–µ–µ 1%
            accuracy_score += 0.2
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        conn_pred = sqlite3.connect("data/predictions.db")
        cursor_pred = conn_pred.cursor()
        
        cursor_pred.execute("""
            SELECT cluster, predicted_reaction, predicted_change_percent
            FROM news_predictions WHERE news_id = ?
        """, (news_id,))
        
        pred_result = cursor_pred.fetchone()
        if not pred_result:
            return None
            
        cluster, predicted_reaction, predicted_change = pred_result
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        cursor.execute("""
            INSERT OR REPLACE INTO prediction_verification 
            (news_id, cluster, predicted_reaction, actual_reaction, predicted_change,
             actual_change, direction_correct, magnitude_error, reaction_type_match, accuracy_score)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            news_id,
            cluster,
            predicted_reaction,
            accuracy.get("actual_reaction", "unknown"),
            predicted_change,
            accuracy["actual"],
            accuracy["direction_correct"],
            accuracy["magnitude_error"],
            accuracy["reaction_type_match"],
            accuracy_score
        ))
        
        conn.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "news_id": news_id,
            "cluster": cluster,
            "predicted": {
                "reaction": predicted_reaction,
                "change": predicted_change
            },
            "actual": {
                "reaction": accuracy.get("actual_reaction", "unknown"),
                "change": accuracy["actual"]
            },
            "accuracy": {
                "direction_correct": accuracy["direction_correct"],
                "magnitude_error": accuracy["magnitude_error"],
                "reaction_type_match": accuracy["reaction_type_match"],
                "score": accuracy_score
            }
        }
        
        print(f"‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ {news_id}: {accuracy_score:.1%} —Ç–æ—á–Ω–æ—Å—Ç—å")
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        conn.rollback()
        return None
    finally:
        conn.close()

def get_verification_stats(cluster=None, days=30):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        if cluster:
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_predictions,
                    AVG(accuracy_score) as avg_accuracy,
                    SUM(CASE WHEN direction_correct THEN 1 ELSE 0 END) as correct_directions,
                    SUM(CASE WHEN reaction_type_match THEN 1 ELSE 0 END) as correct_types,
                    AVG(magnitude_error) as avg_magnitude_error
                FROM prediction_verification 
                WHERE cluster = ? AND verification_timestamp >= datetime('now', '-{} days')
            """.format(days), (cluster,))
        else:
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_predictions,
                    AVG(accuracy_score) as avg_accuracy,
                    SUM(CASE WHEN direction_correct THEN 1 ELSE 0 END) as correct_directions,
                    SUM(CASE WHEN reaction_type_match THEN 1 ELSE 0 END) as correct_types,
                    AVG(magnitude_error) as avg_magnitude_error
                FROM prediction_verification 
                WHERE verification_timestamp >= datetime('now', '-{} days')
            """.format(days))
        
        result = cursor.fetchone()
        if not result:
            return None
            
        total, avg_acc, correct_dir, correct_types, avg_mag_error = result
        
        if total == 0:
            return None
            
        stats = {
            "total_predictions": total,
            "avg_accuracy": avg_acc,
            "direction_accuracy": correct_dir / total,
            "type_accuracy": correct_types / total,
            "avg_magnitude_error": avg_mag_error
        }
        
        return stats
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None
    finally:
        conn.close()

def get_cluster_performance():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT 
                cluster,
                COUNT(*) as total,
                AVG(accuracy_score) as avg_accuracy,
                SUM(CASE WHEN direction_correct THEN 1 ELSE 0 END) * 100.0 / COUNT(*) as direction_accuracy
            FROM prediction_verification 
            WHERE verification_timestamp >= datetime('now', '-30 days')
            GROUP BY cluster
            ORDER BY avg_accuracy DESC
        """)
        
        results = cursor.fetchall()
        performance = []
        
        for cluster, total, avg_acc, dir_acc in results:
            performance.append({
                "cluster": cluster,
                "total_predictions": total,
                "avg_accuracy": avg_acc,
                "direction_accuracy": dir_acc
            })
        
        return performance
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return []
    finally:
        conn.close()

def identify_weak_patterns():
    """–í—ã—è–≤–ª–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª—É—á–∞–∏ —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        cursor.execute("""
            SELECT 
                cluster,
                predicted_reaction,
                actual_reaction,
                COUNT(*) as count,
                AVG(accuracy_score) as avg_accuracy
            FROM prediction_verification 
            WHERE accuracy_score < 0.5 AND verification_timestamp >= datetime('now', '-30 days')
            GROUP BY cluster, predicted_reaction, actual_reaction
            ORDER BY count DESC
        """)
        
        results = cursor.fetchall()
        weak_patterns = []
        
        for cluster, pred_reaction, actual_reaction, count, avg_acc in results:
            weak_patterns.append({
                "cluster": cluster,
                "predicted": pred_reaction,
                "actual": actual_reaction,
                "frequency": count,
                "avg_accuracy": avg_acc,
                "issue": f"–ß–∞—Å—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º '{pred_reaction}', –Ω–æ –ø–æ–ª—É—á–∞–µ–º '{actual_reaction}'"
            })
        
        return weak_patterns
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–ª–∞–±—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return []
    finally:
        conn.close()

def generate_verification_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üìä –û–¢–ß–ï–¢ –û –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò GHOST")
    print("=" * 50)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    overall_stats = get_verification_stats()
    if overall_stats:
        print(f"üìà –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {overall_stats['avg_accuracy']:.1%}")
        print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {overall_stats['direction_accuracy']:.1%}")
        print(f"üìã –¢–æ—á–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ —Ä–µ–∞–∫—Ü–∏–∏: {overall_stats['type_accuracy']:.1%}")
        print(f"üìè –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –≤–µ–ª–∏—á–∏–Ω—ã: {overall_stats['avg_magnitude_error']:.2f}%")
        print(f"üìä –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {overall_stats['total_predictions']}")
    
    print("\n" + "=" * 50)
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
    cluster_performance = get_cluster_performance()
    if cluster_performance:
        print("üèÜ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–û –ö–õ–ê–°–¢–ï–†–ê–ú:")
        for perf in cluster_performance[:5]:  # –¢–æ–ø-5
            print(f"‚Ä¢ {perf['cluster']}: {perf['avg_accuracy']:.1%} ({perf['total_predictions']} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π)")
    
    print("\n" + "=" * 50)
    
    # –°–ª–∞–±—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    weak_patterns = identify_weak_patterns()
    if weak_patterns:
        print("‚ö†Ô∏è –°–õ–ê–ë–´–ï –ü–ê–¢–¢–ï–†–ù–´:")
        for pattern in weak_patterns[:3]:  # –¢–æ–ø-3 –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
            print(f"‚Ä¢ {pattern['cluster']}: {pattern['issue']}")
            print(f"  –ß–∞—Å—Ç–æ—Ç–∞: {pattern['frequency']} | –¢–æ—á–Ω–æ—Å—Ç—å: {pattern['avg_accuracy']:.1%}")
    
    print("\n" + "=" * 50)

def auto_verify_predictions():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    conn = sqlite3.connect("data/reactions.db")
    cursor = conn.cursor()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å (–ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 1 —á–∞—Å–∞)
        current_time = int(time.time())
        one_hour_ago = (current_time - 3600) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        cursor.execute("""
            SELECT news_id FROM news_reactions 
            WHERE price_1h IS NOT NULL 
            AND event_timestamp <= ?
        """, (one_hour_ago,))
        
        news_ids = [row[0] for row in cursor.fetchall()]
        
        verified_count = 0
        for news_id in news_ids:
            result = verify_prediction(news_id)
            if result:
                verified_count += 1
        
        print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ {verified_count} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_verification_database()
    
    # –¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    test_news_id = "test_001"
    verification = verify_prediction(test_news_id)
    
    if verification:
        print(f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {verification}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_verification_report()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    auto_verify_predictions() 