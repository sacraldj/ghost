#!/usr/bin/env python3
"""
GHOST System Launcher
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã Ghost
"""

import asyncio
import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.getcwd())

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_supabase_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    try:
        from signals.signal_orchestrator_with_supabase import SignalOrchestratorWithSupabase
        
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
        orchestrator = SignalOrchestratorWithSupabase()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connected = await orchestrator.test_supabase_connection()
        
        if connected:
            logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await orchestrator.get_stats()
            logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–≤: {len(stats['parsers_available'])}")
            logger.info(f"üéØ –ü–∞—Ä—Å–µ—Ä—ã: {', '.join(stats['parsers_available'])}")
            
            return orchestrator
        else:
            logger.error("‚ùå Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None

async def test_signal_processing(orchestrator):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    if not orchestrator:
        return
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    test_signals = [
        {
            'text': '''
            Longing #BTC Here
            
            Long (5x - 10x)
            
            Entry: $45000 - $44000
            
            Targets: $46000, $47000, $48000
            
            Stoploss: $43000
            ''',
            'trader_id': 'whales_crypto_guide',
            'name': 'Whales Crypto Test'
        },
        {
            'text': '''
            BTCUSDT LONG
            
            PAIR: BTC
            DIRECTION: LONG
            
            –í–•–û–î: 45000-46000
            
            –¶–ï–õ–ò:
            47000
            48000
            49000
            
            –°–¢–û–ü: 43000
            ''',
            'trader_id': '2trade_premium',
            'name': '2Trade Test'
        },
        {
            'text': '''
            üöÄüî• #ALPINE –∑–∞–ø–∞–º–ø–∏–ª–∏ –Ω–∞ +57% —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞. 
            –í 18:30 –ø–æ –º—Å–∫ –æ–Ω –∑–∞–∫—Ä–µ–ø–∏–ª—Å—è –≤ —Ç–æ–ø–µ –ø–æ —Å–ø–æ—Ç–æ–≤—ã–º –ø–æ–∫—É–ø–∫–∞–º –Ω–∞ Binance.
            ''',
            'trader_id': 'cryptoattack24',
            'name': 'CryptoAttack24 Test'
        }
    ]
    
    successful_tests = 0
    
    for test in test_signals:
        try:
            logger.info(f"   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º {test['name']}...")
            
            result = await orchestrator.process_raw_signal(
                test['text'], 
                test['trader_id'], 
                test['trader_id']
            )
            
            if result:
                logger.info(f"   ‚úÖ {test['name']}: {result.symbol} {result.direction}")
                successful_tests += 1
            else:
                logger.warning(f"   ‚ö†Ô∏è {test['name']}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
                
        except Exception as e:
            logger.error(f"   ‚ùå {test['name']}: –û—à–∏–±–∫–∞ - {e}")
    
    logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful_tests}/{len(test_signals)} —É—Å–ø–µ—à–Ω–æ")
    return successful_tests

async def start_telegram_listener():
    """–ó–∞–ø—É—Å–∫ Telegram —Å–ª—É—à–∞—Ç–µ–ª—è"""
    try:
        logger.info("üì± –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram Listener...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        api_id = os.getenv('TELEGRAM_API_ID')
        api_hash = os.getenv('TELEGRAM_API_HASH')
        
        if not api_id or not api_hash:
            logger.warning("‚ö†Ô∏è TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            logger.info("   –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram API")
            return False
        
        from core.telegram_listener import TelegramListener
        
        listener = TelegramListener(api_id, api_hash)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º (–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é)
        initialized = await listener.initialize()
        
        if initialized:
            logger.info("‚úÖ Telegram Listener –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return True
        else:
            logger.warning("‚ö†Ô∏è Telegram Listener –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram Listener: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ GHOST Trading System")
    logger.info("=" * 50)
    logger.info(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase
    orchestrator = await test_supabase_connection()
    
    if not orchestrator:
        logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: Supabase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        logger.info("   - NEXT_PUBLIC_SUPABASE_URL")
        logger.info("   - SUPABASE_SERVICE_ROLE_KEY")
        return
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
    successful_signals = await test_signal_processing(orchestrator)
    
    if successful_signals == 0:
        logger.warning("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram
    telegram_ready = await start_telegram_listener()
    
    # 4. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 50)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
    logger.info("=" * 50)
    
    logger.info(f"‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'–û–ö' if orchestrator else '–û–®–ò–ë–ö–ê'}")
    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {successful_signals}/3 –ø–∞—Ä—Å–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    logger.info(f"‚úÖ Telegram –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {'–û–ö' if telegram_ready else '–¢–†–ï–ë–£–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò'}")
    
    if orchestrator and successful_signals > 0:
        logger.info("üéâ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        logger.info("üåê Dashboard –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:")
        logger.info("   https://ghost-6nu0rvupx-sacralpros-projects.vercel.app")
        
        if not telegram_ready:
            logger.info("\nüîß –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ:")
            logger.info("   1. TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –≤ .env")
            logger.info("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python core/telegram_listener.py")
    else:
        logger.error("üí• –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    
    logger.info("=" * 50)

if __name__ == "__main__":
    asyncio.run(main())
