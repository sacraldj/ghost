#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö GHOST
"""

import os
import asyncio
from dotenv import load_dotenv
from supabase import create_client, Client

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def apply_database_schema():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    # Supabase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    supabase_url = os.getenv('NEXT_PUBLIC_SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
    
    if not supabase_url or not supabase_key:
        print("‚ùå Supabase credentials not found. Set SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY")
        return False
    
    print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase...")
    print(f"URL: {supabase_url}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        supabase: Client = create_client(supabase_url, supabase_key)
        
        # –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
        with open('db/safe_add_new_tables.sql', 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        print("üìÑ –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É...")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        sql_commands = [cmd.strip() for cmd in sql_content.split(';') if cmd.strip() and not cmd.strip().startswith('--')]
        
        print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º {len(sql_commands)} –∫–æ–º–∞–Ω–¥...")
        
        success_count = 0
        error_count = 0
        
        for i, command in enumerate(sql_commands, 1):
            if not command:
                continue
                
            try:
                print(f"  {i}/{len(sql_commands)}: {command[:50]}...")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ RPC
                result = supabase.rpc('exec_sql', {'sql': command}).execute()
                
                if result.data:
                    print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                    success_count += 1
                else:
                    print(f"    ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                    
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
                error_count += 1
                
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                continue
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        print(f"  ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        
        if error_count == 0:
            print("üéâ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
            return True
        else:
            print("‚ö†Ô∏è –°—Ö–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = apply_database_schema()
    if success:
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!")
