#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò

–≠–¢–ê–ü 1: –°–æ–∑–¥–∞–µ–º reader —Å–µ—Å—Å–∏—é (–û–î–ò–ù –†–ê–ó –≤–≤–æ–¥ –∫–æ–¥–∞)
–≠–¢–ê–ü 2: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò

–ó–ê–ü–£–°–ö:
1. python final_auto_auth.py setup    # –û–î–ò–ù –†–ê–ó —Å–æ–∑–¥–∞—Ç—å reader
2. python final_auto_auth.py auth session_name  # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ª—é–±—É—é —Å–µ—Å—Å–∏—é –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò
"""

import asyncio
import os
import re
import logging
import sys
from datetime import datetime, timedelta
from typing import Optional
from telethon import TelegramClient
from telethon.errors import PhoneCodeInvalidError, SessionPasswordNeededError
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class FinalAutoAuth:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.api_id = int(os.getenv('TELEGRAM_API_ID'))
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone = os.getenv('TELEGRAM_PHONE')
        self.reader_session = 'ghost_code_reader'
        
    async def setup_reader(self) -> bool:
        """–≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ reader —Å–µ—Å—Å–∏–∏ (–æ–¥–∏–Ω —Ä–∞–∑)"""
        print("üîë –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï READER –°–ï–°–°–ò–ò")
        print("=" * 50)
        print("üéØ –ù—É–∂–Ω–æ –û–î–ò–ù –†–ê–ó –≤–≤–µ—Å—Ç–∏ –∫–æ–¥")
        print("üöÄ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –í–°–ï —Å–µ—Å—Å–∏–∏ - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –µ—Å—Ç—å –ª–∏
        if await self._check_session(self.reader_session):
            print("‚úÖ Reader —Å–µ—Å—Å–∏—è —É–∂–µ –≥–æ—Ç–æ–≤–∞!")
            return await self._test_reader()
        
        print(f"\nüì± –°–æ–∑–¥–∞–µ–º {self.reader_session}...")
        print("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó ‚Üì")
        
        client = TelegramClient(self.reader_session, self.api_id, self.api_hash)
        
        try:
            await client.start(phone=self.phone)
            me = await client.get_me()
            
            print(f"\nüéâ READER –°–û–ó–î–ê–ù!")
            print(f"‚úÖ {me.first_name} (@{me.username})")
            
            # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∫–æ–¥–æ–≤
            if await self._test_reader():
                print(f"\nüöÄ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –ª—é–±—ã–µ —Å–µ—Å—Å–∏–∏:")
                print(f"   python {sys.argv[0]} auth session_name")
                return True
            else:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ–¥–∞–º")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
        finally:
            await client.disconnect()
    
    async def _test_reader(self) -> bool:
        """–¢–µ—Å—Ç reader —Å–µ—Å—Å–∏–∏"""
        try:
            client = TelegramClient(self.reader_session, self.api_id, self.api_hash)
            await client.connect()
            
            if not await client.is_user_authorized():
                await client.disconnect()
                return False
            
            # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–¥–∞–º
            try:
                entity = await client.get_entity(777000)
                print(f"üì± –î–æ—Å—Ç—É–ø –∫ Telegram Service: ‚úÖ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                async for message in client.iter_messages(entity, limit=1):
                    if message.message and "Login code:" in message.message:
                        print(f"üìã –ù–∞–π–¥–µ–Ω –∫–æ–¥: {message.message[:30]}...")
                        break
                
                await client.disconnect()
                return True
                
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ 777000, –ø—Ä–æ–±—É–µ–º Saved Messages
                try:
                    me = await client.get_me()
                    print(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º Saved Messages –¥–ª—è –∫–æ–¥–æ–≤")
                    await client.disconnect()
                    return True
                except Exception:
                    await client.disconnect()
                    return False
            
        except Exception as e:
            logger.debug(f"–¢–µ—Å—Ç reader: {e}")
            return False
    
    async def auto_auth(self, target_session: str) -> bool:
        """–≠–¢–ê–ü 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ª—é–±–æ–π —Å–µ—Å—Å–∏–∏"""
        logger.info(f"ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: {target_session}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º reader
        if not await self._check_session(self.reader_session):
            logger.error("‚ùå Reader —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            logger.info("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python final_auto_auth.py setup")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º target
        if await self._check_session(target_session):
            logger.info(f"‚úÖ {target_session} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            return True
        
        # 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
        return await self._perform_auto_auth(target_session)
    
    async def _check_session(self, session_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é"""
        try:
            client = TelegramClient(session_name, self.api_id, self.api_hash)
            await client.connect()
            
            is_auth = await client.is_user_authorized()
            await client.disconnect()
            return is_auth
            
        except Exception:
            return False
    
    async def _perform_auto_auth(self, target_session: str) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        target_client = TelegramClient(target_session, self.api_id, self.api_hash)
        reader_client = TelegramClient(self.reader_session, self.api_id, self.api_hash)
        
        try:
            await target_client.connect()
            await reader_client.connect()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞
            logger.info("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞...")
            await target_client.send_code_request(self.phone)
            request_time = datetime.now()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ–º –∏ –≤–≤–æ–¥–∏–º –∫–æ–¥
            for attempt in range(6):
                logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–¥–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/6...")
                
                code = await self._find_code(reader_client, request_time)
                
                if code:
                    logger.info(f"üéØ –ö–û–î –ù–ê–ô–î–ï–ù –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò: {code}")
                    
                    try:
                        await target_client.sign_in(self.phone, code)
                        logger.info("‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
                        
                        me = await target_client.get_me()
                        logger.info(f"üéâ {me.first_name} (@{me.username})")
                        return True
                        
                    except PhoneCodeInvalidError:
                        logger.warning(f"‚ùå –ö–æ–¥ {code} –Ω–µ–≤–µ—Ä–Ω—ã–π")
                        
                    except SessionPasswordNeededError:
                        logger.error("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
                        return False
                
                if attempt < 5:
                    await asyncio.sleep(10)
            
            logger.error("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
            
        finally:
            await target_client.disconnect()
            await reader_client.disconnect()
    
    async def _find_code(self, client: TelegramClient, request_time: datetime) -> Optional[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–¥–∞"""
        
        # Telegram Service (777000)
        try:
            entity = await client.get_entity(777000)
            time_threshold = request_time - timedelta(minutes=2)
            
            async for message in client.iter_messages(entity, limit=10):
                if not message.message or not message.date:
                    continue
                    
                if message.date < time_threshold:
                    continue
                
                code = self._extract_code(message.message)
                if code:
                    return code
        except Exception:
            pass
        
        # Saved Messages
        try:
            me = await client.get_me()
            time_threshold = request_time - timedelta(minutes=2)
            
            async for message in client.iter_messages(me.id, limit=5):
                if not message.message or not message.date:
                    continue
                    
                if message.date < time_threshold:
                    continue
                
                code = self._extract_code(message.message)
                if code:
                    return code
        except Exception:
            pass
        
        return None
    
    def _extract_code(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return None
        
        patterns = [
            r'Login code:\s*(\d{5,6})',
            r'–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞:\s*(\d{5,6})', 
            r'(\d{5,6})\s*is your',
            r'(\d{5,6})'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                code = match.group(1)
                if code.isdigit() and 4 <= len(code) <= 6:
                    return code
        
        return None


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    auth = FinalAutoAuth()
    
    if len(sys.argv) < 2:
        print("üìã –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
        print(f"  {sys.argv[0]} setup                    # –°–æ–∑–¥–∞—Ç—å reader (–û–î–ò–ù –†–ê–ó)")
        print(f"  {sys.argv[0]} auth session_name        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò")
        return
    
    command = sys.argv[1]
    
    if command == 'setup':
        print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
        success = await auth.setup_reader()
        if success:
            print("\n‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
    elif command == 'auth':
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Å—Å–∏–∏: python final_auto_auth.py auth session_name")
            return
            
        session_name = sys.argv[2]
        print(f"ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: {session_name}")
        
        success = await auth.auto_auth(session_name)
        if success:
            print(f"\nüéâ –ì–û–¢–û–í–û! –°–µ—Å—Å–∏—è {session_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å {session_name}")
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")


if __name__ == "__main__":
    asyncio.run(main())
